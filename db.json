{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/img/wuzhen.jpg","path":"img/wuzhen.jpg","modified":0,"renderable":0},{"_id":"themes/butterfly/source/FZSJ-MINGYSJZ.TTF","path":"FZSJ-MINGYSJZ.TTF","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/progress_bar.css","path":"css/progress_bar.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/self.css","path":"css/self.css","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/icon/naicha.png","path":"icon/naicha.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/icon/taiyang.png","path":"icon/taiyang.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/icon/shuijue.png","path":"icon/shuijue.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/icon/xiuxi.png","path":"icon/xiuxi.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/icon/xiyang.png","path":"icon/xiyang.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/icon/yemaozi.png","path":"icon/yemaozi.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/icon/yu.png","path":"icon/yu.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/bubble.js","path":"js/bubble.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/day.js","path":"js/day.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/inFootTime.js","path":"js/inFootTime.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/lunar.js","path":"js/lunar.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/rightMenus.js","path":"js/rightMenus.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/self.js","path":"js/self.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/sun_moon.js","path":"js/sun_moon.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/weather.js","path":"js/weather.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/background.png","path":"img/background.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.png","path":"img/404.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/fenlei.png","path":"img/fenlei.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend.jpg","path":"img/friend.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/hexo.jpg","path":"img/hexo.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/indexImg.jpg","path":"img/indexImg.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/indexImg.png","path":"img/indexImg.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/js-面试.jpg","path":"img/js-面试.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/loading.jpg","path":"img/loading.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post-css.jpg","path":"img/post-css.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post-one.jpg","path":"img/post-one.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post-onlyoffice.jpg","path":"img/post-onlyoffice.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post-onlyoffice-01.jpg","path":"img/post-onlyoffice-01.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post-react.jpg","path":"img/post-react.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post-vue.jpg","path":"img/post-vue.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/post-ssh.jpg","path":"img/post-ssh.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/time.jpg","path":"img/time.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/wenti-01.jpg","path":"img/wenti-01.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/wuzhen-img.jpg","path":"img/wuzhen-img.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"8167c0d41d0eb367a196aa11ff945fd30607a8d6","modified":1685507123551},{"_id":"source/link/index-2.md","hash":"b9928fc6b1937ec0b03bc46d24022fe904e03d51","modified":1683810437745},{"_id":"source/link/index.md","hash":"44464ad32f1ea789800f2ee89feaa0494f9d1a80","modified":1683363695570},{"_id":"source/_data/link.yml","hash":"d69668c39acfcd1e707b550e75fdab31f75a57bc","modified":1685676243242},{"_id":"source/link/index-1.md","hash":"ab1268a5fd3f020176f134f0ec375f9cd1e242b3","modified":1683724327873},{"_id":"source/tags/index.md","hash":"51700a13d94b4b65d9954766146d839f8a6b1489","modified":1683363607384},{"_id":"source/_posts/hello-world.md","hash":"c26619ce4d209f6318766e531b3a8a07b0c94386","modified":1685503887542},{"_id":"source/_posts/js面试题.md","hash":"484de35d1ec9fef5cdb05bb24cb26521819496ef","modified":1685503871572},{"_id":"source/_posts/hexo发布报错.md","hash":"1d1e71b9e583916e8ebb332681db1d37b12313eb","modified":1686017701464},{"_id":"source/_posts/html,css面试题.md","hash":"4f595e11028f6ec8ccfa27b813720eb86fa28950","modified":1685966360646},{"_id":"source/_posts/only-office-01.md","hash":"dc547cc0072eb673d0d65de6811ecf3b664509c2","modified":1685688648872},{"_id":"source/_posts/only-office编辑预览.md","hash":"58031a01754675c2004ee9ef5c89552b603f01af","modified":1685965061350},{"_id":"source/_posts/vue面试题.md","hash":"ec9d65a433b0c1dfc55ea002b4af885bc36f94af","modified":1685966384312},{"_id":"source/_posts/react面试题.md","hash":"aad7f12991970daa657471fe434318f1db6d670f","modified":1685964815375},{"_id":"source/_posts/生成sshkey.md","hash":"43e6d4bf18f2c09227ab9d647597921c87940bd8","modified":1686023745329},{"_id":"source/_posts/解决若依vue菜单点击不跳转问题 .md","hash":"766921002f825fa9ec7fb85e6510c6418ee0445c","modified":1685966216698},{"_id":"source/_posts/乌镇.md","hash":"d0e4bddb0017d3d41d2d19e5ce623b92884c22f8","modified":1686021212793},{"_id":"source/img/wuzhen.jpg","hash":"b01a70eb81ce218a6304e3473adcc3811e7430c0","modified":1686021716451},{"_id":"themes/butterfly/README.md","hash":"52967a864c244af4db8c63902586cb617ee5b8aa","modified":1683362978976},{"_id":"themes/butterfly/_config.yml","hash":"adc8f25ce9d499c18731b55735e5bc37262383ca","modified":1683362978976},{"_id":"themes/butterfly/README_CN.md","hash":"e19021371184361261ddef1d98eb308d78922714","modified":1683362978976},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1683362978976},{"_id":"themes/butterfly/package.json","hash":"79b3dde82bc6d983dc383d2810e96fb697d4fba1","modified":1683362979004},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1683362978978},{"_id":"themes/butterfly/plugins.yml","hash":"c7a060713f72ec8b4a45244b3aa8d51d772f5ce8","modified":1683362979004},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1683362978978},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1683362979003},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1683362979003},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1683362979004},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1683362979004},{"_id":"themes/butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1683362978977},{"_id":"themes/butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1683362978977},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"22b35df0f8e2dde03b09e2cc324bb9a5dffda3d0","modified":1685517512136},{"_id":"themes/butterfly/scripts/year.js","hash":"7a0a2a831e6faa3604bfbd180f02adf26acceae2","modified":1685275269712},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"34c5ef9027c03880d632224c1ea7a40b19d084aa","modified":1685517486787},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1683362978975},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1683362978974},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1683362978974},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1683362978975},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1683362978975},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1683362978978},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1683362978978},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"91b005ae835556ee642601853f4f287ebb5e5172","modified":1685519668008},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"a6afdf1f785bbdfe923931cf9f53d59f34da888d","modified":1685526912791},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1685516286967},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"4391f24659dc3a78d4603a1ba8e6944fce2b187a","modified":1683703479402},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"8fdbec73ac6f8889f85679c3d152a43a09ec62b0","modified":1685519720559},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"39efc7683e6101349457003b7a977cf174bd1b9e","modified":1685497556017},{"_id":"themes/butterfly/layout/includes/rightmenu.pug","hash":"a961b3d225300b22737df6e31cdff130a9bcc9a7","modified":1685581689666},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1683362979005},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1683362979005},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1683362979005},{"_id":"themes/butterfly/scripts/events/init.js","hash":"3ace1139182d3d367149db138990891427f3356e","modified":1683362979005},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1683362979006},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1683362979006},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1683362979007},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1683362979007},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1683362979007},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1683362979007},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"00b4487daf6c003a1d7c8b210deb04735a22dcbb","modified":1683726552160},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1683362979008},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1683723987492},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1683362979008},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1683362979008},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1683362979009},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1683362979009},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1683362979009},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1683362979009},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1683362979010},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1683362979010},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1683362979010},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1683362979010},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1683362979006},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1683362979006},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1683362979021},{"_id":"themes/butterfly/source/css/custom.css","hash":"de595a616315b7f402a30f56927382d8fda5dd3f","modified":1685514805496},{"_id":"themes/butterfly/source/css/progress_bar.css","hash":"fb61c8ea1507d3651d1dab7364d438c1297b05e0","modified":1683727542126},{"_id":"themes/butterfly/source/css/self.css","hash":"73843fb3e79ecebb0a8b03fb735f35ebb63d150a","modified":1686021809146},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1685075904890},{"_id":"themes/butterfly/source/icon/taiyang.png","hash":"aeb5df23f8fd077e464cb174907c81c2707f396f","modified":1685071771000},{"_id":"themes/butterfly/source/icon/shuijue.png","hash":"1048b702d9949e57d12ec239a8413372a7591b1d","modified":1685071771000},{"_id":"themes/butterfly/source/icon/xiuxi.png","hash":"85114ac8b99f245826a7358507cd7558bea0dca8","modified":1685071771000},{"_id":"themes/butterfly/source/icon/naicha.png","hash":"67b02d211dbe5f521eb6ba7af271b277578ddf75","modified":1685071771000},{"_id":"themes/butterfly/source/icon/xiyang.png","hash":"c7a989c9f4771ac6030b8e441585592887db14ca","modified":1685071771000},{"_id":"themes/butterfly/source/icon/yemaozi.png","hash":"fc17f3a73a061f4d7ee20de55746361f43109af2","modified":1685071771000},{"_id":"themes/butterfly/source/icon/yu.png","hash":"a31b229181e7b257324a1f3225d3615c86044098","modified":1685071771000},{"_id":"themes/butterfly/source/js/bubble.js","hash":"460971f866027f795141b492709b12b388345942","modified":1683812296444},{"_id":"themes/butterfly/source/js/day.js","hash":"b562e34061098f4a379183ce8f3923987f70d639","modified":1683811860877},{"_id":"themes/butterfly/source/js/inFootTime.js","hash":"ae07a3cb91099e65aa5831f1f34bf47808b02560","modified":1683708691235},{"_id":"themes/butterfly/source/js/lunar.js","hash":"b2c298ec6291f926b7b0bb2ad994a48858d4ebed","modified":1683811911107},{"_id":"themes/butterfly/source/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1683362979023},{"_id":"themes/butterfly/source/js/rightMenus.js","hash":"787577267a85daf5d8aebd27afb674309e3af222","modified":1685582250910},{"_id":"themes/butterfly/source/js/self.js","hash":"50bc5631a8e081ae6f69cd91db56230cafc93064","modified":1685438085251},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1683362979025},{"_id":"themes/butterfly/source/js/sun_moon.js","hash":"a919a446e332face95dfb11069dce205959766ae","modified":1685582003484},{"_id":"themes/butterfly/source/js/utils.js","hash":"2e74fe8ae5ac20067668a18df5985459faf419f9","modified":1685077162605},{"_id":"themes/butterfly/source/js/weather.js","hash":"fc147bc9b5e50a38f2b51829b1ca4d4ef7f5e4d1","modified":1683707616995},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1683362979022},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1683362979023},{"_id":"themes/butterfly/layout/includes/custom/sun_moon.pug","hash":"8814f54335898c5b440e643b2ca701ea052902d5","modified":1685519589686},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"0c1551ef80bbece550fe520d91e21f083cbc14fe","modified":1683362978982},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"2a2f23aebdd7b16798d9dc206ce4599c7d225636","modified":1685435610457},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1683362978982},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1683362978983},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1683362978983},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"013d856118a40dacf657776896f731445df9f1c5","modified":1683727489367},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"f86b0c45874ae1335ab575c29d4f9c8ea09ab92a","modified":1683727505276},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"84bc5688eb86e531ce7b1bc14b7f0596a6b52092","modified":1685275545284},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1683362978985},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f915b4458b7f0ee867b6ebe9fa14af08519d232f","modified":1683810529840},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1683362978984},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"773e28d7f8924b6bc9f64dec53afc245a1c254a5","modified":1683806049091},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1683362978985},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1683362978985},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1683362978986},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1683362978979},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1683362978979},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"021ccdca211cce0438a378ada37897a8ffcb9574","modified":1683362978980},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1683362978980},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1683362978986},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1683362978980},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1683362978980},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1683362978981},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1683362978981},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1683362978987},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1683362978993},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1683362978981},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1683362978998},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"fc0b09068009edd4026d90a669608cbe211aeecf","modified":1683362978998},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1683362979001},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1683362978998},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"35223531f8e086d57caec2d17d45ddbcb39deb74","modified":1683362979000},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"6da04885bae286ece90cc412741819b13eed86bc","modified":1683704679505},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1683362979000},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1683362979001},{"_id":"themes/butterfly/layout/includes/widget/card_ip.pug","hash":"3b52ea4b67f958191340abb772f6e2d08b5fcf9e","modified":1683704652959},{"_id":"themes/butterfly/layout/includes/widget/card_friend_link.pug","hash":"60dbfd232971585c49f2dc625003b71144f44df2","modified":1685517423288},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1683362979002},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1683362979001},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1683362979002},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1683362979002},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1683362979002},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1683362979003},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1683362979003},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1683362979002},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8b4207a505f35c62be1b8944c613ffc060cd091d","modified":1685517381181},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1683362979012},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1683362979013},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"5916f6d552621a7e761e949adc68d00d8741f8d9","modified":1685517966373},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"7ff0c456fae2717ddbbb9f8fae2734d449a5448b","modified":1683362979016},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ffea9e7c1543edcf080381e7b99828954c2f2cef","modified":1683362979016},{"_id":"themes/butterfly/source/css/_layout/card_friend_link.styl","hash":"2a1767b92e346a6bd285266a4eb1b7a6bf494643","modified":1685518113849},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1683362979014},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"faef63a3df6c0ce4e835f6af021340cb7992cafd","modified":1683727213101},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1683362979013},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1683853781114},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83553445fbc92cad4ad220fbd87b4c3db958c32a","modified":1683362979014},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1683362979015},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1683362979015},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1683362979015},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"e24046fad288a13897195038cb7a63d1014cd7b8","modified":1683362979015},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1683362979015},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"3070fa16eed9f8c3be56afff474a288fc9b9c993","modified":1685497614566},{"_id":"themes/butterfly/source/css/_layout/sun_moon.styl","hash":"6d7b2f48e04dca561eaec6d8f5b02140106d0377","modified":1685519533646},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"ca39e634668ed4fbb43267ec4782c2b55c44e698","modified":1685076881951},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4f5636c326f794417296bdb6bcfd6a8b207d69d8","modified":1683362979011},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1683362979017},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"7fdfbe8f97b41588bbd5c6f27e7e85a881b28954","modified":1683362979011},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1683362979017},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1683362979017},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"e4b9d6164e97b30c84e1218c7543c60f6b29edcc","modified":1683362979018},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"8d2fd87fb9b2a086824d5469c276fb5718d12887","modified":1683810617720},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1683362979018},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"678e56ad2e46b630364540fc6a881d6801192dcd","modified":1683362979019},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"9f1a3e843e3c055aaa22e718e3cacc3ed96ee293","modified":1686024272869},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1683362979019},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1683362979019},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1683362979020},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1683362979019},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1683362979020},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1683362979020},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1683362979021},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1683362979020},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1683362979020},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1683362979021},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1683362979021},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1683362979021},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1683362979024},{"_id":"themes/butterfly/layout/includes/page/flink_style/flexcard.pug","hash":"d3c82b922b5a7c04c9037aaf9d6d0f2a2bf2cf1b","modified":1683810584302},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"8a0547ecb33ad2939450152adf54fca58e22a424","modified":1683362979024},{"_id":"themes/butterfly/layout/includes/page/flink_style/volantis.pug","hash":"41d3a115f2d54836fa25d74fbcba5e34049149f9","modified":1683810571646},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"cabb3a06f8ef297a1ea3d91ced8abeaa0831aa14","modified":1683362978987},{"_id":"themes/butterfly/layout/includes/page/flink_style/butterfly.pug","hash":"3683f747299308b81897809fa229fb8b8c9d6a37","modified":1683810556167},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1683362978989},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1683362978990},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1683362978987},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1683362978990},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"3ce0461534b786cb71d9141dff35fa5cb70e22b9","modified":1683362978990},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1683362978990},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1683362978990},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1683362978988},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1683362978988},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1683362978988},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1683362978989},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1683362978988},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1683362978989},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1683362978996},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1683362978988},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"55acc455ca8e13211e3906cf78e487cc92accee5","modified":1683362978989},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"e6ebbe137dd86b6d8750a6843e350fcd16030981","modified":1683362978996},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1683362978997},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1683362978998},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1683362978997},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1683362978998},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1683362978997},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"441d87067d87d9996b53b25c05b8e620bd94b027","modified":1683362978998},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"95738f110598f999d627234e78ff9e9decac1b9b","modified":1683362978991},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1683362978991},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"9c16ff9cdc444ebf47eed33ea35b8366459a18f0","modified":1683362978991},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"a833715eec2171ff05664d6d5752a57c954192ce","modified":1683362978991},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c3a87393cb49915940c2dd206356c2a16549767","modified":1683362978992},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3ba842bf4801b2f115c2cfe5657f35a732ce589f","modified":1683362978991},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1683362978992},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1683362978992},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1683362978992},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1683362978992},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1683362978993},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1683362978994},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1683362978993},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1683362978993},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"26ba1fc99117993087b1c6e02daa2626627d8eb1","modified":1683362978993},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1683362978994},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1683362978995},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"0ea633b11b357afa50c200290d19c32467d58a1d","modified":1683362978995},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1683362979000},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1683362979000},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1683362979000},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1683362979000},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1683362978999},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1683362978999},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1683362978999},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1683362978999},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1683362979012},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1683362979012},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1683362979012},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1683362979013},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1683362979013},{"_id":"themes/butterfly/source/css/_page/_flink_style/butterfly.styl","hash":"9f81b507cb8cb2d0659936157a576705bcd2f607","modified":1683810658146},{"_id":"themes/butterfly/source/css/_page/_flink_style/volantis.styl","hash":"028276d4087629545d8c73ab0773691dbe13faf6","modified":1683810669639},{"_id":"themes/butterfly/source/css/_page/_flink_style/flexcard.styl","hash":"4fe83a8c0f640db1e33f87780446d1c87443580e","modified":1683810684179},{"_id":"themes/butterfly/source/img/avatar.jpg","hash":"c973794598e5d3d4da1aac5331ec93a1a9c87710","modified":1685278445090},{"_id":"themes/butterfly/source/img/post-one.jpg","hash":"853ebda6ef77cecfa5e6e3b4805b6574b4d805b2","modified":1685074704589},{"_id":"themes/butterfly/source/img/post-onlyoffice.jpg","hash":"185cb86b5d125c85a5497a32b273e90710e243eb","modified":1685074940550},{"_id":"themes/butterfly/source/img/wuzhen-img.jpg","hash":"0264ac933bfb1afa4d352b9296d9fa52733ee67c","modified":1686021152509},{"_id":"themes/butterfly/source/img/logo.png","hash":"b4ab20f36bcebbb026efbbc131d803aab06883cb","modified":1683720831803},{"_id":"themes/butterfly/source/img/indexImg.jpg","hash":"8fe668aa666a41d4db6cbcabbe7e21855610de9e","modified":1683617752874},{"_id":"themes/butterfly/source/img/404.jpg","hash":"bec7268aadffae6d71d1854770db5557fec8b4dc","modified":1683618117440},{"_id":"themes/butterfly/source/img/loading.jpg","hash":"397ab89d2a8e0dc033b4770ef3945d6118c3deb5","modified":1683728668538},{"_id":"themes/butterfly/source/img/wenti-01.jpg","hash":"825aa184aa5b61d2b2a18e4bca6e9f781540f57d","modified":1685506698401},{"_id":"themes/butterfly/source/img/hexo.jpg","hash":"9be6e0330ffa811be43ed3c99225e94cf46c6e57","modified":1685964713128},{"_id":"themes/butterfly/source/img/post-ssh.jpg","hash":"ca3e9e728c359ca2287532903e5e74d89c4b7109","modified":1685964360152},{"_id":"themes/butterfly/source/img/post-onlyoffice-01.jpg","hash":"476f439546785a49f1f33cd93b4a9e8e9f61acec","modified":1685964598911},{"_id":"themes/butterfly/source/img/post-vue.jpg","hash":"882ce7280693013e4fe574934b5dd136db246a85","modified":1685074613444},{"_id":"themes/butterfly/source/img/friend.jpg","hash":"c618634378d8dac47c262ec72d44e63ab051ee4f","modified":1685507160446},{"_id":"themes/butterfly/source/img/js-面试.jpg","hash":"0556096d72b605375bf044306a2d5bf4c3379eb7","modified":1684855682421},{"_id":"themes/butterfly/source/img/post-css.jpg","hash":"294ac6dcfdc387711a8738437f207d14ef28eb89","modified":1685074646855},{"_id":"themes/butterfly/source/img/background.png","hash":"5860b5adb19153d9961c839a82c8be2629edaa68","modified":1683617428415},{"_id":"themes/butterfly/source/img/time.jpg","hash":"247448b2bbcb0e07a67231aa619396be85836718","modified":1685507495190},{"_id":"themes/butterfly/source/img/404.png","hash":"042001af1f78db37a94215e29a81d444a4a89fb7","modified":1685506991556},{"_id":"themes/butterfly/source/img/fenlei.png","hash":"9c612ed297d5feaa16080169c25f0d4da0240674","modified":1685507053631},{"_id":"themes/butterfly/source/FZSJ-MINGYSJZ.TTF","hash":"fd3dd7f2f38d4468ba49ca1e62d61e7236335fa8","modified":1683721797216},{"_id":"themes/butterfly/source/img/indexImg.png","hash":"ac330e5c1e49ae5f7af791245c67628d569d4a27","modified":1685506857504},{"_id":"themes/butterfly/source/img/post-react.jpg","hash":"c617a7f05d0fb2c6bf7b9cead4ddec2f94229d23","modified":1685964748808},{"_id":"public/search.xml","hash":"d4355775186caf75e4953f9fda5629b275ece389","modified":1686023757886},{"_id":"public/categories/index.html","hash":"1322a9c2d1d410d5b13a36dad5e5d4dde8848831","modified":1686023757886},{"_id":"public/link/index-2.html","hash":"1a055b501e20286f507b63b050da6d4653dc6022","modified":1686023757886},{"_id":"public/tags/index.html","hash":"ad7b268dd545f918a8780dcf5b601c5df9dfd1e1","modified":1686023757886},{"_id":"public/link/index.html","hash":"32044e0cfcd7c9bc6b56e5ab47a474365b94f53d","modified":1686023757886},{"_id":"public/link/index-1.html","hash":"68c714bc6f84bdea882d417540c19b7a965afe76","modified":1686023757886},{"_id":"public/2023/06/06/乌镇/index.html","hash":"154f34ad796969cba9f921d7bda372f9982230f9","modified":1686023757886},{"_id":"public/2023/06/05/hexo发布报错/index.html","hash":"beac29cb98ebfb6794906ef08b3245600e3f9b90","modified":1686023757886},{"_id":"public/2023/06/05/生成sshkey/index.html","hash":"f0ef006f09a2a8f618613aed397a8c0c76372f05","modified":1686023757886},{"_id":"public/2023/06/05/react面试题/index.html","hash":"4d1ca7d77b03ba0d1ce26d774f8003d096a75332","modified":1686023757886},{"_id":"public/2023/06/02/only-office编辑预览/index.html","hash":"a1c8fe1029c0d8699e231d1907c594e5fe000be6","modified":1686023757886},{"_id":"public/2023/05/31/解决若依vue菜单点击不跳转问题 /index.html","hash":"840e5c3093c16bd8ae5aa35dc700aafca6b2c982","modified":1686023757886},{"_id":"public/2023/05/25/vue面试题/index.html","hash":"eb1e4e0826cb70bf8ba36c74e517366454163bf3","modified":1686023757886},{"_id":"public/2023/05/23/js面试题/index.html","hash":"2ff1920f59cae9d201d542e2990a0500b855febc","modified":1686023757886},{"_id":"public/2023/05/22/html,css面试题/index.html","hash":"7fb9aa746de8b501207553c03fcdb13bcf63fa15","modified":1686023757886},{"_id":"public/2023/05/11/only-office-01/index.html","hash":"1b885acf0faac4a8100a9adc711df0fab9040a62","modified":1686023757886},{"_id":"public/2023/05/06/hello-world/index.html","hash":"34ec41524514d0cadf99ce05bcb4df7444ee8065","modified":1686023757886},{"_id":"public/archives/index.html","hash":"aba846a015bbe281ee309448327c37876ee4d7ad","modified":1686023757886},{"_id":"public/archives/page/2/index.html","hash":"d25e1d0fd1d331be2fde5a34a01bc9514e6023f9","modified":1686023757886},{"_id":"public/archives/2023/index.html","hash":"c9e051ed817592a59310f5bdd8e298f78552d36e","modified":1686023757886},{"_id":"public/archives/2023/page/2/index.html","hash":"3cc3c274461a22e8597715f0b6857cba9fe64686","modified":1686023757886},{"_id":"public/archives/2023/05/index.html","hash":"69a1c3b24f6d922cb73acc7c619372c246868813","modified":1686023757886},{"_id":"public/index.html","hash":"4ef570fc475920ef65cf1e0fb983d5df58a4f954","modified":1686023757886},{"_id":"public/archives/2023/06/index.html","hash":"9a98f619fc7afa52d49333c9e3c2bf2a505d1205","modified":1686023757886},{"_id":"public/page/2/index.html","hash":"b4e87822e703bb3394141e4805a8bdbf324661c2","modified":1686023757886},{"_id":"public/categories/Hello-Word/index.html","hash":"49b7aa8b29452eae2b3f9d5cee53d9e5598f6159","modified":1686023757886},{"_id":"public/categories/前端面试题/index.html","hash":"4dc21eacfe1113bccab93c91312a812771b92e0c","modified":1686023757886},{"_id":"public/categories/插件使用/index.html","hash":"23438180e532029456b2095fdb3ba3ecd1a5d96e","modified":1686023757886},{"_id":"public/categories/博客搭建/index.html","hash":"f8c48ec2fe3c8ea80bb490c8a0f9b55313f47cef","modified":1686023757886},{"_id":"public/categories/粗去玩/index.html","hash":"fa2f1638f4b5d620efdbda99498f969e991004fc","modified":1686023757886},{"_id":"public/categories/前端问题收集/index.html","hash":"bb07395f6cafd3c816381f63cb42fe0e85bc2542","modified":1686023757886},{"_id":"public/categories/git配置/index.html","hash":"4e49247caa17d13cb98c09e76d3b59c20115a5ac","modified":1686023757886},{"_id":"public/icon/taiyang.png","hash":"aeb5df23f8fd077e464cb174907c81c2707f396f","modified":1686023757886},{"_id":"public/icon/shuijue.png","hash":"1048b702d9949e57d12ec239a8413372a7591b1d","modified":1686023757886},{"_id":"public/icon/xiuxi.png","hash":"85114ac8b99f245826a7358507cd7558bea0dca8","modified":1686023757886},{"_id":"public/icon/naicha.png","hash":"67b02d211dbe5f521eb6ba7af271b277578ddf75","modified":1686023757886},{"_id":"public/icon/yu.png","hash":"a31b229181e7b257324a1f3225d3615c86044098","modified":1686023757886},{"_id":"public/icon/yemaozi.png","hash":"fc17f3a73a061f4d7ee20de55746361f43109af2","modified":1686023757886},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1686023757886},{"_id":"public/icon/xiyang.png","hash":"c7a989c9f4771ac6030b8e441585592887db14ca","modified":1686023757886},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1686023757886},{"_id":"public/js/day.js","hash":"d8077776451f9c83a77449558178cc3b43cbe871","modified":1686023757886},{"_id":"public/js/inFootTime.js","hash":"45a73a207361ad0c797a3be6306795588e35b2f9","modified":1686023757886},{"_id":"public/js/utils.js","hash":"2e74fe8ae5ac20067668a18df5985459faf419f9","modified":1686023757886},{"_id":"public/js/weather.js","hash":"d5b9244ffb9e877d4764fb45e4f8f80cd142a49f","modified":1686023757886},{"_id":"public/js/sun_moon.js","hash":"998b350bf67f0efb25339d5ec8843758840dd65f","modified":1686023757886},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1686023757886},{"_id":"public/js/search/local-search.js","hash":"8a0547ecb33ad2939450152adf54fca58e22a424","modified":1686023757886},{"_id":"public/js/bubble.js","hash":"6f9543cbeb2a6ca325c73b0925be3bd94b55eabc","modified":1686023757886},{"_id":"public/js/rightMenus.js","hash":"a22c1f4e1de853af7fea59961202c81e8e222592","modified":1686023757886},{"_id":"public/js/lunar.js","hash":"fe26258a3359bf86202a6b87c20dc520ce545099","modified":1686023757886},{"_id":"public/js/main.js","hash":"05c825962e365af62096d3f1b4d7c9ee1b5fc2f5","modified":1686023757886},{"_id":"public/js/self.js","hash":"e3f7509a7040a909f937d3ae600ada4e77201b07","modified":1686023757886},{"_id":"public/js/tw_cn.js","hash":"76d0c5c172cae44b34b0bd3125fd068b2c3cbd4a","modified":1686023757886},{"_id":"public/css/custom.css","hash":"de16f6fc34a07924a57a57ba5941e79d47ad9dd7","modified":1686023757886},{"_id":"public/css/self.css","hash":"38799a7a57070166fefc62682843506f6f1978be","modified":1686023757886},{"_id":"public/css/progress_bar.css","hash":"dae74210ef044d290013412b4f1983e72089c05f","modified":1686023757886},{"_id":"public/css/var.css","hash":"4c1fc1fd3d502925cc574d5f38d8df0518704ef8","modified":1686023757886},{"_id":"public/css/index.css","hash":"77594e563bb6c9b6d12514f86fe2beba53f183f7","modified":1686023757886},{"_id":"public/img/avatar.jpg","hash":"c973794598e5d3d4da1aac5331ec93a1a9c87710","modified":1686023757886},{"_id":"public/img/post-one.jpg","hash":"853ebda6ef77cecfa5e6e3b4805b6574b4d805b2","modified":1686023757886},{"_id":"public/img/post-onlyoffice.jpg","hash":"185cb86b5d125c85a5497a32b273e90710e243eb","modified":1686023757886},{"_id":"public/img/wuzhen-img.jpg","hash":"0264ac933bfb1afa4d352b9296d9fa52733ee67c","modified":1686023757886},{"_id":"public/img/logo.png","hash":"b4ab20f36bcebbb026efbbc131d803aab06883cb","modified":1686023757886},{"_id":"public/img/wuzhen.jpg","hash":"b01a70eb81ce218a6304e3473adcc3811e7430c0","modified":1686023757886},{"_id":"public/img/indexImg.jpg","hash":"8fe668aa666a41d4db6cbcabbe7e21855610de9e","modified":1686023757886},{"_id":"public/img/404.jpg","hash":"bec7268aadffae6d71d1854770db5557fec8b4dc","modified":1686023757886},{"_id":"public/img/loading.jpg","hash":"397ab89d2a8e0dc033b4770ef3945d6118c3deb5","modified":1686023757886},{"_id":"public/img/wenti-01.jpg","hash":"825aa184aa5b61d2b2a18e4bca6e9f781540f57d","modified":1686023757886},{"_id":"public/img/hexo.jpg","hash":"9be6e0330ffa811be43ed3c99225e94cf46c6e57","modified":1686023757886},{"_id":"public/img/post-ssh.jpg","hash":"ca3e9e728c359ca2287532903e5e74d89c4b7109","modified":1686023757886},{"_id":"public/img/post-onlyoffice-01.jpg","hash":"476f439546785a49f1f33cd93b4a9e8e9f61acec","modified":1686023757886},{"_id":"public/img/post-vue.jpg","hash":"882ce7280693013e4fe574934b5dd136db246a85","modified":1686023757886},{"_id":"public/img/friend.jpg","hash":"c618634378d8dac47c262ec72d44e63ab051ee4f","modified":1686023757886},{"_id":"public/img/js-面试.jpg","hash":"0556096d72b605375bf044306a2d5bf4c3379eb7","modified":1686023757886},{"_id":"public/img/post-css.jpg","hash":"294ac6dcfdc387711a8738437f207d14ef28eb89","modified":1686023757886},{"_id":"public/img/background.png","hash":"5860b5adb19153d9961c839a82c8be2629edaa68","modified":1686023757886},{"_id":"public/img/time.jpg","hash":"247448b2bbcb0e07a67231aa619396be85836718","modified":1686023757886},{"_id":"public/img/404.png","hash":"042001af1f78db37a94215e29a81d444a4a89fb7","modified":1686023757886},{"_id":"public/img/fenlei.png","hash":"9c612ed297d5feaa16080169c25f0d4da0240674","modified":1686023757886},{"_id":"public/FZSJ-MINGYSJZ.TTF","hash":"fd3dd7f2f38d4468ba49ca1e62d61e7236335fa8","modified":1686023757886},{"_id":"public/img/indexImg.png","hash":"ac330e5c1e49ae5f7af791245c67628d569d4a27","modified":1686023757886},{"_id":"public/img/post-react.jpg","hash":"c617a7f05d0fb2c6bf7b9cead4ddec2f94229d23","modified":1686023757886}],"Category":[{"name":"Hello Word","_id":"clijr0jcl000444vce82c3pnm"},{"name":"前端面试题","_id":"clijr0jcq000b44vc5ryegf02"},{"name":"插件使用","_id":"clijr0jct000f44vch9kdgapj"},{"name":"博客搭建","_id":"clijr0jcu000h44vcg0u63nok"},{"name":"粗去玩","_id":"clijr0jcz000r44vc7zti6jzt"},{"name":"前端问题收集","_id":"clijr0jd1000u44vc1kcm595l"},{"name":"git配置","_id":"clijr0jd1000w44vc9ojfaazv"}],"Data":[{"_id":"link","data":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}],"Page":[{"title":"分类","type":"categories","date":"2023-05-06T08:54:57.000Z","top_img":"/img/fenlei.png","_content":"\n## hello word\n  - [hellw-word](/source/_posts/hello-world.md)\n\n## 面试\n  - [html,css面试题](/source/_posts/html%2Ccss%E9%9D%A2%E8%AF%95%E9%A2%98.md)\n  - [js面试题](/source/_posts/js%E9%9D%A2%E8%AF%95%E9%A2%98.md)\n  - [vue面试题](/source/_posts/vue%E9%9D%A2%E8%AF%95%E9%A2%98.md)\n\n## 插件\n  ### onle office\n  - [only-office相关配置](/source/_posts/only-office-01.md)","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\ndate: 2023-05-06 16:54:57\ntop_img: /img/fenlei.png\n---\n\n## hello word\n  - [hellw-word](/source/_posts/hello-world.md)\n\n## 面试\n  - [html,css面试题](/source/_posts/html%2Ccss%E9%9D%A2%E8%AF%95%E9%A2%98.md)\n  - [js面试题](/source/_posts/js%E9%9D%A2%E8%AF%95%E9%A2%98.md)\n  - [vue面试题](/source/_posts/vue%E9%9D%A2%E8%AF%95%E9%A2%98.md)\n\n## 插件\n  ### onle office\n  - [only-office相关配置](/source/_posts/only-office-01.md)","updated":"2023-05-31T04:25:23.551Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clijr0jcd000044vcf98weu3e","content":"<h2 id=\"hello-word\"><a href=\"#hello-word\" class=\"headerlink\" title=\"hello word\"></a>hello word</h2><ul>\n<li><a href=\"/source/_posts/hello-world.md\">hellw-word</a></li>\n</ul>\n<h2 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h2><ul>\n<li><a href=\"/source/_posts/html,css%E9%9D%A2%E8%AF%95%E9%A2%98.md\">html,css面试题</a></li>\n<li><a href=\"/source/_posts/js%E9%9D%A2%E8%AF%95%E9%A2%98.md\">js面试题</a></li>\n<li><a href=\"/source/_posts/vue%E9%9D%A2%E8%AF%95%E9%A2%98.md\">vue面试题</a></li>\n</ul>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"onle-office\"><a href=\"#onle-office\" class=\"headerlink\" title=\"onle office\"></a>onle office</h3><ul>\n<li><a href=\"/source/_posts/only-office-01.md\">only-office相关配置</a></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover":"https://w.wallhaven.cc/full/57/wallhaven-57vj29.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"hello-word\"><a href=\"#hello-word\" class=\"headerlink\" title=\"hello word\"></a>hello word</h2><ul>\n<li><a href=\"/source/_posts/hello-world.md\">hellw-word</a></li>\n</ul>\n<h2 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h2><ul>\n<li><a href=\"/source/_posts/html,css%E9%9D%A2%E8%AF%95%E9%A2%98.md\">html,css面试题</a></li>\n<li><a href=\"/source/_posts/js%E9%9D%A2%E8%AF%95%E9%A2%98.md\">js面试题</a></li>\n<li><a href=\"/source/_posts/vue%E9%9D%A2%E8%AF%95%E9%A2%98.md\">vue面试题</a></li>\n</ul>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><h3 id=\"onle-office\"><a href=\"#onle-office\" class=\"headerlink\" title=\"onle office\"></a>onle office</h3><ul>\n<li><a href=\"/source/_posts/only-office-01.md\">only-office相关配置</a></li>\n</ul>\n"},{"title":"link","date":"2023-05-11T13:07:17.000Z","_content":"","source":"link/index-2.md","raw":"---\ntitle: link\ndate: 2023-05-11 21:07:17\n---\n","updated":"2023-05-11T13:07:17.745Z","path":"link/index-2.html","comments":1,"layout":"page","_id":"clijr0jcj000244vc533v40oa","content":"","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover":"https://w.wallhaven.cc/full/e7/wallhaven-e7w25k.jpg","cover_type":"img","excerpt":"","more":""},{"title":"标签","type":"tags","date":"2023-05-06T08:54:14.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\ndate: 2023-05-06 16:54:14\n---\n","updated":"2023-05-06T09:00:07.384Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clijr0jcn000544vcarlbh6ui","content":"","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover":"https://w.wallhaven.cc/full/ex/wallhaven-ex7v9o.jpg","cover_type":"img","excerpt":"","more":""},{"title":"友情链接","type":"link","date":"2023-05-06T08:55:24.000Z","_content":"","source":"link/index.md","raw":"---\ntitle: 友情链接\ntype: \"link\"\ndate: 2023-05-06 16:55:24\n---\n","updated":"2023-05-06T09:01:35.570Z","path":"link/index.html","comments":1,"layout":"page","_id":"clijr0jco000744vc4thdgpxe","content":"","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover":"https://w.wallhaven.cc/full/g7/wallhaven-g7pv23.jpg","cover_type":"img","excerpt":"","more":""},{"title":"link","date":"2023-05-10T13:12:07.000Z","_content":"","source":"link/index-1.md","raw":"---\ntitle: link\ndate: 2023-05-10 21:12:07\n---\n","updated":"2023-05-10T13:12:07.873Z","path":"link/index-1.html","comments":1,"layout":"page","_id":"clijr0jcp000944vc9o0839v4","content":"","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover":"https://w.wallhaven.cc/full/8o/wallhaven-8o9j91.jpg","cover_type":"img","excerpt":"","more":""}],"Post":[{"title":"Hello World","cover":"/img/post-one.jpg","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncover: /img/post-one.jpg\ncategories:\n  - Hello Word\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n```bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n```bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n```bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n```bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-05-06T08:42:01.731Z","updated":"2023-05-31T03:31:27.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clijr0jcg000144vc3qg78m9p","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover_type":"img","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"前端js面试题","cover":"/img/js-面试.jpg","_content":"\n继续整理，本篇以js内容为主，如需其他，请阅读其他文章。\n\n## js数据类型\n  ### 基本数据类型\n  - Number 数字类型\n  - String 字符串类型\n  - Boolean 布尔值\n  - Null 空值\n  - Undefined 未定义\n  - Object 对象\n  - Array 数组\n  - Symbol 表示唯一的、不可变的值，用于创建对象的唯一标识符。Symbol 在 ES6 中引入。\n  - BigInt 数值太大的数字类型\n  ### 特殊数据类型\n  - Function 函数数据类型\n\n## 检测数据类型的方式\n  ### typeof\n  - typeof 是一个一元操作符，用于获取一个值的类型。它返回一个表示数据类型的<font color=#9900CC>字符串</font>。\n  - 返回值为字符串。\n  - 可以准确的判断出<font color=#9900CC>基本数据类型</font>和<font color=#9900CC>Funtcion</font>，其他均为object。\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    typeof 42; // \"number\"\n    typeof \"Hello\"; // \"string\"\n    typeof true; // \"boolean\"\n    typeof undefined; // \"undefined\"\n    typeof null; // \"object\" (注意这是一个历史遗留问题，null 被错误地判断为对象)\n    typeof [1, 2, 3]; // \"object\"\n    typeof { name: \"John\", age: 25 }; // \"object\"\n    typeof function() {}; // \"function\"\n  ```\n  ### instanceof\n  - instanceof 操作符用于检查一个对象是否是某个构造函数创建的实例。它可以<font color=#9900CC>判断对象是否属于特定的类型或其子类型</font>。\n  - 返回值为<font color=#9900CC>Boolean</font>Boolean值。\n  - 对于原始值（如数字、字符串、布尔值等），使用 instanceof 操作符会返回 false，因为原始值不是对象。\n  - 而对于对象类型（如数组、函数、对象等），instanceof 可以判断其是否属于特定类型或其子类型。\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    const num = 42;\n    console.log(num instanceof Number); // false\n\n    const str = \"Hello\";\n    console.log(str instanceof String); // false\n\n    const bool = true;\n    console.log(bool instanceof Boolean); // false\n\n    const undef = undefined;\n    console.log(undef instanceof Undefined); // 报错，Undefined 不是一个构造函数\n\n    const nul = null;\n    console.log(nul instanceof Object); // false\n\n    const arr = [1, 2, 3];\n    console.log(arr instanceof Array); // true\n\n    const obj = { name: \"John\", age: 25 };\n    console.log(obj instanceof Object); // true\n\n    const func = function() {};\n    console.log(func instanceof Function); // true\n  ```\n  ### 手写实现instanceof\n  ```JavaScript\n    function myInstanceof(obj, constructor) {\n      if (typeof obj !== 'object' || obj === null) {\n        return false;\n      }\n\n      let prototype = Object.getPrototypeOf(obj);\n\n      while (prototype !== null) {\n        if (prototype === constructor.prototype) {\n          return true;\n        }\n        prototype = Object.getPrototypeOf(prototype);\n      }\n\n      return false;\n    }\n  ```\n  ### Array.isArray\n  - Array.isArray() 是一个静态方法，用于检查一个值是否是数组类型。\n  - 返回值为<font color=#9900CC>Boolean</font>。\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    Array.isArray([1, 2, 3]); // true\n    Array.isArray(\"Hello\"); // false\n  ```\n  ### Object.prototype.toString()\n  - Object.prototype.toString() 是 Object 原型上的方法\n  - 返回值为<font color=#9900CC>对象类型的字符串</font>\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    Object.prototype.toString.call(42); // \"[object Number]\"\n    Object.prototype.toString.call(\"Hello\"); // \"[object String]\"\n    Object.prototype.toString.call(true); // \"[object Boolean]\"\n    Object.prototype.toString.call(undefined); // \"[object Undefined]\"\n    Object.prototype.toString.call(null); // \"[object Null]\"\n    Object.prototype.toString.call([1, 2, 3]); // \"[object Array]\"\n    Object.prototype.toString.call({ name: \"John\", age: 25 }); // \"[object Object]\"\n    Object.prototype.toString.call(function() {}); // \"[object Function]\"\n  ```\n## var, let, const\n  ### var\n  - 函数作用域：var 声明的变量具有函数作用域，即变量的作用范围限定在声明它的函数内部。\n  - 变量提升：使用 var 声明的变量会发生<font color=#9900CC>变量提升</font>，即在函数内部，无论在哪里声明变量，变量声明都会被提升到函数的顶部。\n  ### let\n  - 块级作用域：let 声明的变量具有<font color=#9900CC>块级作用域</font>，即变量的作用范围限定在当前代码块内部（如 {} 中）。\n  - 没有变量提升：使用 let 声明的变量<font color=#9900CC>不会发生变量提升</font>，只有在变量<font color=#9900CC>声明之后才能访问</font>。\n  ### const\n  - 块级作用域：const 声明的变量具有<font color=#9900CC>块级作用域</font>。\n  - 常量赋值：const 声明的变量<font color=#9900CC>必须在声明时进行初始化</font>，并且<font color=#9900CC>不能再次赋值</font>。它的值是不可变的。\n\n## 作用域&&作用域链\n  ### 作用域\n  - 全局作用域： 全局作用域是在整个 JavaScript 程序中可访问的最外层作用域。在全局作用域中声明的变量和函数可以被程序中的任何部分访问。\n  - 函数作用域： 函数作用域是在函数内部声明的变量的作用域范围。函数作用域中的变量只能在函数内部访问，而无法在函数外部或其他函数中访问。\n  - 块级作用域： 块级作用域是在代码块（如 if、for、while 语句等）中声明的变量的作用域范围。块级作用域中的变量只能在该代码块内部访问，而在代码块外部是不可见的。\n  <font color=red>注：</font> 如果一个变量没有声明直接使用：\n    - 严格模式下：报错（ReferenceError: x is not defined）\n    - 非严格模式下：JavaScript 引擎将隐式地将该变量视为<font color=red>全局变量</font>，并返回其值为 undefined\n  ### 作用域链\n  - 作用域链（Scope Chain）是 JavaScript 中用于查找变量的机制。当代码中引用一个变量时，JavaScript 引擎会按照特定的规则沿着作用域链进行变量查找，直到找到匹配的变量或达到最外层的全局作用域。\n  - 作用域链的构建是根据变量的词法环境（Lexical Environment）进行的。每当创建一个新的执行上下文（函数执行上下文或全局执行上下文），就会创建一个新的词法环境，并将其与当前的词法环境形成一个链式结构。\n  - 当访问一个变量时，JavaScript 引擎首先在当前的词法环境中查找该变量，如果找到了就使用它。如果没有找到，则继续沿着作用域链向上查找，直到找到匹配的变量或到达全局作用域。\n  - 如果在最外层的全局作用域中仍然没有找到该变量，那么会抛出一个引用错误。\n\n## 垃圾回收机制\n  ### 标记清楚法\n  - 在标记阶段，垃圾回收器从根对象开始遍历所有可访问的对象，并标记活动对象。\n  - 在清除阶段，垃圾回收器清除所有未被标记的对象，释放它们占用的内存空间。\n  ### 引用计数法\n  - 每当一个对象被引用时，引用计数加一；\n  - 当一个对象的引用被删除或覆盖时，引用计数减一。\n  - 当引用计数为零时，即没有任何引用指向该对象，该对象被判定为垃圾并被回收。\n  <font color=red>注：</font>引用计数方法无法解决循环引用的问题，即对象之间相互引用导致引用计数无法归零的情况。\n\n## 闭包\n  ### 概念：\n   - JavaScript 闭包（Closure）是指在<font color=#9900CC>函数内部创建的函数</font>，它可以访问外部函数的变量和作用域，即使外部函数已经执行完毕，闭包仍然可以保持对外部变量的引用。\n  ### 特征：\n  - 内部函数可以访问外部函数的变量和参数\n  - 外部函数的变量不会被销毁\n  ### 场景：\n  - 封装私有变量：通过闭包可以<font color=#9900CC>创建私有变量</font>，外部无法直接访问，只能通过闭包提供的接口进行访问和修改。这种方式可以实现数据的封装和保护。\n  - 延迟执行：通过闭包可以创建一个延迟执行的函数，即将一部分逻辑包裹在闭包中，并在需要时执行。这对于实现定时器、事件监听等场景很有用。\n  - 记忆化：闭包可以用于缓存中间计算结果，以避免重复计算。通过在闭包中保存计算结果，可以提高代码的执行效率。\n  <font color=red>注：</font>闭包的使用需要注意内存管理，因为闭包会持有外部函数的变量引用，如果不及时释放闭包，可能会导致<font color=red>内存泄漏。</font>\n  ### 释放闭包：\n  - 如果存在其他对象或函数持有对闭包的引用，可以通过将这些引用置为 <font color=#9900CC>null</font> 或者取消相关的事件监听来释放闭包。\n  - 让垃圾回收器自动回收不再使用的闭包所占用的内存。\n  ### 避免内存泄漏和资源占用\n  - 及时解除事件监听\n  - 避免循环引用\n  - 尽量避免使用长期存在的闭包\n\n## this指向\n  - 默认情况:this指向window（严格模式下为undefined）\n  - 对象绑定:作为对象的方法调用时，this指向该对象\n  - 方法改变: call,apply,bind改变this\n  - new 绑定： this 指向新创建的实例对象。\n  - 箭头函数： 箭头函数中的 this 绑定是词法上的，指向外层作用域的 this 值，而不是被调用时的上下文对象。\n  <font color=red>注：</font> 箭头函数无法通过call，apply，bind改变。\n\n## new实例化\n- 创建一个空对象\n- 将对象的原型设置为函数的peototype属性\n- 将函数的this指向这个对象，执行构造函数的代码，给对象添加属性\n- 判断函数的返回类型，如果是值类型，则返回这个对象，如果是引用类型，则返回引用类型\n\n## 原型&&原型链\n  ### 原型\n    - 在 JavaScript 中，每个对象都有一个原型（prototype）属性，它指向另一个对象，这个对象就是该对象的原型。原型对象可以包含共享的属性和方法，可以被对象实例共享和访问。\n  ### 原型链\n    - 函数的原型链对象constructor默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针__proto__,该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用__proto__一直指向Object的原型对象上，而Object原型对象用Object.prototype.__ proto__ = null表示原型链顶端。如此形成了js的原型链继承。同时所有的js对象都有Object的基本防范\n  <font color=#00FFFF>例：</font>\n    ```JavaScript\n      // 定义一个构造函数\n      function Person(name) {\n        this.name = name;\n      }\n\n      // 在 Person 构造函数的原型对象上定义一个方法\n      Person.prototype.sayHello = function() {\n        console.log(`Hello, my name is ${this.name}!`);\n      };\n\n      // 创建一个对象实例\n      const john = new Person('John');\n\n      // 调用对象实例的方法\n      john.sayHello(); // 输出 \"Hello, my name is John!\"\n\n      // 隐式访问原型对象上的属性\n      console.log(john.toString()); // 输出 \"[object Object]\"\n\n      // 原型链继承关系\n      console.log(john.__proto__ === Person.prototype); // 输出 true\n      console.log(Person.prototype.__proto__ === Object.prototype); // 输出 true\n      console.log(Object.prototype.__proto__); // 输出 null\n    ```\n\n## 事件循环\n    - 事件循环（Event Loop）是 JavaScript 中处理异步操作的一种机制。它负责协调和执行 JavaScript 代码，使得异步任务能够按照特定的顺序和时机执行。\n    - JavaScript 是单线程的，意味着一次只能执行一个任务。但是在实际开发中，经常会遇到需要执行异步操作的情况，比如网络请求、定时器、事件监听等。为了处理这些异步操作，JavaScript 引入了事件循环机制。\n  ### 事件循环机制的主要组成部分包括以下几个要素\n    - 调用栈（Call Stack）：用于存储执行上下文的栈结构，用来跟踪代码的执行位置。\n    - 任务队列（Task Queue）：用于存储异步任务的队列，比如网络请求回调、定时器回调等。\n    - 事件循环（Event Loop）：负责监听调用栈和任务队列，当调用栈为空时，从任务队列中取出任务并推入调用栈执行。\n  ### 执行过程\n    - 代码从上到下依次执行，遇到异步任务时，将其推入任务队列而不会阻塞代码的执行。\n    - 当调用栈为空时，事件循环会检查任务队列。\n    - 如果任务队列中有任务，则选择其中最早进入队列的任务，将其推入调用栈执行。\n    - 执行任务时，可能会产生新的异步任务，将其推入任务队列。\n    - 重复步骤 2-4，直到任务队列为空。\n  - 事件循环中有宏任务和微任务的区分\n  ### 宏任务\n    - 整体代码块（Script）：整个脚本代码作为一个宏任务执行。\n    - setTimeout 和 setInterval：定时器任务。\n    - I/O 操作：包括文件读写、网络请求等异步 I/O 操作。\n    - UI 渲染：更新页面布局、样式等操作。\n    - requestAnimationFrame：用于实现动画效果的定时器。\n    - 事件监听器回调：如点击事件、键盘事件等。\n  ### 微任务\n    - Promise 回调：在 Promise 的状态改变时执行的回调函数。\n    - MutationObserver 回调：监测 DOM 变化时执行的回调函数。\n    - process.nextTick（Node.js 环境）：在当前操作结束后立即执行的回调函数。\n  <font color=red>注：事件循环</font>的执行过程中，宏任务的优先级高于微任务。\n  <font color=red>注：任务队列</font>的执行过程中，微任务的优先级高于宏任务。\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    function delay(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    function syncCode() {\n      console.log(1);\n    }\n\n    function asyncCode() {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          console.log(2);\n          resolve();\n        }, 1000);\n      });\n    }\n\n    async function execute() {\n      syncCode();\n      await delay(1000);\n      console.log(3);\n      await asyncCode();\n      console.log(4);\n      await delay(1000);\n      console.log(5);\n    }\n\n    execute()\n      .then(() => {\n        console.log(6);\n        return delay(1000);\n      })\n      .then(() => {\n        console.log(7);\n        return delay(1000);\n      })\n      .then(() => {\n        console.log(8);\n        return delay(1000);\n      })\n      .then(() => {\n        console.log(9);\n      });\n\n      <!-- 代码执行顺序的解释如下：\n\n      首先执行 syncCode() 函数，输出 1。\n      使用 await delay(1000) 实现一个 1 秒的延迟。\n      输出 3。\n      执行 asyncCode() 函数，其中包含一个 1 秒的延迟，在延迟结束后输出 2。\n      输出 4。\n      使用 await delay(1000) 实现一个 1 秒的延迟。\n      输出 5。\n      使用 Promise 的 then 方法进行连续的延时操作，分别输出 6、7、8。\n      最后使用 then 方法输出 9。 -->\n  ```\n## 防抖&&节流\n  ### 防抖\n  - 在事件触发后等待一段时间，如果在这段时间内没有再次触发该事件，才执行对应的操作。如果在等待时间内又触发了该事件，就重新开始计时。\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    function debounce(func, delay) {\n      let timer;\n      return function(...args) {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          func.apply(this, args);\n        }, delay);\n      };\n    }\n\n    // 使用示例\n    const debouncedFunction = debounce(myFunction, 300);\n    element.addEventListener('input', debouncedFunction);\n  ```\n  ### 节流\n  - 控制事件的触发频率，保证一定时间内只触发一次该事件。在设定的时间间隔内，不管事件触发了多少次，只有一次事件处理函数执行。\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    function throttle(func, delay) {\n      let timer;\n      return function(...args) {\n        if (!timer) {\n          timer = setTimeout(() => {\n            func.apply(this, args);\n            timer = null;\n          }, delay);\n        }\n      };\n    }\n\n    // 使用示例\n    const throttledFunction = throttle(myFunction, 300);\n    element.addEventListener('scroll', throttledFunction);\n  ```\n\n## Promise\n    - Promise 是 JavaScript 中用于处理异步操作的一种机制。它可以避免回调地狱的问题，并提供了一种更优雅的方式来处理异步代码。\n    - 它可以有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。\n    - 状态只可以改变一次（ pending ==> fulfilled ||  pending ==> rejected ）\n    - 可以通过.then()链式调用,每个 .then() 方法都返回一个新的 Promise 对象;\n    - .then() 方法来注册操作成功时的处理函数，使用 .catch() 方法来注册操作失败时的处理函数。\n  基本语法 <font color=#00FFFF>例：</font>\n  ```JavaScript\n    const promise = new Promise((resolve, reject) => {\n      // 异步操作\n      // 如果操作成功，调用 resolve(value)\n      // 如果操作失败，调用 reject(error)\n    });\n    promise\n      .then((value) => {\n        // 处理操作成功的结果\n      })\n      .catch((error) => {\n        // 处理操作失败的结果\n      });\n  ```\n  ### 静态方法\n    #### Promise.resolve\n      - Promise.resolve(value)：返回一个以给定值解析后的 Promise 对象。如果传入的值本身就是一个 Promise，则直接返回该 Promise。\n      <font color=#00FFFF>例：</font>\n      ```JavaScript\n        const promise = Promise.resolve(42);\n        promise.then(value => {\n          console.log(value); // 输出 42\n        });\n      ```\n    #### Promise.reject\n      - Promise.reject(reason)：返回一个带有指定拒绝原因的 Promise 对象。\n      <font color=#00FFFF>例：</font>\n      ```JavaScript\n        const promise = Promise.reject(new Error('Something went wrong'));\n        promise.catch(error => {\n          console.error(error); // 输出错误信息：Something went wrong\n        });\n      ```\n    #### Promise.all\n      - Promise.all(iterable)：接收一个可迭代对象（如数组或类数组对象），并返回一个 Promise 对象。\n      - 该 Promise 对象在所有输入的 Promise 都已成功解析后才会解析，返回一个包含所有 Promise 结果的数组。\n      - 如果其中任何一个 Promise 被拒绝，则返回的 Promise 会立即被拒绝。\n      <font color=#00FFFF>例：</font>\n      ```JavaScript\n        const promises = [\n          Promise.resolve(1),\n          Promise.resolve(2),\n          Promise.resolve(3)\n        ];\n\n        Promise.all(promises)\n          .then(results => {\n            console.log(results); // 输出 [1, 2, 3]\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      ```\n    #### Promise.race\n      - Promise.race(iterable)：接收一个可迭代对象，返回一个 Promise 对象。\n      - 该 Promise 对象将与第一个解析或拒绝的 Promise 对象具有相同的结果。\n      <font color=#00FFFF>例：</font>\n      ```JavaScript\n        const promises = [\n          new Promise(resolve => setTimeout(() => resolve(1), 100)),\n          new Promise(resolve => setTimeout(() => resolve(2), 200)),\n          new Promise(resolve => setTimeout(() => resolve(3), 300))\n        ];\n\n        Promise.race(promises)\n          .then(result => {\n            console.log(result); // 输出 1（第一个解析的 Promise 结果）\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      ```\n  ### 手写实现Promise.all\n  ```JavaScript\n    function myPromiseAll(promises) {\n      return new Promise((resolve, reject) => {\n        const results = [];\n        let resolvedCount = 0;\n\n        for (let i = 0; i < promises.length; i++) {\n          promises[i]\n            .then(result => {\n              results[i] = result;\n              resolvedCount++;\n\n              if (resolvedCount === promises.length) {\n                resolve(results);\n              }\n            })\n            .catch(reject);\n        }\n      });\n    }\n  ```\n\n## 事件委托（事件代理）\n  - JavaScript 中的事件委托（事件代理）是一种常见的事件处理技术，它通过将事件绑定到一个父元素上，利用事件冒泡的特性，在父元素上统一处理子元素的事件。\n  ### 优点\n    - 减少内存消耗：只需要一个事件处理程序，而不是为每个子元素都创建一个处理程序，从而减少了内存消耗。\n    - 动态绑定：对于后续添加的子元素，无需再次绑定事件，因为事件委托是基于事件冒泡的，新添加的元素也会受到委托的处理。\n    - 简化代码：通过将事件处理程序绑定到父元素上，可以避免在多个子元素上编写重复的事件处理代码。\n  <font color=#00FFFF>例：</font>\n  ```html\n    <ul id=\"myList\">\n      <li>Item 1</li>\n      <li>Item 2</li>\n      <li>Item 3</li>\n    </ul>\n\n    <script>\n      const list = document.getElementById('myList');\n\n      list.addEventListener('click', function(event) {\n        if (event.target.nodeName === 'LI') {\n          // 在点击的列表项上执行操作\n          console.log('Clicked item:', event.target.textContent);\n        }\n      });\n    </script>\n  ```\n## 什么是模块化开发，如何实现模块化开发\n  - 模块化开发是一种软件开发的方法，旨在将代码划分为独立、可维护和可重用的模块。模块化开发有助于提高代码的可读性、可维护性和可测试性，并促进团队合作和代码复用。\n  ### 命名空间模式\n  - 使用对象来组织代码，将相关的函数、变量等放在命名空间对象下。这种方式通过避免全局命名冲突来实现模块化。\n    ```JavaScript\n      // 命名空间模式示例\n      var myModule = {\n        // 模块内部的私有数据和函数\n        privateData: '私有数据',\n        privateFunction: function() {\n          // 私有函数实现\n        },\n        // 模块内部的公共接口\n        publicFunction: function() {\n          // 调用私有函数和访问私有数据\n        }\n      };\n    ```\n  ### 立即执行函数表达式\n  - 使用匿名函数创建一个独立的作用域，并立即执行该函数，从而创建模块化的代码。\n  ```JavaScript\n    // IIFE 模块化示例\n    var myModule = (function() {\n      // 模块内部的私有数据和函数\n      var privateData = '私有数据';\n      function privateFunction() {\n        // 私有函数实现\n      }\n\n      // 模块内部的公共接口\n      return {\n        publicFunction: function() {\n          // 调用私有函数和访问私有数据\n        }\n      };\n    })();\n  ```\n  ### CommonJS 模块规范\n  - 在服务器端使用广泛的模块化规范，通过 module.exports 导出模块，通过 require 引入模块。\n  ```JavaScript\n    // 模块导出\n    module.exports = {\n      // 模块的公共接口\n      publicFunction: function() {\n        // 实现代码\n      }\n    };\n\n    // 模块引入\n    var myModule = require('./myModule');\n    myModule.publicFunction();\n  ```\n  ### ES6 模块化\n  - 在现代 JavaScript 中，使用 import 和 export 关键字实现模块化。它是官方标准的模块化方案，广泛支持于现代浏览器和构建工具中。\n  ```JavaScript\n    // 模块导出\n    export function publicFunction() {\n      // 实现代码\n    }\n\n    // 模块引入\n    import { publicFunction } from './myModule';\n    publicFunction();\n  ```\n## es6模块化和CommonJS的区别\n  - 语法差异\n    ES6 模块化使用 import 和 export 关键字来导入和导出模块。\n    CommonJS 使用 require 函数来导入模块，使用 module.exports 来导出模块。\n  - 加载方式差异\n    ES6 模块化是静态加载的，也就是在代码静态分析阶段就可以确定模块的依赖关系，可以在编译时进行优化和静态分析。\n    CommonJS 是动态加载的，模块的加载和执行是在运行时进行的，无法在编译时进行优化。\n  - 导入导出特性差异\n    ES6 模块化支持命名导入和导出，可以选择性地导入和导出模块中的特定成员。\n    CommonJS 模块化没有内置的命名导入和导出机制，导入的是整个模块对象，可以通过对象属性来访问导出的成员。\n  - 作用域差异\n    ES6 模块化在导入的模块中，顶层的 import 和 export 声明是静态的，模块内部的变量不会污染全局作用域。\n    CommonJS 在导入的模块中，整个模块的内容被加载到一个对象中，模块内部的变量和函数都可以被其他模块访问到。\n  - 运行环境差异\n    ES6 模块化主要用于浏览器环境，也可以通过构建工具（如Webpack、Rollup）在 Node.js 环境中使用。\n    CommonJS 主要用于 Node.js 环境，也可以通过使用转换工具（如Babel）将其转换为浏览器可用的模块。\n## 如何操作DOM，常见的操作DOM方式有哪些\n  - 通过 ID 选择元素\n    - document.getElementById(id): 返回指定 ID 的元素。\n  - 通过选择器选择元素\n    - document.querySelector(selector): 返回匹配 CSS 选择器的第一个元素。\n    - document.querySelectorAll(selector): 返回匹配 CSS 选择器的所有元素的 NodeList。\n  - 通过标签名选择元素\n    - document.getElementsByTagName(tagName): 返回指定标签名的元素集合。\n  - 通过类名选择元素\n    - document.getElementsByClassName(className): 返回指定类名的元素集合。\n  - 创建元素\n    - document.createElement(tagName): 创建一个具有指定标签名的元素节点。\n  - 修改元素内容和属性\n    - element.textContent: 设置或获取元素的文本内容。\n    - element.innerHTML: 设置或获取元素的 HTML 内容。\n    - element.setAttribute(name, value): 设置元素的属性。\n    - element.getAttribute(name): 获取元素的属性值。\n    - element.style.property = value: 设置元素的 CSS 样式。\n  - 添加，移除和替换元素\n    - element.appendChild(newChild): 在元素的子节点列表末尾添加一个新的子节点。\n    - element.removeChild(child): 从元素的子节点列表中移除指定的子节点。\n    - element.replaceChild(newChild, oldChild): 替换元素的指定子节点。\n  - 添加和移除事件监听器\n    - element.addEventListener(event, listener): 添加事件监听器\n    - element.removeEventListener(event, listener): 移除事件监听器。\n  - 修改元素的样式类\n    - element.classList.add(className): 添加类名。\n    - element.classList.remove(className): 移除类名。\n    - element.classList.toggle(className): 切换类名的状态。\n## 变量提升\n  - 在 JavaScript 中，变量提升（Hoisting）是一种特性，它指的是在代码执行之前，JavaScript 引擎会将变量和函数的声明提升到当前作用域的顶部。\n  - 声明提升\n    - 在代码执行之前，JavaScript 引擎会扫描当前作用域内的变量声明，并将其提升到作用域顶部。\n    - 可以在变量声明之前使用变量。\n  - 函数提升\n    - 与变量提升类似，JavaScript 引擎还会将函数的声明提升到作用域的顶部\n    - 可以在函数声明之前调用函数。\n## for in和for of的区别\n  - 迭代的对象类型\n    - for...in 循环用于迭代对象的属性，包括对象自身的可枚举属性以及继承的可枚举属性。\n    - for...of 循环用于迭代可迭代对象（如数组、字符串、Set、Map 等）的元素值。\n  - 迭代的顺序\n    - for...in 循环的迭代顺序是不确定的，因为对象的属性没有固定的顺序。\n    - for...of 循环的迭代顺序是按照可迭代对象的迭代器定义的顺序进行迭代。\n  - 迭代变量的类型\n    - for...in 循环中的迭代变量是字符串类型，表示对象的属性名。\n    - for...of 循环中的迭代变量可以是任意类型，表示可迭代对象中的元素值。\n  - 可迭代对象的要求\n    - for...in 循环适用于任何对象，可以用于迭代普通对象的属性。\n    - for...of 循环要求迭代的对象实现了迭代器（Iterator）接口，即具有一个 Symbol.iterator 方法。\n\n## 数组方法\n  ### 改变原数组\n    - push()：向数组末尾添加一个或多个元素，并返回新数组的长度。\n    - pop()：从数组末尾移除最后一个元素，并返回被移除的元素。\n    - unshift()：向数组开头添加一个或多个元素，并返回新数组的长度。\n    - shift()：从数组开头移除第一个元素，并返回被移除的元素。\n    - splice()：从数组中添加、删除或替换元素。\n    - reverse()：颠倒数组中元素的顺序。\n    - sort()：对数组元素进行排序。\n    - fill()：替换值和起始索引位置（可选）。替换值指定要替换的固定值，起始索引位置指定开始替换的位置，默认为 0。\n  ### 不改变原数组\n    - concat()：将两个或多个数组合并为一个新数组。\n    - join()：将数组中的所有元素连接成一个字符串，并返回该字符串。\n    - slice()：返回数组的指定部分（浅拷贝）。\n    - indexOf()：返回指定元素在数组中的第一个匹配位置的索引。\n    - lastIndexOf()：返回指定元素在数组中最后一个匹配位置的索引。\n    - forEach()：对数组中的每个元素执行指定的函数。\n    - map()：对数组中的每个元素执行指定的函数，并返回一个新数组。\n    - filter()：根据指定的条件过滤数组中的元素，并返回一个新数组。\n    - reduce()：对数组中的元素执行累加器函数，返回一个累计值。\n    - every()：检查数组中的每个元素是否满足指定条件。\n    - some()：检查数组中是否至少有一个元素满足指定条件。\n    - find()：返回数组中满足指定条件的第一个元素。\n    - findIndex()：返回数组中满足指定条件的第一个元素的索引。\n  ### 数组去重\n  - 使用 Set\n  ```JavaScript\n    const arr = [1, 2, 2, 3, 3, 4, 5, 5];\n    const uniqueArr = [...new Set(arr)];\n    console.log(uniqueArr); // 输出 [1, 2, 3, 4, 5]\n  ```\n  - 使用 filter() 和 indexOf()\n  ```JavaScript\n    const arr = [1, 2, 2, 3, 3, 4, 5, 5];\n    const uniqueArr = arr.filter((value, index, array) => array.indexOf(value) === index);\n    console.log(uniqueArr); // 输出 [1, 2, 3, 4, 5]\n  ```\n  - 使用 reduce() 和 includes()：\n  ```JavaScript\n    const arr = [1, 2, 2, 3, 3, 4, 5, 5];\n    const uniqueArr = arr.reduce((result, value) => {\n      if (!result.includes(value)) {\n        result.push(value);\n      }\n      return result;\n    }, []);\n    console.log(uniqueArr); // 输出 [1, 2, 3, 4, 5]\n  ```\n  ### 数组扁平化\n    - 递归\n    ```JavaScript\n      function flattenArray(arr) {\n      let flattened = [];\n      arr.forEach((item) => {\n        if (Array.isArray(item)) {\n          flattened = flattened.concat(flattenArray(item));\n        } else {\n          flattened.push(item);\n        }\n      });\n      return flattened;\n    }\n\n    const nestedArray = [1, [2, [3, 4], 5], 6];\n    const flattenedArray = flattenArray(nestedArray);\n    console.log(flattenedArray); // 输出 [1, 2, 3, 4, 5, 6]\n    ```\n    - Array.prototype.flat()\n    ```JavaScript\n      const nestedArray = [1, [2, [3, 4], 5], 6];\n      const flattenedArray = nestedArray.flat();\n      console.log(flattenedArray); // 输出 [1, 2, [3, 4], 5, 6]\n\n      const nestedArray = [1, [2, [3, 4], 5], 6];\n      const flattenedArray = nestedArray.flat(2); // 指定扁平化层数为 2\n      console.log(flattenedArray); // 输出 [1, 2, 3, 4, 5, 6]\n    ```\n    - 扩展运算符+递归\n    ```JavaScript\n      function flattenArray(arr) {\n        return arr.reduce((result, item) => {\n          if (Array.isArray(item)) {\n            result.push(...flattenArray(item));\n          } else {\n            result.push(item);\n          }\n          return result;\n        }, []);\n      }\n\n      const nestedArray = [1, [2, [3, 4], 5], 6];\n      const flattenedArray = flattenArray(nestedArray);\n      console.log(flattenedArray); // 输出 [1, 2, 3, 4, 5, 6]\n    ```\n\n\n","source":"_posts/js面试题.md","raw":"---\ntitle: 前端js面试题\ncover: /img/js-面试.jpg\ncategories:\n  - 前端面试题\n---\n\n继续整理，本篇以js内容为主，如需其他，请阅读其他文章。\n\n## js数据类型\n  ### 基本数据类型\n  - Number 数字类型\n  - String 字符串类型\n  - Boolean 布尔值\n  - Null 空值\n  - Undefined 未定义\n  - Object 对象\n  - Array 数组\n  - Symbol 表示唯一的、不可变的值，用于创建对象的唯一标识符。Symbol 在 ES6 中引入。\n  - BigInt 数值太大的数字类型\n  ### 特殊数据类型\n  - Function 函数数据类型\n\n## 检测数据类型的方式\n  ### typeof\n  - typeof 是一个一元操作符，用于获取一个值的类型。它返回一个表示数据类型的<font color=#9900CC>字符串</font>。\n  - 返回值为字符串。\n  - 可以准确的判断出<font color=#9900CC>基本数据类型</font>和<font color=#9900CC>Funtcion</font>，其他均为object。\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    typeof 42; // \"number\"\n    typeof \"Hello\"; // \"string\"\n    typeof true; // \"boolean\"\n    typeof undefined; // \"undefined\"\n    typeof null; // \"object\" (注意这是一个历史遗留问题，null 被错误地判断为对象)\n    typeof [1, 2, 3]; // \"object\"\n    typeof { name: \"John\", age: 25 }; // \"object\"\n    typeof function() {}; // \"function\"\n  ```\n  ### instanceof\n  - instanceof 操作符用于检查一个对象是否是某个构造函数创建的实例。它可以<font color=#9900CC>判断对象是否属于特定的类型或其子类型</font>。\n  - 返回值为<font color=#9900CC>Boolean</font>Boolean值。\n  - 对于原始值（如数字、字符串、布尔值等），使用 instanceof 操作符会返回 false，因为原始值不是对象。\n  - 而对于对象类型（如数组、函数、对象等），instanceof 可以判断其是否属于特定类型或其子类型。\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    const num = 42;\n    console.log(num instanceof Number); // false\n\n    const str = \"Hello\";\n    console.log(str instanceof String); // false\n\n    const bool = true;\n    console.log(bool instanceof Boolean); // false\n\n    const undef = undefined;\n    console.log(undef instanceof Undefined); // 报错，Undefined 不是一个构造函数\n\n    const nul = null;\n    console.log(nul instanceof Object); // false\n\n    const arr = [1, 2, 3];\n    console.log(arr instanceof Array); // true\n\n    const obj = { name: \"John\", age: 25 };\n    console.log(obj instanceof Object); // true\n\n    const func = function() {};\n    console.log(func instanceof Function); // true\n  ```\n  ### 手写实现instanceof\n  ```JavaScript\n    function myInstanceof(obj, constructor) {\n      if (typeof obj !== 'object' || obj === null) {\n        return false;\n      }\n\n      let prototype = Object.getPrototypeOf(obj);\n\n      while (prototype !== null) {\n        if (prototype === constructor.prototype) {\n          return true;\n        }\n        prototype = Object.getPrototypeOf(prototype);\n      }\n\n      return false;\n    }\n  ```\n  ### Array.isArray\n  - Array.isArray() 是一个静态方法，用于检查一个值是否是数组类型。\n  - 返回值为<font color=#9900CC>Boolean</font>。\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    Array.isArray([1, 2, 3]); // true\n    Array.isArray(\"Hello\"); // false\n  ```\n  ### Object.prototype.toString()\n  - Object.prototype.toString() 是 Object 原型上的方法\n  - 返回值为<font color=#9900CC>对象类型的字符串</font>\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    Object.prototype.toString.call(42); // \"[object Number]\"\n    Object.prototype.toString.call(\"Hello\"); // \"[object String]\"\n    Object.prototype.toString.call(true); // \"[object Boolean]\"\n    Object.prototype.toString.call(undefined); // \"[object Undefined]\"\n    Object.prototype.toString.call(null); // \"[object Null]\"\n    Object.prototype.toString.call([1, 2, 3]); // \"[object Array]\"\n    Object.prototype.toString.call({ name: \"John\", age: 25 }); // \"[object Object]\"\n    Object.prototype.toString.call(function() {}); // \"[object Function]\"\n  ```\n## var, let, const\n  ### var\n  - 函数作用域：var 声明的变量具有函数作用域，即变量的作用范围限定在声明它的函数内部。\n  - 变量提升：使用 var 声明的变量会发生<font color=#9900CC>变量提升</font>，即在函数内部，无论在哪里声明变量，变量声明都会被提升到函数的顶部。\n  ### let\n  - 块级作用域：let 声明的变量具有<font color=#9900CC>块级作用域</font>，即变量的作用范围限定在当前代码块内部（如 {} 中）。\n  - 没有变量提升：使用 let 声明的变量<font color=#9900CC>不会发生变量提升</font>，只有在变量<font color=#9900CC>声明之后才能访问</font>。\n  ### const\n  - 块级作用域：const 声明的变量具有<font color=#9900CC>块级作用域</font>。\n  - 常量赋值：const 声明的变量<font color=#9900CC>必须在声明时进行初始化</font>，并且<font color=#9900CC>不能再次赋值</font>。它的值是不可变的。\n\n## 作用域&&作用域链\n  ### 作用域\n  - 全局作用域： 全局作用域是在整个 JavaScript 程序中可访问的最外层作用域。在全局作用域中声明的变量和函数可以被程序中的任何部分访问。\n  - 函数作用域： 函数作用域是在函数内部声明的变量的作用域范围。函数作用域中的变量只能在函数内部访问，而无法在函数外部或其他函数中访问。\n  - 块级作用域： 块级作用域是在代码块（如 if、for、while 语句等）中声明的变量的作用域范围。块级作用域中的变量只能在该代码块内部访问，而在代码块外部是不可见的。\n  <font color=red>注：</font> 如果一个变量没有声明直接使用：\n    - 严格模式下：报错（ReferenceError: x is not defined）\n    - 非严格模式下：JavaScript 引擎将隐式地将该变量视为<font color=red>全局变量</font>，并返回其值为 undefined\n  ### 作用域链\n  - 作用域链（Scope Chain）是 JavaScript 中用于查找变量的机制。当代码中引用一个变量时，JavaScript 引擎会按照特定的规则沿着作用域链进行变量查找，直到找到匹配的变量或达到最外层的全局作用域。\n  - 作用域链的构建是根据变量的词法环境（Lexical Environment）进行的。每当创建一个新的执行上下文（函数执行上下文或全局执行上下文），就会创建一个新的词法环境，并将其与当前的词法环境形成一个链式结构。\n  - 当访问一个变量时，JavaScript 引擎首先在当前的词法环境中查找该变量，如果找到了就使用它。如果没有找到，则继续沿着作用域链向上查找，直到找到匹配的变量或到达全局作用域。\n  - 如果在最外层的全局作用域中仍然没有找到该变量，那么会抛出一个引用错误。\n\n## 垃圾回收机制\n  ### 标记清楚法\n  - 在标记阶段，垃圾回收器从根对象开始遍历所有可访问的对象，并标记活动对象。\n  - 在清除阶段，垃圾回收器清除所有未被标记的对象，释放它们占用的内存空间。\n  ### 引用计数法\n  - 每当一个对象被引用时，引用计数加一；\n  - 当一个对象的引用被删除或覆盖时，引用计数减一。\n  - 当引用计数为零时，即没有任何引用指向该对象，该对象被判定为垃圾并被回收。\n  <font color=red>注：</font>引用计数方法无法解决循环引用的问题，即对象之间相互引用导致引用计数无法归零的情况。\n\n## 闭包\n  ### 概念：\n   - JavaScript 闭包（Closure）是指在<font color=#9900CC>函数内部创建的函数</font>，它可以访问外部函数的变量和作用域，即使外部函数已经执行完毕，闭包仍然可以保持对外部变量的引用。\n  ### 特征：\n  - 内部函数可以访问外部函数的变量和参数\n  - 外部函数的变量不会被销毁\n  ### 场景：\n  - 封装私有变量：通过闭包可以<font color=#9900CC>创建私有变量</font>，外部无法直接访问，只能通过闭包提供的接口进行访问和修改。这种方式可以实现数据的封装和保护。\n  - 延迟执行：通过闭包可以创建一个延迟执行的函数，即将一部分逻辑包裹在闭包中，并在需要时执行。这对于实现定时器、事件监听等场景很有用。\n  - 记忆化：闭包可以用于缓存中间计算结果，以避免重复计算。通过在闭包中保存计算结果，可以提高代码的执行效率。\n  <font color=red>注：</font>闭包的使用需要注意内存管理，因为闭包会持有外部函数的变量引用，如果不及时释放闭包，可能会导致<font color=red>内存泄漏。</font>\n  ### 释放闭包：\n  - 如果存在其他对象或函数持有对闭包的引用，可以通过将这些引用置为 <font color=#9900CC>null</font> 或者取消相关的事件监听来释放闭包。\n  - 让垃圾回收器自动回收不再使用的闭包所占用的内存。\n  ### 避免内存泄漏和资源占用\n  - 及时解除事件监听\n  - 避免循环引用\n  - 尽量避免使用长期存在的闭包\n\n## this指向\n  - 默认情况:this指向window（严格模式下为undefined）\n  - 对象绑定:作为对象的方法调用时，this指向该对象\n  - 方法改变: call,apply,bind改变this\n  - new 绑定： this 指向新创建的实例对象。\n  - 箭头函数： 箭头函数中的 this 绑定是词法上的，指向外层作用域的 this 值，而不是被调用时的上下文对象。\n  <font color=red>注：</font> 箭头函数无法通过call，apply，bind改变。\n\n## new实例化\n- 创建一个空对象\n- 将对象的原型设置为函数的peototype属性\n- 将函数的this指向这个对象，执行构造函数的代码，给对象添加属性\n- 判断函数的返回类型，如果是值类型，则返回这个对象，如果是引用类型，则返回引用类型\n\n## 原型&&原型链\n  ### 原型\n    - 在 JavaScript 中，每个对象都有一个原型（prototype）属性，它指向另一个对象，这个对象就是该对象的原型。原型对象可以包含共享的属性和方法，可以被对象实例共享和访问。\n  ### 原型链\n    - 函数的原型链对象constructor默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针__proto__,该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用__proto__一直指向Object的原型对象上，而Object原型对象用Object.prototype.__ proto__ = null表示原型链顶端。如此形成了js的原型链继承。同时所有的js对象都有Object的基本防范\n  <font color=#00FFFF>例：</font>\n    ```JavaScript\n      // 定义一个构造函数\n      function Person(name) {\n        this.name = name;\n      }\n\n      // 在 Person 构造函数的原型对象上定义一个方法\n      Person.prototype.sayHello = function() {\n        console.log(`Hello, my name is ${this.name}!`);\n      };\n\n      // 创建一个对象实例\n      const john = new Person('John');\n\n      // 调用对象实例的方法\n      john.sayHello(); // 输出 \"Hello, my name is John!\"\n\n      // 隐式访问原型对象上的属性\n      console.log(john.toString()); // 输出 \"[object Object]\"\n\n      // 原型链继承关系\n      console.log(john.__proto__ === Person.prototype); // 输出 true\n      console.log(Person.prototype.__proto__ === Object.prototype); // 输出 true\n      console.log(Object.prototype.__proto__); // 输出 null\n    ```\n\n## 事件循环\n    - 事件循环（Event Loop）是 JavaScript 中处理异步操作的一种机制。它负责协调和执行 JavaScript 代码，使得异步任务能够按照特定的顺序和时机执行。\n    - JavaScript 是单线程的，意味着一次只能执行一个任务。但是在实际开发中，经常会遇到需要执行异步操作的情况，比如网络请求、定时器、事件监听等。为了处理这些异步操作，JavaScript 引入了事件循环机制。\n  ### 事件循环机制的主要组成部分包括以下几个要素\n    - 调用栈（Call Stack）：用于存储执行上下文的栈结构，用来跟踪代码的执行位置。\n    - 任务队列（Task Queue）：用于存储异步任务的队列，比如网络请求回调、定时器回调等。\n    - 事件循环（Event Loop）：负责监听调用栈和任务队列，当调用栈为空时，从任务队列中取出任务并推入调用栈执行。\n  ### 执行过程\n    - 代码从上到下依次执行，遇到异步任务时，将其推入任务队列而不会阻塞代码的执行。\n    - 当调用栈为空时，事件循环会检查任务队列。\n    - 如果任务队列中有任务，则选择其中最早进入队列的任务，将其推入调用栈执行。\n    - 执行任务时，可能会产生新的异步任务，将其推入任务队列。\n    - 重复步骤 2-4，直到任务队列为空。\n  - 事件循环中有宏任务和微任务的区分\n  ### 宏任务\n    - 整体代码块（Script）：整个脚本代码作为一个宏任务执行。\n    - setTimeout 和 setInterval：定时器任务。\n    - I/O 操作：包括文件读写、网络请求等异步 I/O 操作。\n    - UI 渲染：更新页面布局、样式等操作。\n    - requestAnimationFrame：用于实现动画效果的定时器。\n    - 事件监听器回调：如点击事件、键盘事件等。\n  ### 微任务\n    - Promise 回调：在 Promise 的状态改变时执行的回调函数。\n    - MutationObserver 回调：监测 DOM 变化时执行的回调函数。\n    - process.nextTick（Node.js 环境）：在当前操作结束后立即执行的回调函数。\n  <font color=red>注：事件循环</font>的执行过程中，宏任务的优先级高于微任务。\n  <font color=red>注：任务队列</font>的执行过程中，微任务的优先级高于宏任务。\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    function delay(ms) {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    function syncCode() {\n      console.log(1);\n    }\n\n    function asyncCode() {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          console.log(2);\n          resolve();\n        }, 1000);\n      });\n    }\n\n    async function execute() {\n      syncCode();\n      await delay(1000);\n      console.log(3);\n      await asyncCode();\n      console.log(4);\n      await delay(1000);\n      console.log(5);\n    }\n\n    execute()\n      .then(() => {\n        console.log(6);\n        return delay(1000);\n      })\n      .then(() => {\n        console.log(7);\n        return delay(1000);\n      })\n      .then(() => {\n        console.log(8);\n        return delay(1000);\n      })\n      .then(() => {\n        console.log(9);\n      });\n\n      <!-- 代码执行顺序的解释如下：\n\n      首先执行 syncCode() 函数，输出 1。\n      使用 await delay(1000) 实现一个 1 秒的延迟。\n      输出 3。\n      执行 asyncCode() 函数，其中包含一个 1 秒的延迟，在延迟结束后输出 2。\n      输出 4。\n      使用 await delay(1000) 实现一个 1 秒的延迟。\n      输出 5。\n      使用 Promise 的 then 方法进行连续的延时操作，分别输出 6、7、8。\n      最后使用 then 方法输出 9。 -->\n  ```\n## 防抖&&节流\n  ### 防抖\n  - 在事件触发后等待一段时间，如果在这段时间内没有再次触发该事件，才执行对应的操作。如果在等待时间内又触发了该事件，就重新开始计时。\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    function debounce(func, delay) {\n      let timer;\n      return function(...args) {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          func.apply(this, args);\n        }, delay);\n      };\n    }\n\n    // 使用示例\n    const debouncedFunction = debounce(myFunction, 300);\n    element.addEventListener('input', debouncedFunction);\n  ```\n  ### 节流\n  - 控制事件的触发频率，保证一定时间内只触发一次该事件。在设定的时间间隔内，不管事件触发了多少次，只有一次事件处理函数执行。\n  <font color=#00FFFF>例：</font>\n  ```JavaScript\n    function throttle(func, delay) {\n      let timer;\n      return function(...args) {\n        if (!timer) {\n          timer = setTimeout(() => {\n            func.apply(this, args);\n            timer = null;\n          }, delay);\n        }\n      };\n    }\n\n    // 使用示例\n    const throttledFunction = throttle(myFunction, 300);\n    element.addEventListener('scroll', throttledFunction);\n  ```\n\n## Promise\n    - Promise 是 JavaScript 中用于处理异步操作的一种机制。它可以避免回调地狱的问题，并提供了一种更优雅的方式来处理异步代码。\n    - 它可以有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。\n    - 状态只可以改变一次（ pending ==> fulfilled ||  pending ==> rejected ）\n    - 可以通过.then()链式调用,每个 .then() 方法都返回一个新的 Promise 对象;\n    - .then() 方法来注册操作成功时的处理函数，使用 .catch() 方法来注册操作失败时的处理函数。\n  基本语法 <font color=#00FFFF>例：</font>\n  ```JavaScript\n    const promise = new Promise((resolve, reject) => {\n      // 异步操作\n      // 如果操作成功，调用 resolve(value)\n      // 如果操作失败，调用 reject(error)\n    });\n    promise\n      .then((value) => {\n        // 处理操作成功的结果\n      })\n      .catch((error) => {\n        // 处理操作失败的结果\n      });\n  ```\n  ### 静态方法\n    #### Promise.resolve\n      - Promise.resolve(value)：返回一个以给定值解析后的 Promise 对象。如果传入的值本身就是一个 Promise，则直接返回该 Promise。\n      <font color=#00FFFF>例：</font>\n      ```JavaScript\n        const promise = Promise.resolve(42);\n        promise.then(value => {\n          console.log(value); // 输出 42\n        });\n      ```\n    #### Promise.reject\n      - Promise.reject(reason)：返回一个带有指定拒绝原因的 Promise 对象。\n      <font color=#00FFFF>例：</font>\n      ```JavaScript\n        const promise = Promise.reject(new Error('Something went wrong'));\n        promise.catch(error => {\n          console.error(error); // 输出错误信息：Something went wrong\n        });\n      ```\n    #### Promise.all\n      - Promise.all(iterable)：接收一个可迭代对象（如数组或类数组对象），并返回一个 Promise 对象。\n      - 该 Promise 对象在所有输入的 Promise 都已成功解析后才会解析，返回一个包含所有 Promise 结果的数组。\n      - 如果其中任何一个 Promise 被拒绝，则返回的 Promise 会立即被拒绝。\n      <font color=#00FFFF>例：</font>\n      ```JavaScript\n        const promises = [\n          Promise.resolve(1),\n          Promise.resolve(2),\n          Promise.resolve(3)\n        ];\n\n        Promise.all(promises)\n          .then(results => {\n            console.log(results); // 输出 [1, 2, 3]\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      ```\n    #### Promise.race\n      - Promise.race(iterable)：接收一个可迭代对象，返回一个 Promise 对象。\n      - 该 Promise 对象将与第一个解析或拒绝的 Promise 对象具有相同的结果。\n      <font color=#00FFFF>例：</font>\n      ```JavaScript\n        const promises = [\n          new Promise(resolve => setTimeout(() => resolve(1), 100)),\n          new Promise(resolve => setTimeout(() => resolve(2), 200)),\n          new Promise(resolve => setTimeout(() => resolve(3), 300))\n        ];\n\n        Promise.race(promises)\n          .then(result => {\n            console.log(result); // 输出 1（第一个解析的 Promise 结果）\n          })\n          .catch(error => {\n            console.error(error);\n          });\n      ```\n  ### 手写实现Promise.all\n  ```JavaScript\n    function myPromiseAll(promises) {\n      return new Promise((resolve, reject) => {\n        const results = [];\n        let resolvedCount = 0;\n\n        for (let i = 0; i < promises.length; i++) {\n          promises[i]\n            .then(result => {\n              results[i] = result;\n              resolvedCount++;\n\n              if (resolvedCount === promises.length) {\n                resolve(results);\n              }\n            })\n            .catch(reject);\n        }\n      });\n    }\n  ```\n\n## 事件委托（事件代理）\n  - JavaScript 中的事件委托（事件代理）是一种常见的事件处理技术，它通过将事件绑定到一个父元素上，利用事件冒泡的特性，在父元素上统一处理子元素的事件。\n  ### 优点\n    - 减少内存消耗：只需要一个事件处理程序，而不是为每个子元素都创建一个处理程序，从而减少了内存消耗。\n    - 动态绑定：对于后续添加的子元素，无需再次绑定事件，因为事件委托是基于事件冒泡的，新添加的元素也会受到委托的处理。\n    - 简化代码：通过将事件处理程序绑定到父元素上，可以避免在多个子元素上编写重复的事件处理代码。\n  <font color=#00FFFF>例：</font>\n  ```html\n    <ul id=\"myList\">\n      <li>Item 1</li>\n      <li>Item 2</li>\n      <li>Item 3</li>\n    </ul>\n\n    <script>\n      const list = document.getElementById('myList');\n\n      list.addEventListener('click', function(event) {\n        if (event.target.nodeName === 'LI') {\n          // 在点击的列表项上执行操作\n          console.log('Clicked item:', event.target.textContent);\n        }\n      });\n    </script>\n  ```\n## 什么是模块化开发，如何实现模块化开发\n  - 模块化开发是一种软件开发的方法，旨在将代码划分为独立、可维护和可重用的模块。模块化开发有助于提高代码的可读性、可维护性和可测试性，并促进团队合作和代码复用。\n  ### 命名空间模式\n  - 使用对象来组织代码，将相关的函数、变量等放在命名空间对象下。这种方式通过避免全局命名冲突来实现模块化。\n    ```JavaScript\n      // 命名空间模式示例\n      var myModule = {\n        // 模块内部的私有数据和函数\n        privateData: '私有数据',\n        privateFunction: function() {\n          // 私有函数实现\n        },\n        // 模块内部的公共接口\n        publicFunction: function() {\n          // 调用私有函数和访问私有数据\n        }\n      };\n    ```\n  ### 立即执行函数表达式\n  - 使用匿名函数创建一个独立的作用域，并立即执行该函数，从而创建模块化的代码。\n  ```JavaScript\n    // IIFE 模块化示例\n    var myModule = (function() {\n      // 模块内部的私有数据和函数\n      var privateData = '私有数据';\n      function privateFunction() {\n        // 私有函数实现\n      }\n\n      // 模块内部的公共接口\n      return {\n        publicFunction: function() {\n          // 调用私有函数和访问私有数据\n        }\n      };\n    })();\n  ```\n  ### CommonJS 模块规范\n  - 在服务器端使用广泛的模块化规范，通过 module.exports 导出模块，通过 require 引入模块。\n  ```JavaScript\n    // 模块导出\n    module.exports = {\n      // 模块的公共接口\n      publicFunction: function() {\n        // 实现代码\n      }\n    };\n\n    // 模块引入\n    var myModule = require('./myModule');\n    myModule.publicFunction();\n  ```\n  ### ES6 模块化\n  - 在现代 JavaScript 中，使用 import 和 export 关键字实现模块化。它是官方标准的模块化方案，广泛支持于现代浏览器和构建工具中。\n  ```JavaScript\n    // 模块导出\n    export function publicFunction() {\n      // 实现代码\n    }\n\n    // 模块引入\n    import { publicFunction } from './myModule';\n    publicFunction();\n  ```\n## es6模块化和CommonJS的区别\n  - 语法差异\n    ES6 模块化使用 import 和 export 关键字来导入和导出模块。\n    CommonJS 使用 require 函数来导入模块，使用 module.exports 来导出模块。\n  - 加载方式差异\n    ES6 模块化是静态加载的，也就是在代码静态分析阶段就可以确定模块的依赖关系，可以在编译时进行优化和静态分析。\n    CommonJS 是动态加载的，模块的加载和执行是在运行时进行的，无法在编译时进行优化。\n  - 导入导出特性差异\n    ES6 模块化支持命名导入和导出，可以选择性地导入和导出模块中的特定成员。\n    CommonJS 模块化没有内置的命名导入和导出机制，导入的是整个模块对象，可以通过对象属性来访问导出的成员。\n  - 作用域差异\n    ES6 模块化在导入的模块中，顶层的 import 和 export 声明是静态的，模块内部的变量不会污染全局作用域。\n    CommonJS 在导入的模块中，整个模块的内容被加载到一个对象中，模块内部的变量和函数都可以被其他模块访问到。\n  - 运行环境差异\n    ES6 模块化主要用于浏览器环境，也可以通过构建工具（如Webpack、Rollup）在 Node.js 环境中使用。\n    CommonJS 主要用于 Node.js 环境，也可以通过使用转换工具（如Babel）将其转换为浏览器可用的模块。\n## 如何操作DOM，常见的操作DOM方式有哪些\n  - 通过 ID 选择元素\n    - document.getElementById(id): 返回指定 ID 的元素。\n  - 通过选择器选择元素\n    - document.querySelector(selector): 返回匹配 CSS 选择器的第一个元素。\n    - document.querySelectorAll(selector): 返回匹配 CSS 选择器的所有元素的 NodeList。\n  - 通过标签名选择元素\n    - document.getElementsByTagName(tagName): 返回指定标签名的元素集合。\n  - 通过类名选择元素\n    - document.getElementsByClassName(className): 返回指定类名的元素集合。\n  - 创建元素\n    - document.createElement(tagName): 创建一个具有指定标签名的元素节点。\n  - 修改元素内容和属性\n    - element.textContent: 设置或获取元素的文本内容。\n    - element.innerHTML: 设置或获取元素的 HTML 内容。\n    - element.setAttribute(name, value): 设置元素的属性。\n    - element.getAttribute(name): 获取元素的属性值。\n    - element.style.property = value: 设置元素的 CSS 样式。\n  - 添加，移除和替换元素\n    - element.appendChild(newChild): 在元素的子节点列表末尾添加一个新的子节点。\n    - element.removeChild(child): 从元素的子节点列表中移除指定的子节点。\n    - element.replaceChild(newChild, oldChild): 替换元素的指定子节点。\n  - 添加和移除事件监听器\n    - element.addEventListener(event, listener): 添加事件监听器\n    - element.removeEventListener(event, listener): 移除事件监听器。\n  - 修改元素的样式类\n    - element.classList.add(className): 添加类名。\n    - element.classList.remove(className): 移除类名。\n    - element.classList.toggle(className): 切换类名的状态。\n## 变量提升\n  - 在 JavaScript 中，变量提升（Hoisting）是一种特性，它指的是在代码执行之前，JavaScript 引擎会将变量和函数的声明提升到当前作用域的顶部。\n  - 声明提升\n    - 在代码执行之前，JavaScript 引擎会扫描当前作用域内的变量声明，并将其提升到作用域顶部。\n    - 可以在变量声明之前使用变量。\n  - 函数提升\n    - 与变量提升类似，JavaScript 引擎还会将函数的声明提升到作用域的顶部\n    - 可以在函数声明之前调用函数。\n## for in和for of的区别\n  - 迭代的对象类型\n    - for...in 循环用于迭代对象的属性，包括对象自身的可枚举属性以及继承的可枚举属性。\n    - for...of 循环用于迭代可迭代对象（如数组、字符串、Set、Map 等）的元素值。\n  - 迭代的顺序\n    - for...in 循环的迭代顺序是不确定的，因为对象的属性没有固定的顺序。\n    - for...of 循环的迭代顺序是按照可迭代对象的迭代器定义的顺序进行迭代。\n  - 迭代变量的类型\n    - for...in 循环中的迭代变量是字符串类型，表示对象的属性名。\n    - for...of 循环中的迭代变量可以是任意类型，表示可迭代对象中的元素值。\n  - 可迭代对象的要求\n    - for...in 循环适用于任何对象，可以用于迭代普通对象的属性。\n    - for...of 循环要求迭代的对象实现了迭代器（Iterator）接口，即具有一个 Symbol.iterator 方法。\n\n## 数组方法\n  ### 改变原数组\n    - push()：向数组末尾添加一个或多个元素，并返回新数组的长度。\n    - pop()：从数组末尾移除最后一个元素，并返回被移除的元素。\n    - unshift()：向数组开头添加一个或多个元素，并返回新数组的长度。\n    - shift()：从数组开头移除第一个元素，并返回被移除的元素。\n    - splice()：从数组中添加、删除或替换元素。\n    - reverse()：颠倒数组中元素的顺序。\n    - sort()：对数组元素进行排序。\n    - fill()：替换值和起始索引位置（可选）。替换值指定要替换的固定值，起始索引位置指定开始替换的位置，默认为 0。\n  ### 不改变原数组\n    - concat()：将两个或多个数组合并为一个新数组。\n    - join()：将数组中的所有元素连接成一个字符串，并返回该字符串。\n    - slice()：返回数组的指定部分（浅拷贝）。\n    - indexOf()：返回指定元素在数组中的第一个匹配位置的索引。\n    - lastIndexOf()：返回指定元素在数组中最后一个匹配位置的索引。\n    - forEach()：对数组中的每个元素执行指定的函数。\n    - map()：对数组中的每个元素执行指定的函数，并返回一个新数组。\n    - filter()：根据指定的条件过滤数组中的元素，并返回一个新数组。\n    - reduce()：对数组中的元素执行累加器函数，返回一个累计值。\n    - every()：检查数组中的每个元素是否满足指定条件。\n    - some()：检查数组中是否至少有一个元素满足指定条件。\n    - find()：返回数组中满足指定条件的第一个元素。\n    - findIndex()：返回数组中满足指定条件的第一个元素的索引。\n  ### 数组去重\n  - 使用 Set\n  ```JavaScript\n    const arr = [1, 2, 2, 3, 3, 4, 5, 5];\n    const uniqueArr = [...new Set(arr)];\n    console.log(uniqueArr); // 输出 [1, 2, 3, 4, 5]\n  ```\n  - 使用 filter() 和 indexOf()\n  ```JavaScript\n    const arr = [1, 2, 2, 3, 3, 4, 5, 5];\n    const uniqueArr = arr.filter((value, index, array) => array.indexOf(value) === index);\n    console.log(uniqueArr); // 输出 [1, 2, 3, 4, 5]\n  ```\n  - 使用 reduce() 和 includes()：\n  ```JavaScript\n    const arr = [1, 2, 2, 3, 3, 4, 5, 5];\n    const uniqueArr = arr.reduce((result, value) => {\n      if (!result.includes(value)) {\n        result.push(value);\n      }\n      return result;\n    }, []);\n    console.log(uniqueArr); // 输出 [1, 2, 3, 4, 5]\n  ```\n  ### 数组扁平化\n    - 递归\n    ```JavaScript\n      function flattenArray(arr) {\n      let flattened = [];\n      arr.forEach((item) => {\n        if (Array.isArray(item)) {\n          flattened = flattened.concat(flattenArray(item));\n        } else {\n          flattened.push(item);\n        }\n      });\n      return flattened;\n    }\n\n    const nestedArray = [1, [2, [3, 4], 5], 6];\n    const flattenedArray = flattenArray(nestedArray);\n    console.log(flattenedArray); // 输出 [1, 2, 3, 4, 5, 6]\n    ```\n    - Array.prototype.flat()\n    ```JavaScript\n      const nestedArray = [1, [2, [3, 4], 5], 6];\n      const flattenedArray = nestedArray.flat();\n      console.log(flattenedArray); // 输出 [1, 2, [3, 4], 5, 6]\n\n      const nestedArray = [1, [2, [3, 4], 5], 6];\n      const flattenedArray = nestedArray.flat(2); // 指定扁平化层数为 2\n      console.log(flattenedArray); // 输出 [1, 2, 3, 4, 5, 6]\n    ```\n    - 扩展运算符+递归\n    ```JavaScript\n      function flattenArray(arr) {\n        return arr.reduce((result, item) => {\n          if (Array.isArray(item)) {\n            result.push(...flattenArray(item));\n          } else {\n            result.push(item);\n          }\n          return result;\n        }, []);\n      }\n\n      const nestedArray = [1, [2, [3, 4], 5], 6];\n      const flattenedArray = flattenArray(nestedArray);\n      console.log(flattenedArray); // 输出 [1, 2, 3, 4, 5, 6]\n    ```\n\n\n","slug":"js面试题","published":1,"date":"2023-05-23T03:23:47.220Z","updated":"2023-05-31T03:31:11.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clijr0jcj000344vc451p9ouu","content":"<p>继续整理，本篇以js内容为主，如需其他，请阅读其他文章。</p>\n<h2 id=\"js数据类型\"><a href=\"#js数据类型\" class=\"headerlink\" title=\"js数据类型\"></a>js数据类型</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ul>\n<li>Number 数字类型</li>\n<li>String 字符串类型</li>\n<li>Boolean 布尔值</li>\n<li>Null 空值</li>\n<li>Undefined 未定义</li>\n<li>Object 对象</li>\n<li>Array 数组</li>\n<li>Symbol 表示唯一的、不可变的值，用于创建对象的唯一标识符。Symbol 在 ES6 中引入。</li>\n<li>BigInt 数值太大的数字类型</li>\n</ul>\n<h3 id=\"特殊数据类型\"><a href=\"#特殊数据类型\" class=\"headerlink\" title=\"特殊数据类型\"></a>特殊数据类型</h3><ul>\n<li>Function 函数数据类型</li>\n</ul>\n<h2 id=\"检测数据类型的方式\"><a href=\"#检测数据类型的方式\" class=\"headerlink\" title=\"检测数据类型的方式\"></a>检测数据类型的方式</h2><h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><ul>\n<li>typeof 是一个一元操作符，用于获取一个值的类型。它返回一个表示数据类型的<font color=#9900CC>字符串</font>。</li>\n<li>返回值为字符串。</li>\n<li>可以准确的判断出<font color=#9900CC>基本数据类型</font>和<font color=#9900CC>Funtcion</font>，其他均为object。<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">42</span>; <span class=\"comment\">// &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&quot;Hello&quot;</span>; <span class=\"comment\">// &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>; <span class=\"comment\">// &quot;boolean&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>; <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>; <span class=\"comment\">// &quot;object&quot; (注意这是一个历史遗留问题，null 被错误地判断为对象)</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;; <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;; <span class=\"comment\">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><ul>\n<li>instanceof 操作符用于检查一个对象是否是某个构造函数创建的实例。它可以<font color=#9900CC>判断对象是否属于特定的类型或其子类型</font>。</li>\n<li>返回值为<font color=#9900CC>Boolean</font>Boolean值。</li>\n<li>对于原始值（如数字、字符串、布尔值等），使用 instanceof 操作符会返回 false，因为原始值不是对象。</li>\n<li>而对于对象类型（如数组、函数、对象等），instanceof 可以判断其是否属于特定类型或其子类型。<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bool = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bool <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Boolean</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> undef = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(undef <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Undefined</span>); <span class=\"comment\">// 报错，Undefined 不是一个构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nul = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nul <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(func <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"手写实现instanceof\"><a href=\"#手写实现instanceof\" class=\"headerlink\" title=\"手写实现instanceof\"></a>手写实现instanceof</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myInstanceof</span>(<span class=\"params\">obj, constructor</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span> || obj === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> prototype = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (prototype !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prototype === constructor.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    prototype = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(prototype);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-isArray\"><a href=\"#Array-isArray\" class=\"headerlink\" title=\"Array.isArray\"></a>Array.isArray</h3><ul>\n<li>Array.isArray() 是一个静态方法，用于检查一个值是否是数组类型。</li>\n<li>返回值为<font color=#9900CC>Boolean</font>。<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"string\">&quot;Hello&quot;</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Object-prototype-toString\"><a href=\"#Object-prototype-toString\" class=\"headerlink\" title=\"Object.prototype.toString()\"></a>Object.prototype.toString()</h3><ul>\n<li>Object.prototype.toString() 是 Object 原型上的方法</li>\n<li>返回值为<font color=#9900CC>对象类型的字符串</font><br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"number\">42</span>); <span class=\"comment\">// &quot;[object Number]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&quot;Hello&quot;</span>); <span class=\"comment\">// &quot;[object String]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// &quot;[object Boolean]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">// &quot;[object Undefined]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// &quot;[object Null]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// &quot;[object Array]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;); <span class=\"comment\">// &quot;[object Function]&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"var-let-const\"><a href=\"#var-let-const\" class=\"headerlink\" title=\"var, let, const\"></a>var, let, const</h2><h3 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h3><ul>\n<li>函数作用域：var 声明的变量具有函数作用域，即变量的作用范围限定在声明它的函数内部。</li>\n<li>变量提升：使用 var 声明的变量会发生<font color=#9900CC>变量提升</font>，即在函数内部，无论在哪里声明变量，变量声明都会被提升到函数的顶部。</li>\n</ul>\n<h3 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h3><ul>\n<li>块级作用域：let 声明的变量具有<font color=#9900CC>块级作用域</font>，即变量的作用范围限定在当前代码块内部（如 {} 中）。</li>\n<li>没有变量提升：使用 let 声明的变量<font color=#9900CC>不会发生变量提升</font>，只有在变量<font color=#9900CC>声明之后才能访问</font>。</li>\n</ul>\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><ul>\n<li>块级作用域：const 声明的变量具有<font color=#9900CC>块级作用域</font>。</li>\n<li>常量赋值：const 声明的变量<font color=#9900CC>必须在声明时进行初始化</font>，并且<font color=#9900CC>不能再次赋值</font>。它的值是不可变的。</li>\n</ul>\n<h2 id=\"作用域-amp-amp-作用域链\"><a href=\"#作用域-amp-amp-作用域链\" class=\"headerlink\" title=\"作用域&amp;&amp;作用域链\"></a>作用域&amp;&amp;作用域链</h2><h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ul>\n<li>全局作用域： 全局作用域是在整个 JavaScript 程序中可访问的最外层作用域。在全局作用域中声明的变量和函数可以被程序中的任何部分访问。</li>\n<li>函数作用域： 函数作用域是在函数内部声明的变量的作用域范围。函数作用域中的变量只能在函数内部访问，而无法在函数外部或其他函数中访问。</li>\n<li>块级作用域： 块级作用域是在代码块（如 if、for、while 语句等）中声明的变量的作用域范围。块级作用域中的变量只能在该代码块内部访问，而在代码块外部是不可见的。<br>  <font color=red>注：</font> 如果一个变量没有声明直接使用：<ul>\n<li>严格模式下：报错（ReferenceError: x is not defined）</li>\n<li>非严格模式下：JavaScript 引擎将隐式地将该变量视为<font color=red>全局变量</font>，并返回其值为 undefined</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><ul>\n<li>作用域链（Scope Chain）是 JavaScript 中用于查找变量的机制。当代码中引用一个变量时，JavaScript 引擎会按照特定的规则沿着作用域链进行变量查找，直到找到匹配的变量或达到最外层的全局作用域。</li>\n<li>作用域链的构建是根据变量的词法环境（Lexical Environment）进行的。每当创建一个新的执行上下文（函数执行上下文或全局执行上下文），就会创建一个新的词法环境，并将其与当前的词法环境形成一个链式结构。</li>\n<li>当访问一个变量时，JavaScript 引擎首先在当前的词法环境中查找该变量，如果找到了就使用它。如果没有找到，则继续沿着作用域链向上查找，直到找到匹配的变量或到达全局作用域。</li>\n<li>如果在最外层的全局作用域中仍然没有找到该变量，那么会抛出一个引用错误。</li>\n</ul>\n<h2 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h2><h3 id=\"标记清楚法\"><a href=\"#标记清楚法\" class=\"headerlink\" title=\"标记清楚法\"></a>标记清楚法</h3><ul>\n<li>在标记阶段，垃圾回收器从根对象开始遍历所有可访问的对象，并标记活动对象。</li>\n<li>在清除阶段，垃圾回收器清除所有未被标记的对象，释放它们占用的内存空间。</li>\n</ul>\n<h3 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h3><ul>\n<li>每当一个对象被引用时，引用计数加一；</li>\n<li>当一个对象的引用被删除或覆盖时，引用计数减一。</li>\n<li>当引用计数为零时，即没有任何引用指向该对象，该对象被判定为垃圾并被回收。<br>  <font color=red>注：</font>引用计数方法无法解决循环引用的问题，即对象之间相互引用导致引用计数无法归零的情况。</li>\n</ul>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><ul>\n<li>JavaScript 闭包（Closure）是指在<font color=#9900CC>函数内部创建的函数</font>，它可以访问外部函数的变量和作用域，即使外部函数已经执行完毕，闭包仍然可以保持对外部变量的引用。</li>\n</ul>\n<h3 id=\"特征：\"><a href=\"#特征：\" class=\"headerlink\" title=\"特征：\"></a>特征：</h3><ul>\n<li>内部函数可以访问外部函数的变量和参数</li>\n<li>外部函数的变量不会被销毁</li>\n</ul>\n<h3 id=\"场景：\"><a href=\"#场景：\" class=\"headerlink\" title=\"场景：\"></a>场景：</h3><ul>\n<li>封装私有变量：通过闭包可以<font color=#9900CC>创建私有变量</font>，外部无法直接访问，只能通过闭包提供的接口进行访问和修改。这种方式可以实现数据的封装和保护。</li>\n<li>延迟执行：通过闭包可以创建一个延迟执行的函数，即将一部分逻辑包裹在闭包中，并在需要时执行。这对于实现定时器、事件监听等场景很有用。</li>\n<li>记忆化：闭包可以用于缓存中间计算结果，以避免重复计算。通过在闭包中保存计算结果，可以提高代码的执行效率。<br>  <font color=red>注：</font>闭包的使用需要注意内存管理，因为闭包会持有外部函数的变量引用，如果不及时释放闭包，可能会导致<font color=red>内存泄漏。</font></li>\n</ul>\n<h3 id=\"释放闭包：\"><a href=\"#释放闭包：\" class=\"headerlink\" title=\"释放闭包：\"></a>释放闭包：</h3><ul>\n<li>如果存在其他对象或函数持有对闭包的引用，可以通过将这些引用置为 <font color=#9900CC>null</font> 或者取消相关的事件监听来释放闭包。</li>\n<li>让垃圾回收器自动回收不再使用的闭包所占用的内存。</li>\n</ul>\n<h3 id=\"避免内存泄漏和资源占用\"><a href=\"#避免内存泄漏和资源占用\" class=\"headerlink\" title=\"避免内存泄漏和资源占用\"></a>避免内存泄漏和资源占用</h3><ul>\n<li>及时解除事件监听</li>\n<li>避免循环引用</li>\n<li>尽量避免使用长期存在的闭包</li>\n</ul>\n<h2 id=\"this指向\"><a href=\"#this指向\" class=\"headerlink\" title=\"this指向\"></a>this指向</h2><ul>\n<li>默认情况:this指向window（严格模式下为undefined）</li>\n<li>对象绑定:作为对象的方法调用时，this指向该对象</li>\n<li>方法改变: call,apply,bind改变this</li>\n<li>new 绑定： this 指向新创建的实例对象。</li>\n<li>箭头函数： 箭头函数中的 this 绑定是词法上的，指向外层作用域的 this 值，而不是被调用时的上下文对象。<br>  <font color=red>注：</font> 箭头函数无法通过call，apply，bind改变。</li>\n</ul>\n<h2 id=\"new实例化\"><a href=\"#new实例化\" class=\"headerlink\" title=\"new实例化\"></a>new实例化</h2><ul>\n<li>创建一个空对象</li>\n<li>将对象的原型设置为函数的peototype属性</li>\n<li>将函数的this指向这个对象，执行构造函数的代码，给对象添加属性</li>\n<li>判断函数的返回类型，如果是值类型，则返回这个对象，如果是引用类型，则返回引用类型</li>\n</ul>\n<h2 id=\"原型-amp-amp-原型链\"><a href=\"#原型-amp-amp-原型链\" class=\"headerlink\" title=\"原型&amp;&amp;原型链\"></a>原型&amp;&amp;原型链</h2><h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><pre><code>- 在 JavaScript 中，每个对象都有一个原型（prototype）属性，它指向另一个对象，这个对象就是该对象的原型。原型对象可以包含共享的属性和方法，可以被对象实例共享和访问。\n</code></pre>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><pre><code>- 函数的原型链对象constructor默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针__proto__,该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用__proto__一直指向Object的原型对象上，而Object原型对象用Object.prototype.__ proto__ = null表示原型链顶端。如此形成了js的原型链继承。同时所有的js对象都有Object的基本防范\n</code></pre>\n<p>  <font color=#00FFFF>例：</font><br>    <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 Person 构造函数的原型对象上定义一个方法</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>!`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个对象实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> john = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;John&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用对象实例的方法</span></span><br><span class=\"line\">john.<span class=\"title function_\">sayHello</span>(); <span class=\"comment\">// 输出 &quot;Hello, my name is John!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 隐式访问原型对象上的属性</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(john.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 输出 &quot;[object Object]&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原型链继承关系</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(john.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// 输出 true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// 输出 true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span>); <span class=\"comment\">// 输出 null</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><pre><code>- 事件循环（Event Loop）是 JavaScript 中处理异步操作的一种机制。它负责协调和执行 JavaScript 代码，使得异步任务能够按照特定的顺序和时机执行。\n- JavaScript 是单线程的，意味着一次只能执行一个任务。但是在实际开发中，经常会遇到需要执行异步操作的情况，比如网络请求、定时器、事件监听等。为了处理这些异步操作，JavaScript 引入了事件循环机制。\n</code></pre>\n<h3 id=\"事件循环机制的主要组成部分包括以下几个要素\"><a href=\"#事件循环机制的主要组成部分包括以下几个要素\" class=\"headerlink\" title=\"事件循环机制的主要组成部分包括以下几个要素\"></a>事件循环机制的主要组成部分包括以下几个要素</h3><pre><code>- 调用栈（Call Stack）：用于存储执行上下文的栈结构，用来跟踪代码的执行位置。\n- 任务队列（Task Queue）：用于存储异步任务的队列，比如网络请求回调、定时器回调等。\n- 事件循环（Event Loop）：负责监听调用栈和任务队列，当调用栈为空时，从任务队列中取出任务并推入调用栈执行。\n</code></pre>\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><pre><code>- 代码从上到下依次执行，遇到异步任务时，将其推入任务队列而不会阻塞代码的执行。\n- 当调用栈为空时，事件循环会检查任务队列。\n- 如果任务队列中有任务，则选择其中最早进入队列的任务，将其推入调用栈执行。\n- 执行任务时，可能会产生新的异步任务，将其推入任务队列。\n- 重复步骤 2-4，直到任务队列为空。\n</code></pre>\n<ul>\n<li>事件循环中有宏任务和微任务的区分</li>\n</ul>\n<h3 id=\"宏任务\"><a href=\"#宏任务\" class=\"headerlink\" title=\"宏任务\"></a>宏任务</h3><pre><code>- 整体代码块（Script）：整个脚本代码作为一个宏任务执行。\n- setTimeout 和 setInterval：定时器任务。\n- I/O 操作：包括文件读写、网络请求等异步 I/O 操作。\n- UI 渲染：更新页面布局、样式等操作。\n- requestAnimationFrame：用于实现动画效果的定时器。\n- 事件监听器回调：如点击事件、键盘事件等。\n</code></pre>\n<h3 id=\"微任务\"><a href=\"#微任务\" class=\"headerlink\" title=\"微任务\"></a>微任务</h3><pre><code>- Promise 回调：在 Promise 的状态改变时执行的回调函数。\n- MutationObserver 回调：监测 DOM 变化时执行的回调函数。\n- process.nextTick（Node.js 环境）：在当前操作结束后立即执行的回调函数。\n</code></pre>\n<p>  <font color=red>注：事件循环</font>的执行过程中，宏任务的优先级高于微任务。<br>  <font color=red>注：任务队列</font>的执行过程中，微任务的优先级高于宏任务。<br>  <font color=#00FFFF>例：</font><br>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">delay</span>(<span class=\"params\">ms</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, ms));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">syncCode</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">asyncCode</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">execute</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">syncCode</span>();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">asyncCode</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">execute</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!-- 代码执行顺序的解释如下：</span><br><span class=\"line\"></span><br><span class=\"line\">  首先执行 <span class=\"title function_\">syncCode</span>() 函数，输出 <span class=\"number\">1</span>。</span><br><span class=\"line\">  使用 <span class=\"keyword\">await</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>) 实现一个 <span class=\"number\">1</span> 秒的延迟。</span><br><span class=\"line\">  输出 <span class=\"number\">3</span>。</span><br><span class=\"line\">  执行 <span class=\"title function_\">asyncCode</span>() 函数，其中包含一个 <span class=\"number\">1</span> 秒的延迟，在延迟结束后输出 <span class=\"number\">2</span>。</span><br><span class=\"line\">  输出 <span class=\"number\">4</span>。</span><br><span class=\"line\">  使用 <span class=\"keyword\">await</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>) 实现一个 <span class=\"number\">1</span> 秒的延迟。</span><br><span class=\"line\">  输出 <span class=\"number\">5</span>。</span><br><span class=\"line\">  使用 <span class=\"title class_\">Promise</span> 的 then 方法进行连续的延时操作，分别输出 <span class=\"number\">6</span>、<span class=\"number\">7</span>、<span class=\"number\">8</span>。</span><br><span class=\"line\">  最后使用 then 方法输出 <span class=\"number\">9</span>。 --&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"防抖-amp-amp-节流\"><a href=\"#防抖-amp-amp-节流\" class=\"headerlink\" title=\"防抖&amp;&amp;节流\"></a>防抖&amp;&amp;节流</h2><h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><ul>\n<li>在事件触发后等待一段时间，如果在这段时间内没有再次触发该事件，才执行对应的操作。如果在等待时间内又触发了该事件，就重新开始计时。<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      func.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> debouncedFunction = <span class=\"title function_\">debounce</span>(myFunction, <span class=\"number\">300</span>);</span><br><span class=\"line\">element.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;input&#x27;</span>, debouncedFunction);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><ul>\n<li>控制事件的触发频率，保证一定时间内只触发一次该事件。在设定的时间间隔内，不管事件触发了多少次，只有一次事件处理函数执行。<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">func, delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        func.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> throttledFunction = <span class=\"title function_\">throttle</span>(myFunction, <span class=\"number\">300</span>);</span><br><span class=\"line\">element.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, throttledFunction);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><pre><code>- Promise 是 JavaScript 中用于处理异步操作的一种机制。它可以避免回调地狱的问题，并提供了一种更优雅的方式来处理异步代码。\n- 它可以有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。\n- 状态只可以改变一次（ pending ==&gt; fulfilled ||  pending ==&gt; rejected ）\n- 可以通过.then()链式调用,每个 .then() 方法都返回一个新的 Promise 对象;\n- .then() 方法来注册操作成功时的处理函数，使用 .catch() 方法来注册操作失败时的处理函数。\n</code></pre>\n<p>  基本语法 <font color=#00FFFF>例：</font><br>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 异步操作</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果操作成功，调用 resolve(value)</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果操作失败，调用 reject(error)</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理操作成功的结果</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理操作失败的结果</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><pre><code>#### Promise.resolve\n  - Promise.resolve(value)：返回一个以给定值解析后的 Promise 对象。如果传入的值本身就是一个 Promise，则直接返回该 Promise。\n  &lt;font color=#00FFFF&gt;例：&lt;/font&gt;\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value); <span class=\"comment\">// 输出 42</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n#### Promise.reject\n  - Promise.reject(reason)：返回一个带有指定拒绝原因的 Promise 对象。\n  &lt;font color=#00FFFF&gt;例：&lt;/font&gt;\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Something went wrong&#x27;</span>));</span><br><span class=\"line\">promise.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error); <span class=\"comment\">// 输出错误信息：Something went wrong</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n#### Promise.all\n  - Promise.all(iterable)：接收一个可迭代对象（如数组或类数组对象），并返回一个 Promise 对象。\n  - 该 Promise 对象在所有输入的 Promise 都已成功解析后才会解析，返回一个包含所有 Promise 结果的数组。\n  - 如果其中任何一个 Promise 被拒绝，则返回的 Promise 会立即被拒绝。\n  &lt;font color=#00FFFF&gt;例：&lt;/font&gt;\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promises = [</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>),</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(promises)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">results</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(results); <span class=\"comment\">// 输出 [1, 2, 3]</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n#### Promise.race\n  - Promise.race(iterable)：接收一个可迭代对象，返回一个 Promise 对象。\n  - 该 Promise 对象将与第一个解析或拒绝的 Promise 对象具有相同的结果。\n  &lt;font color=#00FFFF&gt;例：&lt;/font&gt;\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promises = [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>), <span class=\"number\">100</span>)),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>), <span class=\"number\">200</span>)),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>), <span class=\"number\">300</span>))</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>(promises)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 输出 1（第一个解析的 Promise 结果）</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"手写实现Promise-all\"><a href=\"#手写实现Promise-all\" class=\"headerlink\" title=\"手写实现Promise.all\"></a>手写实现Promise.all</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myPromiseAll</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> results = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolvedCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      promises[i]</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">          results[i] = result;</span><br><span class=\"line\">          resolvedCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (resolvedCount === promises.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(reject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件委托（事件代理）\"><a href=\"#事件委托（事件代理）\" class=\"headerlink\" title=\"事件委托（事件代理）\"></a>事件委托（事件代理）</h2><ul>\n<li>JavaScript 中的事件委托（事件代理）是一种常见的事件处理技术，它通过将事件绑定到一个父元素上，利用事件冒泡的特性，在父元素上统一处理子元素的事件。</li>\n</ul>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><pre><code>- 减少内存消耗：只需要一个事件处理程序，而不是为每个子元素都创建一个处理程序，从而减少了内存消耗。\n- 动态绑定：对于后续添加的子元素，无需再次绑定事件，因为事件委托是基于事件冒泡的，新添加的元素也会受到委托的处理。\n- 简化代码：通过将事件处理程序绑定到父元素上，可以避免在多个子元素上编写重复的事件处理代码。\n</code></pre>\n<p>  <font color=#00FFFF>例：</font><br>  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myList&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> list = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myList&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  list.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span> (event.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span> === <span class=\"string\">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 在点击的列表项上执行操作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Clicked item:&#x27;</span>, event.<span class=\"property\">target</span>.<span class=\"property\">textContent</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"什么是模块化开发，如何实现模块化开发\"><a href=\"#什么是模块化开发，如何实现模块化开发\" class=\"headerlink\" title=\"什么是模块化开发，如何实现模块化开发\"></a>什么是模块化开发，如何实现模块化开发</h2><ul>\n<li>模块化开发是一种软件开发的方法，旨在将代码划分为独立、可维护和可重用的模块。模块化开发有助于提高代码的可读性、可维护性和可测试性，并促进团队合作和代码复用。</li>\n</ul>\n<h3 id=\"命名空间模式\"><a href=\"#命名空间模式\" class=\"headerlink\" title=\"命名空间模式\"></a>命名空间模式</h3><ul>\n<li>使用对象来组织代码，将相关的函数、变量等放在命名空间对象下。这种方式通过避免全局命名冲突来实现模块化。<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 命名空间模式示例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myModule = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 模块内部的私有数据和函数</span></span><br><span class=\"line\">  <span class=\"attr\">privateData</span>: <span class=\"string\">&#x27;私有数据&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">privateFunction</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有函数实现</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 模块内部的公共接口</span></span><br><span class=\"line\">  <span class=\"attr\">publicFunction</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用私有函数和访问私有数据</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"立即执行函数表达式\"><a href=\"#立即执行函数表达式\" class=\"headerlink\" title=\"立即执行函数表达式\"></a>立即执行函数表达式</h3><ul>\n<li>使用匿名函数创建一个独立的作用域，并立即执行该函数，从而创建模块化的代码。  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IIFE 模块化示例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myModule = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 模块内部的私有数据和函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateData = <span class=\"string\">&#x27;私有数据&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">privateFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有函数实现</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 模块内部的公共接口</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">publicFunction</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 调用私有函数和访问私有数据</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"CommonJS-模块规范\"><a href=\"#CommonJS-模块规范\" class=\"headerlink\" title=\"CommonJS 模块规范\"></a>CommonJS 模块规范</h3><ul>\n<li>在服务器端使用广泛的模块化规范，通过 module.exports 导出模块，通过 require 引入模块。  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模块导出</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 模块的公共接口</span></span><br><span class=\"line\">  <span class=\"attr\">publicFunction</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实现代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模块引入</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myModule = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./myModule&#x27;</span>);</span><br><span class=\"line\">myModule.<span class=\"title function_\">publicFunction</span>();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"ES6-模块化\"><a href=\"#ES6-模块化\" class=\"headerlink\" title=\"ES6 模块化\"></a>ES6 模块化</h3><ul>\n<li>在现代 JavaScript 中，使用 import 和 export 关键字实现模块化。它是官方标准的模块化方案，广泛支持于现代浏览器和构建工具中。  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模块导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">publicFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 实现代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模块引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; publicFunction &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myModule&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">publicFunction</span>();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"es6模块化和CommonJS的区别\"><a href=\"#es6模块化和CommonJS的区别\" class=\"headerlink\" title=\"es6模块化和CommonJS的区别\"></a>es6模块化和CommonJS的区别</h2><ul>\n<li>语法差异<br>ES6 模块化使用 import 和 export 关键字来导入和导出模块。<br>CommonJS 使用 require 函数来导入模块，使用 module.exports 来导出模块。</li>\n<li>加载方式差异<br>ES6 模块化是静态加载的，也就是在代码静态分析阶段就可以确定模块的依赖关系，可以在编译时进行优化和静态分析。<br>CommonJS 是动态加载的，模块的加载和执行是在运行时进行的，无法在编译时进行优化。</li>\n<li>导入导出特性差异<br>ES6 模块化支持命名导入和导出，可以选择性地导入和导出模块中的特定成员。<br>CommonJS 模块化没有内置的命名导入和导出机制，导入的是整个模块对象，可以通过对象属性来访问导出的成员。</li>\n<li>作用域差异<br>ES6 模块化在导入的模块中，顶层的 import 和 export 声明是静态的，模块内部的变量不会污染全局作用域。<br>CommonJS 在导入的模块中，整个模块的内容被加载到一个对象中，模块内部的变量和函数都可以被其他模块访问到。</li>\n<li>运行环境差异<br>ES6 模块化主要用于浏览器环境，也可以通过构建工具（如Webpack、Rollup）在 Node.js 环境中使用。<br>CommonJS 主要用于 Node.js 环境，也可以通过使用转换工具（如Babel）将其转换为浏览器可用的模块。</li>\n</ul>\n<h2 id=\"如何操作DOM，常见的操作DOM方式有哪些\"><a href=\"#如何操作DOM，常见的操作DOM方式有哪些\" class=\"headerlink\" title=\"如何操作DOM，常见的操作DOM方式有哪些\"></a>如何操作DOM，常见的操作DOM方式有哪些</h2><ul>\n<li>通过 ID 选择元素<ul>\n<li>document.getElementById(id): 返回指定 ID 的元素。</li>\n</ul>\n</li>\n<li>通过选择器选择元素<ul>\n<li>document.querySelector(selector): 返回匹配 CSS 选择器的第一个元素。</li>\n<li>document.querySelectorAll(selector): 返回匹配 CSS 选择器的所有元素的 NodeList。</li>\n</ul>\n</li>\n<li>通过标签名选择元素<ul>\n<li>document.getElementsByTagName(tagName): 返回指定标签名的元素集合。</li>\n</ul>\n</li>\n<li>通过类名选择元素<ul>\n<li>document.getElementsByClassName(className): 返回指定类名的元素集合。</li>\n</ul>\n</li>\n<li>创建元素<ul>\n<li>document.createElement(tagName): 创建一个具有指定标签名的元素节点。</li>\n</ul>\n</li>\n<li>修改元素内容和属性<ul>\n<li>element.textContent: 设置或获取元素的文本内容。</li>\n<li>element.innerHTML: 设置或获取元素的 HTML 内容。</li>\n<li>element.setAttribute(name, value): 设置元素的属性。</li>\n<li>element.getAttribute(name): 获取元素的属性值。</li>\n<li>element.style.property &#x3D; value: 设置元素的 CSS 样式。</li>\n</ul>\n</li>\n<li>添加，移除和替换元素<ul>\n<li>element.appendChild(newChild): 在元素的子节点列表末尾添加一个新的子节点。</li>\n<li>element.removeChild(child): 从元素的子节点列表中移除指定的子节点。</li>\n<li>element.replaceChild(newChild, oldChild): 替换元素的指定子节点。</li>\n</ul>\n</li>\n<li>添加和移除事件监听器<ul>\n<li>element.addEventListener(event, listener): 添加事件监听器</li>\n<li>element.removeEventListener(event, listener): 移除事件监听器。</li>\n</ul>\n</li>\n<li>修改元素的样式类<ul>\n<li>element.classList.add(className): 添加类名。</li>\n<li>element.classList.remove(className): 移除类名。</li>\n<li>element.classList.toggle(className): 切换类名的状态。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><ul>\n<li>在 JavaScript 中，变量提升（Hoisting）是一种特性，它指的是在代码执行之前，JavaScript 引擎会将变量和函数的声明提升到当前作用域的顶部。</li>\n<li>声明提升<ul>\n<li>在代码执行之前，JavaScript 引擎会扫描当前作用域内的变量声明，并将其提升到作用域顶部。</li>\n<li>可以在变量声明之前使用变量。</li>\n</ul>\n</li>\n<li>函数提升<ul>\n<li>与变量提升类似，JavaScript 引擎还会将函数的声明提升到作用域的顶部</li>\n<li>可以在函数声明之前调用函数。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"for-in和for-of的区别\"><a href=\"#for-in和for-of的区别\" class=\"headerlink\" title=\"for in和for of的区别\"></a>for in和for of的区别</h2><ul>\n<li>迭代的对象类型<ul>\n<li>for…in 循环用于迭代对象的属性，包括对象自身的可枚举属性以及继承的可枚举属性。</li>\n<li>for…of 循环用于迭代可迭代对象（如数组、字符串、Set、Map 等）的元素值。</li>\n</ul>\n</li>\n<li>迭代的顺序<ul>\n<li>for…in 循环的迭代顺序是不确定的，因为对象的属性没有固定的顺序。</li>\n<li>for…of 循环的迭代顺序是按照可迭代对象的迭代器定义的顺序进行迭代。</li>\n</ul>\n</li>\n<li>迭代变量的类型<ul>\n<li>for…in 循环中的迭代变量是字符串类型，表示对象的属性名。</li>\n<li>for…of 循环中的迭代变量可以是任意类型，表示可迭代对象中的元素值。</li>\n</ul>\n</li>\n<li>可迭代对象的要求<ul>\n<li>for…in 循环适用于任何对象，可以用于迭代普通对象的属性。</li>\n<li>for…of 循环要求迭代的对象实现了迭代器（Iterator）接口，即具有一个 Symbol.iterator 方法。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><h3 id=\"改变原数组\"><a href=\"#改变原数组\" class=\"headerlink\" title=\"改变原数组\"></a>改变原数组</h3><pre><code>- push()：向数组末尾添加一个或多个元素，并返回新数组的长度。\n- pop()：从数组末尾移除最后一个元素，并返回被移除的元素。\n- unshift()：向数组开头添加一个或多个元素，并返回新数组的长度。\n- shift()：从数组开头移除第一个元素，并返回被移除的元素。\n- splice()：从数组中添加、删除或替换元素。\n- reverse()：颠倒数组中元素的顺序。\n- sort()：对数组元素进行排序。\n- fill()：替换值和起始索引位置（可选）。替换值指定要替换的固定值，起始索引位置指定开始替换的位置，默认为 0。\n</code></pre>\n<h3 id=\"不改变原数组\"><a href=\"#不改变原数组\" class=\"headerlink\" title=\"不改变原数组\"></a>不改变原数组</h3><pre><code>- concat()：将两个或多个数组合并为一个新数组。\n- join()：将数组中的所有元素连接成一个字符串，并返回该字符串。\n- slice()：返回数组的指定部分（浅拷贝）。\n- indexOf()：返回指定元素在数组中的第一个匹配位置的索引。\n- lastIndexOf()：返回指定元素在数组中最后一个匹配位置的索引。\n- forEach()：对数组中的每个元素执行指定的函数。\n- map()：对数组中的每个元素执行指定的函数，并返回一个新数组。\n- filter()：根据指定的条件过滤数组中的元素，并返回一个新数组。\n- reduce()：对数组中的元素执行累加器函数，返回一个累计值。\n- every()：检查数组中的每个元素是否满足指定条件。\n- some()：检查数组中是否至少有一个元素满足指定条件。\n- find()：返回数组中满足指定条件的第一个元素。\n- findIndex()：返回数组中满足指定条件的第一个元素的索引。\n</code></pre>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><ul>\n<li>使用 Set  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> uniqueArr = [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr)];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(uniqueArr); <span class=\"comment\">// 输出 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li>\n<li>使用 filter() 和 indexOf()  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> uniqueArr = arr.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> array.<span class=\"title function_\">indexOf</span>(value) === index);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(uniqueArr); <span class=\"comment\">// 输出 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li>\n<li>使用 reduce() 和 includes()：  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> uniqueArr = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">result, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!result.<span class=\"title function_\">includes</span>(value)) &#123;</span><br><span class=\"line\">    result.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(uniqueArr); <span class=\"comment\">// 输出 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"数组扁平化\"><a href=\"#数组扁平化\" class=\"headerlink\" title=\"数组扁平化\"></a>数组扁平化</h3><pre><code>- 递归\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">flattenArray</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> flattened = [];</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(item)) &#123;</span><br><span class=\"line\">      flattened = flattened.<span class=\"title function_\">concat</span>(<span class=\"title function_\">flattenArray</span>(item));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      flattened.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> flattened;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nestedArray = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>], <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> flattenedArray = <span class=\"title function_\">flattenArray</span>(nestedArray);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(flattenedArray); <span class=\"comment\">// 输出 [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n- Array.prototype.flat()\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nestedArray = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>], <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> flattenedArray = nestedArray.<span class=\"title function_\">flat</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(flattenedArray); <span class=\"comment\">// 输出 [1, 2, [3, 4], 5, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nestedArray = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>], <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> flattenedArray = nestedArray.<span class=\"title function_\">flat</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 指定扁平化层数为 2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(flattenedArray); <span class=\"comment\">// 输出 [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n- 扩展运算符+递归\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flattenArray</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(item)) &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(...<span class=\"title function_\">flattenArray</span>(item));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nestedArray = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>], <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> flattenedArray = <span class=\"title function_\">flattenArray</span>(nestedArray);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(flattenedArray); <span class=\"comment\">// 输出 [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover_type":"img","excerpt":"","more":"<p>继续整理，本篇以js内容为主，如需其他，请阅读其他文章。</p>\n<h2 id=\"js数据类型\"><a href=\"#js数据类型\" class=\"headerlink\" title=\"js数据类型\"></a>js数据类型</h2><h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ul>\n<li>Number 数字类型</li>\n<li>String 字符串类型</li>\n<li>Boolean 布尔值</li>\n<li>Null 空值</li>\n<li>Undefined 未定义</li>\n<li>Object 对象</li>\n<li>Array 数组</li>\n<li>Symbol 表示唯一的、不可变的值，用于创建对象的唯一标识符。Symbol 在 ES6 中引入。</li>\n<li>BigInt 数值太大的数字类型</li>\n</ul>\n<h3 id=\"特殊数据类型\"><a href=\"#特殊数据类型\" class=\"headerlink\" title=\"特殊数据类型\"></a>特殊数据类型</h3><ul>\n<li>Function 函数数据类型</li>\n</ul>\n<h2 id=\"检测数据类型的方式\"><a href=\"#检测数据类型的方式\" class=\"headerlink\" title=\"检测数据类型的方式\"></a>检测数据类型的方式</h2><h3 id=\"typeof\"><a href=\"#typeof\" class=\"headerlink\" title=\"typeof\"></a>typeof</h3><ul>\n<li>typeof 是一个一元操作符，用于获取一个值的类型。它返回一个表示数据类型的<font color=#9900CC>字符串</font>。</li>\n<li>返回值为字符串。</li>\n<li>可以准确的判断出<font color=#9900CC>基本数据类型</font>和<font color=#9900CC>Funtcion</font>，其他均为object。<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"number\">42</span>; <span class=\"comment\">// &quot;number&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"string\">&quot;Hello&quot;</span>; <span class=\"comment\">// &quot;string&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">true</span>; <span class=\"comment\">// &quot;boolean&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">undefined</span>; <span class=\"comment\">// &quot;undefined&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>; <span class=\"comment\">// &quot;object&quot; (注意这是一个历史遗留问题，null 被错误地判断为对象)</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]; <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;; <span class=\"comment\">// &quot;object&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;; <span class=\"comment\">// &quot;function&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><ul>\n<li>instanceof 操作符用于检查一个对象是否是某个构造函数创建的实例。它可以<font color=#9900CC>判断对象是否属于特定的类型或其子类型</font>。</li>\n<li>返回值为<font color=#9900CC>Boolean</font>Boolean值。</li>\n<li>对于原始值（如数字、字符串、布尔值等），使用 instanceof 操作符会返回 false，因为原始值不是对象。</li>\n<li>而对于对象类型（如数组、函数、对象等），instanceof 可以判断其是否属于特定类型或其子类型。<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> num = <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Number</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str <span class=\"keyword\">instanceof</span> <span class=\"title class_\">String</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> bool = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(bool <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Boolean</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> undef = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(undef <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Undefined</span>); <span class=\"comment\">// 报错，Undefined 不是一个构造函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nul = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(nul <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arr <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(obj <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> func = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(func <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Function</span>); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"手写实现instanceof\"><a href=\"#手写实现instanceof\" class=\"headerlink\" title=\"手写实现instanceof\"></a>手写实现instanceof</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myInstanceof</span>(<span class=\"params\">obj, constructor</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj !== <span class=\"string\">&#x27;object&#x27;</span> || obj === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> prototype = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(obj);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (prototype !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prototype === constructor.<span class=\"property\"><span class=\"keyword\">prototype</span></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    prototype = <span class=\"title class_\">Object</span>.<span class=\"title function_\">getPrototypeOf</span>(prototype);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Array-isArray\"><a href=\"#Array-isArray\" class=\"headerlink\" title=\"Array.isArray\"></a>Array.isArray</h3><ul>\n<li>Array.isArray() 是一个静态方法，用于检查一个值是否是数组类型。</li>\n<li>返回值为<font color=#9900CC>Boolean</font>。<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(<span class=\"string\">&quot;Hello&quot;</span>); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Object-prototype-toString\"><a href=\"#Object-prototype-toString\" class=\"headerlink\" title=\"Object.prototype.toString()\"></a>Object.prototype.toString()</h3><ul>\n<li>Object.prototype.toString() 是 Object 原型上的方法</li>\n<li>返回值为<font color=#9900CC>对象类型的字符串</font><br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"number\">42</span>); <span class=\"comment\">// &quot;[object Number]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"string\">&quot;Hello&quot;</span>); <span class=\"comment\">// &quot;[object String]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">true</span>); <span class=\"comment\">// &quot;[object Boolean]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">undefined</span>); <span class=\"comment\">// &quot;[object Undefined]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"literal\">null</span>); <span class=\"comment\">// &quot;[object Null]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]); <span class=\"comment\">// &quot;[object Array]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;John&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">25</span> &#125;); <span class=\"comment\">// &quot;[object Object]&quot;</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;); <span class=\"comment\">// &quot;[object Function]&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"var-let-const\"><a href=\"#var-let-const\" class=\"headerlink\" title=\"var, let, const\"></a>var, let, const</h2><h3 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"var\"></a>var</h3><ul>\n<li>函数作用域：var 声明的变量具有函数作用域，即变量的作用范围限定在声明它的函数内部。</li>\n<li>变量提升：使用 var 声明的变量会发生<font color=#9900CC>变量提升</font>，即在函数内部，无论在哪里声明变量，变量声明都会被提升到函数的顶部。</li>\n</ul>\n<h3 id=\"let\"><a href=\"#let\" class=\"headerlink\" title=\"let\"></a>let</h3><ul>\n<li>块级作用域：let 声明的变量具有<font color=#9900CC>块级作用域</font>，即变量的作用范围限定在当前代码块内部（如 {} 中）。</li>\n<li>没有变量提升：使用 let 声明的变量<font color=#9900CC>不会发生变量提升</font>，只有在变量<font color=#9900CC>声明之后才能访问</font>。</li>\n</ul>\n<h3 id=\"const\"><a href=\"#const\" class=\"headerlink\" title=\"const\"></a>const</h3><ul>\n<li>块级作用域：const 声明的变量具有<font color=#9900CC>块级作用域</font>。</li>\n<li>常量赋值：const 声明的变量<font color=#9900CC>必须在声明时进行初始化</font>，并且<font color=#9900CC>不能再次赋值</font>。它的值是不可变的。</li>\n</ul>\n<h2 id=\"作用域-amp-amp-作用域链\"><a href=\"#作用域-amp-amp-作用域链\" class=\"headerlink\" title=\"作用域&amp;&amp;作用域链\"></a>作用域&amp;&amp;作用域链</h2><h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ul>\n<li>全局作用域： 全局作用域是在整个 JavaScript 程序中可访问的最外层作用域。在全局作用域中声明的变量和函数可以被程序中的任何部分访问。</li>\n<li>函数作用域： 函数作用域是在函数内部声明的变量的作用域范围。函数作用域中的变量只能在函数内部访问，而无法在函数外部或其他函数中访问。</li>\n<li>块级作用域： 块级作用域是在代码块（如 if、for、while 语句等）中声明的变量的作用域范围。块级作用域中的变量只能在该代码块内部访问，而在代码块外部是不可见的。<br>  <font color=red>注：</font> 如果一个变量没有声明直接使用：<ul>\n<li>严格模式下：报错（ReferenceError: x is not defined）</li>\n<li>非严格模式下：JavaScript 引擎将隐式地将该变量视为<font color=red>全局变量</font>，并返回其值为 undefined</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h3><ul>\n<li>作用域链（Scope Chain）是 JavaScript 中用于查找变量的机制。当代码中引用一个变量时，JavaScript 引擎会按照特定的规则沿着作用域链进行变量查找，直到找到匹配的变量或达到最外层的全局作用域。</li>\n<li>作用域链的构建是根据变量的词法环境（Lexical Environment）进行的。每当创建一个新的执行上下文（函数执行上下文或全局执行上下文），就会创建一个新的词法环境，并将其与当前的词法环境形成一个链式结构。</li>\n<li>当访问一个变量时，JavaScript 引擎首先在当前的词法环境中查找该变量，如果找到了就使用它。如果没有找到，则继续沿着作用域链向上查找，直到找到匹配的变量或到达全局作用域。</li>\n<li>如果在最外层的全局作用域中仍然没有找到该变量，那么会抛出一个引用错误。</li>\n</ul>\n<h2 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h2><h3 id=\"标记清楚法\"><a href=\"#标记清楚法\" class=\"headerlink\" title=\"标记清楚法\"></a>标记清楚法</h3><ul>\n<li>在标记阶段，垃圾回收器从根对象开始遍历所有可访问的对象，并标记活动对象。</li>\n<li>在清除阶段，垃圾回收器清除所有未被标记的对象，释放它们占用的内存空间。</li>\n</ul>\n<h3 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h3><ul>\n<li>每当一个对象被引用时，引用计数加一；</li>\n<li>当一个对象的引用被删除或覆盖时，引用计数减一。</li>\n<li>当引用计数为零时，即没有任何引用指向该对象，该对象被判定为垃圾并被回收。<br>  <font color=red>注：</font>引用计数方法无法解决循环引用的问题，即对象之间相互引用导致引用计数无法归零的情况。</li>\n</ul>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><h3 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><ul>\n<li>JavaScript 闭包（Closure）是指在<font color=#9900CC>函数内部创建的函数</font>，它可以访问外部函数的变量和作用域，即使外部函数已经执行完毕，闭包仍然可以保持对外部变量的引用。</li>\n</ul>\n<h3 id=\"特征：\"><a href=\"#特征：\" class=\"headerlink\" title=\"特征：\"></a>特征：</h3><ul>\n<li>内部函数可以访问外部函数的变量和参数</li>\n<li>外部函数的变量不会被销毁</li>\n</ul>\n<h3 id=\"场景：\"><a href=\"#场景：\" class=\"headerlink\" title=\"场景：\"></a>场景：</h3><ul>\n<li>封装私有变量：通过闭包可以<font color=#9900CC>创建私有变量</font>，外部无法直接访问，只能通过闭包提供的接口进行访问和修改。这种方式可以实现数据的封装和保护。</li>\n<li>延迟执行：通过闭包可以创建一个延迟执行的函数，即将一部分逻辑包裹在闭包中，并在需要时执行。这对于实现定时器、事件监听等场景很有用。</li>\n<li>记忆化：闭包可以用于缓存中间计算结果，以避免重复计算。通过在闭包中保存计算结果，可以提高代码的执行效率。<br>  <font color=red>注：</font>闭包的使用需要注意内存管理，因为闭包会持有外部函数的变量引用，如果不及时释放闭包，可能会导致<font color=red>内存泄漏。</font></li>\n</ul>\n<h3 id=\"释放闭包：\"><a href=\"#释放闭包：\" class=\"headerlink\" title=\"释放闭包：\"></a>释放闭包：</h3><ul>\n<li>如果存在其他对象或函数持有对闭包的引用，可以通过将这些引用置为 <font color=#9900CC>null</font> 或者取消相关的事件监听来释放闭包。</li>\n<li>让垃圾回收器自动回收不再使用的闭包所占用的内存。</li>\n</ul>\n<h3 id=\"避免内存泄漏和资源占用\"><a href=\"#避免内存泄漏和资源占用\" class=\"headerlink\" title=\"避免内存泄漏和资源占用\"></a>避免内存泄漏和资源占用</h3><ul>\n<li>及时解除事件监听</li>\n<li>避免循环引用</li>\n<li>尽量避免使用长期存在的闭包</li>\n</ul>\n<h2 id=\"this指向\"><a href=\"#this指向\" class=\"headerlink\" title=\"this指向\"></a>this指向</h2><ul>\n<li>默认情况:this指向window（严格模式下为undefined）</li>\n<li>对象绑定:作为对象的方法调用时，this指向该对象</li>\n<li>方法改变: call,apply,bind改变this</li>\n<li>new 绑定： this 指向新创建的实例对象。</li>\n<li>箭头函数： 箭头函数中的 this 绑定是词法上的，指向外层作用域的 this 值，而不是被调用时的上下文对象。<br>  <font color=red>注：</font> 箭头函数无法通过call，apply，bind改变。</li>\n</ul>\n<h2 id=\"new实例化\"><a href=\"#new实例化\" class=\"headerlink\" title=\"new实例化\"></a>new实例化</h2><ul>\n<li>创建一个空对象</li>\n<li>将对象的原型设置为函数的peototype属性</li>\n<li>将函数的this指向这个对象，执行构造函数的代码，给对象添加属性</li>\n<li>判断函数的返回类型，如果是值类型，则返回这个对象，如果是引用类型，则返回引用类型</li>\n</ul>\n<h2 id=\"原型-amp-amp-原型链\"><a href=\"#原型-amp-amp-原型链\" class=\"headerlink\" title=\"原型&amp;&amp;原型链\"></a>原型&amp;&amp;原型链</h2><h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a>原型</h3><pre><code>- 在 JavaScript 中，每个对象都有一个原型（prototype）属性，它指向另一个对象，这个对象就是该对象的原型。原型对象可以包含共享的属性和方法，可以被对象实例共享和访问。\n</code></pre>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><pre><code>- 函数的原型链对象constructor默认指向函数本身，原型对象除了有原型属性外，为了实现继承，还有一个原型链指针__proto__,该指针是指向上一层的原型对象，而上一层的原型对象的结构依然类似。因此可以利用__proto__一直指向Object的原型对象上，而Object原型对象用Object.prototype.__ proto__ = null表示原型链顶端。如此形成了js的原型链继承。同时所有的js对象都有Object的基本防范\n</code></pre>\n<p>  <font color=#00FFFF>例：</font><br>    <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在 Person 构造函数的原型对象上定义一个方法</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">sayHello</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello, my name is <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>!`</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个对象实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> john = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;John&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用对象实例的方法</span></span><br><span class=\"line\">john.<span class=\"title function_\">sayHello</span>(); <span class=\"comment\">// 输出 &quot;Hello, my name is John!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 隐式访问原型对象上的属性</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(john.<span class=\"title function_\">toString</span>()); <span class=\"comment\">// 输出 &quot;[object Object]&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 原型链继承关系</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(john.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// 输出 true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span> === <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>); <span class=\"comment\">// 输出 true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">__proto__</span>); <span class=\"comment\">// 输出 null</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"事件循环\"><a href=\"#事件循环\" class=\"headerlink\" title=\"事件循环\"></a>事件循环</h2><pre><code>- 事件循环（Event Loop）是 JavaScript 中处理异步操作的一种机制。它负责协调和执行 JavaScript 代码，使得异步任务能够按照特定的顺序和时机执行。\n- JavaScript 是单线程的，意味着一次只能执行一个任务。但是在实际开发中，经常会遇到需要执行异步操作的情况，比如网络请求、定时器、事件监听等。为了处理这些异步操作，JavaScript 引入了事件循环机制。\n</code></pre>\n<h3 id=\"事件循环机制的主要组成部分包括以下几个要素\"><a href=\"#事件循环机制的主要组成部分包括以下几个要素\" class=\"headerlink\" title=\"事件循环机制的主要组成部分包括以下几个要素\"></a>事件循环机制的主要组成部分包括以下几个要素</h3><pre><code>- 调用栈（Call Stack）：用于存储执行上下文的栈结构，用来跟踪代码的执行位置。\n- 任务队列（Task Queue）：用于存储异步任务的队列，比如网络请求回调、定时器回调等。\n- 事件循环（Event Loop）：负责监听调用栈和任务队列，当调用栈为空时，从任务队列中取出任务并推入调用栈执行。\n</code></pre>\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><pre><code>- 代码从上到下依次执行，遇到异步任务时，将其推入任务队列而不会阻塞代码的执行。\n- 当调用栈为空时，事件循环会检查任务队列。\n- 如果任务队列中有任务，则选择其中最早进入队列的任务，将其推入调用栈执行。\n- 执行任务时，可能会产生新的异步任务，将其推入任务队列。\n- 重复步骤 2-4，直到任务队列为空。\n</code></pre>\n<ul>\n<li>事件循环中有宏任务和微任务的区分</li>\n</ul>\n<h3 id=\"宏任务\"><a href=\"#宏任务\" class=\"headerlink\" title=\"宏任务\"></a>宏任务</h3><pre><code>- 整体代码块（Script）：整个脚本代码作为一个宏任务执行。\n- setTimeout 和 setInterval：定时器任务。\n- I/O 操作：包括文件读写、网络请求等异步 I/O 操作。\n- UI 渲染：更新页面布局、样式等操作。\n- requestAnimationFrame：用于实现动画效果的定时器。\n- 事件监听器回调：如点击事件、键盘事件等。\n</code></pre>\n<h3 id=\"微任务\"><a href=\"#微任务\" class=\"headerlink\" title=\"微任务\"></a>微任务</h3><pre><code>- Promise 回调：在 Promise 的状态改变时执行的回调函数。\n- MutationObserver 回调：监测 DOM 变化时执行的回调函数。\n- process.nextTick（Node.js 环境）：在当前操作结束后立即执行的回调函数。\n</code></pre>\n<p>  <font color=red>注：事件循环</font>的执行过程中，宏任务的优先级高于微任务。<br>  <font color=red>注：任务队列</font>的执行过程中，微任务的优先级高于宏任务。<br>  <font color=#00FFFF>例：</font><br>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">delay</span>(<span class=\"params\">ms</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(resolve, ms));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">syncCode</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">asyncCode</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">execute</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"title function_\">syncCode</span>();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">asyncCode</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">5</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">execute</span>()</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">8</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">9</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;!-- 代码执行顺序的解释如下：</span><br><span class=\"line\"></span><br><span class=\"line\">  首先执行 <span class=\"title function_\">syncCode</span>() 函数，输出 <span class=\"number\">1</span>。</span><br><span class=\"line\">  使用 <span class=\"keyword\">await</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>) 实现一个 <span class=\"number\">1</span> 秒的延迟。</span><br><span class=\"line\">  输出 <span class=\"number\">3</span>。</span><br><span class=\"line\">  执行 <span class=\"title function_\">asyncCode</span>() 函数，其中包含一个 <span class=\"number\">1</span> 秒的延迟，在延迟结束后输出 <span class=\"number\">2</span>。</span><br><span class=\"line\">  输出 <span class=\"number\">4</span>。</span><br><span class=\"line\">  使用 <span class=\"keyword\">await</span> <span class=\"title function_\">delay</span>(<span class=\"number\">1000</span>) 实现一个 <span class=\"number\">1</span> 秒的延迟。</span><br><span class=\"line\">  输出 <span class=\"number\">5</span>。</span><br><span class=\"line\">  使用 <span class=\"title class_\">Promise</span> 的 then 方法进行连续的延时操作，分别输出 <span class=\"number\">6</span>、<span class=\"number\">7</span>、<span class=\"number\">8</span>。</span><br><span class=\"line\">  最后使用 then 方法输出 <span class=\"number\">9</span>。 --&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"防抖-amp-amp-节流\"><a href=\"#防抖-amp-amp-节流\" class=\"headerlink\" title=\"防抖&amp;&amp;节流\"></a>防抖&amp;&amp;节流</h2><h3 id=\"防抖\"><a href=\"#防抖\" class=\"headerlink\" title=\"防抖\"></a>防抖</h3><ul>\n<li>在事件触发后等待一段时间，如果在这段时间内没有再次触发该事件，才执行对应的操作。如果在等待时间内又触发了该事件，就重新开始计时。<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">debounce</span>(<span class=\"params\">func, delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timer);</span><br><span class=\"line\">    timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      func.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> debouncedFunction = <span class=\"title function_\">debounce</span>(myFunction, <span class=\"number\">300</span>);</span><br><span class=\"line\">element.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;input&#x27;</span>, debouncedFunction);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"节流\"><a href=\"#节流\" class=\"headerlink\" title=\"节流\"></a>节流</h3><ul>\n<li>控制事件的触发频率，保证一定时间内只触发一次该事件。在设定的时间间隔内，不管事件触发了多少次，只有一次事件处理函数执行。<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">throttle</span>(<span class=\"params\">func, delay</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timer;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!timer) &#123;</span><br><span class=\"line\">      timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        func.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">        timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;, delay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用示例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> throttledFunction = <span class=\"title function_\">throttle</span>(myFunction, <span class=\"number\">300</span>);</span><br><span class=\"line\">element.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;scroll&#x27;</span>, throttledFunction);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><pre><code>- Promise 是 JavaScript 中用于处理异步操作的一种机制。它可以避免回调地狱的问题，并提供了一种更优雅的方式来处理异步代码。\n- 它可以有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。\n- 状态只可以改变一次（ pending ==&gt; fulfilled ||  pending ==&gt; rejected ）\n- 可以通过.then()链式调用,每个 .then() 方法都返回一个新的 Promise 对象;\n- .then() 方法来注册操作成功时的处理函数，使用 .catch() 方法来注册操作失败时的处理函数。\n</code></pre>\n<p>  基本语法 <font color=#00FFFF>例：</font><br>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 异步操作</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果操作成功，调用 resolve(value)</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果操作失败，调用 reject(error)</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">promise</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理操作成功的结果</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 处理操作失败的结果</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><pre><code>#### Promise.resolve\n  - Promise.resolve(value)：返回一个以给定值解析后的 Promise 对象。如果传入的值本身就是一个 Promise，则直接返回该 Promise。\n  &lt;font color=#00FFFF&gt;例：&lt;/font&gt;\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">42</span>);</span><br><span class=\"line\">promise.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value); <span class=\"comment\">// 输出 42</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n#### Promise.reject\n  - Promise.reject(reason)：返回一个带有指定拒绝原因的 Promise 对象。\n  &lt;font color=#00FFFF&gt;例：&lt;/font&gt;\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promise = <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&#x27;Something went wrong&#x27;</span>));</span><br><span class=\"line\">promise.<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error); <span class=\"comment\">// 输出错误信息：Something went wrong</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n#### Promise.all\n  - Promise.all(iterable)：接收一个可迭代对象（如数组或类数组对象），并返回一个 Promise 对象。\n  - 该 Promise 对象在所有输入的 Promise 都已成功解析后才会解析，返回一个包含所有 Promise 结果的数组。\n  - 如果其中任何一个 Promise 被拒绝，则返回的 Promise 会立即被拒绝。\n  &lt;font color=#00FFFF&gt;例：&lt;/font&gt;\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promises = [</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>),</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>),</span><br><span class=\"line\">  <span class=\"title class_\">Promise</span>.<span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">all</span>(promises)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">results</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(results); <span class=\"comment\">// 输出 [1, 2, 3]</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n#### Promise.race\n  - Promise.race(iterable)：接收一个可迭代对象，返回一个 Promise 对象。\n  - 该 Promise 对象将与第一个解析或拒绝的 Promise 对象具有相同的结果。\n  &lt;font color=#00FFFF&gt;例：&lt;/font&gt;\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> promises = [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>), <span class=\"number\">100</span>)),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>), <span class=\"number\">200</span>)),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"number\">3</span>), <span class=\"number\">300</span>))</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"title function_\">race</span>(promises)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result); <span class=\"comment\">// 输出 1（第一个解析的 Promise 结果）</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">catch</span>(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"手写实现Promise-all\"><a href=\"#手写实现Promise-all\" class=\"headerlink\" title=\"手写实现Promise.all\"></a>手写实现Promise.all</h3>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myPromiseAll</span>(<span class=\"params\">promises</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> results = [];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> resolvedCount = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; promises.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      promises[i]</span><br><span class=\"line\">        .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> &#123;</span><br><span class=\"line\">          results[i] = result;</span><br><span class=\"line\">          resolvedCount++;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (resolvedCount === promises.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(results);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .<span class=\"title function_\">catch</span>(reject);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件委托（事件代理）\"><a href=\"#事件委托（事件代理）\" class=\"headerlink\" title=\"事件委托（事件代理）\"></a>事件委托（事件代理）</h2><ul>\n<li>JavaScript 中的事件委托（事件代理）是一种常见的事件处理技术，它通过将事件绑定到一个父元素上，利用事件冒泡的特性，在父元素上统一处理子元素的事件。</li>\n</ul>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><pre><code>- 减少内存消耗：只需要一个事件处理程序，而不是为每个子元素都创建一个处理程序，从而减少了内存消耗。\n- 动态绑定：对于后续添加的子元素，无需再次绑定事件，因为事件委托是基于事件冒泡的，新添加的元素也会受到委托的处理。\n- 简化代码：通过将事件处理程序绑定到父元素上，可以避免在多个子元素上编写重复的事件处理代码。\n</code></pre>\n<p>  <font color=#00FFFF>例：</font><br>  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;myList&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> list = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;myList&#x27;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  list.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\">event</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">if</span> (event.<span class=\"property\">target</span>.<span class=\"property\">nodeName</span> === <span class=\"string\">&#x27;LI&#x27;</span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 在点击的列表项上执行操作</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;Clicked item:&#x27;</span>, event.<span class=\"property\">target</span>.<span class=\"property\">textContent</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"什么是模块化开发，如何实现模块化开发\"><a href=\"#什么是模块化开发，如何实现模块化开发\" class=\"headerlink\" title=\"什么是模块化开发，如何实现模块化开发\"></a>什么是模块化开发，如何实现模块化开发</h2><ul>\n<li>模块化开发是一种软件开发的方法，旨在将代码划分为独立、可维护和可重用的模块。模块化开发有助于提高代码的可读性、可维护性和可测试性，并促进团队合作和代码复用。</li>\n</ul>\n<h3 id=\"命名空间模式\"><a href=\"#命名空间模式\" class=\"headerlink\" title=\"命名空间模式\"></a>命名空间模式</h3><ul>\n<li>使用对象来组织代码，将相关的函数、变量等放在命名空间对象下。这种方式通过避免全局命名冲突来实现模块化。<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 命名空间模式示例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myModule = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 模块内部的私有数据和函数</span></span><br><span class=\"line\">  <span class=\"attr\">privateData</span>: <span class=\"string\">&#x27;私有数据&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">privateFunction</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有函数实现</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 模块内部的公共接口</span></span><br><span class=\"line\">  <span class=\"attr\">publicFunction</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用私有函数和访问私有数据</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"立即执行函数表达式\"><a href=\"#立即执行函数表达式\" class=\"headerlink\" title=\"立即执行函数表达式\"></a>立即执行函数表达式</h3><ul>\n<li>使用匿名函数创建一个独立的作用域，并立即执行该函数，从而创建模块化的代码。  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IIFE 模块化示例</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myModule = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 模块内部的私有数据和函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> privateData = <span class=\"string\">&#x27;私有数据&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">privateFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 私有函数实现</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 模块内部的公共接口</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">publicFunction</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 调用私有函数和访问私有数据</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"CommonJS-模块规范\"><a href=\"#CommonJS-模块规范\" class=\"headerlink\" title=\"CommonJS 模块规范\"></a>CommonJS 模块规范</h3><ul>\n<li>在服务器端使用广泛的模块化规范，通过 module.exports 导出模块，通过 require 引入模块。  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模块导出</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 模块的公共接口</span></span><br><span class=\"line\">  <span class=\"attr\">publicFunction</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 实现代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模块引入</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> myModule = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;./myModule&#x27;</span>);</span><br><span class=\"line\">myModule.<span class=\"title function_\">publicFunction</span>();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"ES6-模块化\"><a href=\"#ES6-模块化\" class=\"headerlink\" title=\"ES6 模块化\"></a>ES6 模块化</h3><ul>\n<li>在现代 JavaScript 中，使用 import 和 export 关键字实现模块化。它是官方标准的模块化方案，广泛支持于现代浏览器和构建工具中。  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模块导出</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">publicFunction</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 实现代码</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 模块引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; publicFunction &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myModule&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">publicFunction</span>();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"es6模块化和CommonJS的区别\"><a href=\"#es6模块化和CommonJS的区别\" class=\"headerlink\" title=\"es6模块化和CommonJS的区别\"></a>es6模块化和CommonJS的区别</h2><ul>\n<li>语法差异<br>ES6 模块化使用 import 和 export 关键字来导入和导出模块。<br>CommonJS 使用 require 函数来导入模块，使用 module.exports 来导出模块。</li>\n<li>加载方式差异<br>ES6 模块化是静态加载的，也就是在代码静态分析阶段就可以确定模块的依赖关系，可以在编译时进行优化和静态分析。<br>CommonJS 是动态加载的，模块的加载和执行是在运行时进行的，无法在编译时进行优化。</li>\n<li>导入导出特性差异<br>ES6 模块化支持命名导入和导出，可以选择性地导入和导出模块中的特定成员。<br>CommonJS 模块化没有内置的命名导入和导出机制，导入的是整个模块对象，可以通过对象属性来访问导出的成员。</li>\n<li>作用域差异<br>ES6 模块化在导入的模块中，顶层的 import 和 export 声明是静态的，模块内部的变量不会污染全局作用域。<br>CommonJS 在导入的模块中，整个模块的内容被加载到一个对象中，模块内部的变量和函数都可以被其他模块访问到。</li>\n<li>运行环境差异<br>ES6 模块化主要用于浏览器环境，也可以通过构建工具（如Webpack、Rollup）在 Node.js 环境中使用。<br>CommonJS 主要用于 Node.js 环境，也可以通过使用转换工具（如Babel）将其转换为浏览器可用的模块。</li>\n</ul>\n<h2 id=\"如何操作DOM，常见的操作DOM方式有哪些\"><a href=\"#如何操作DOM，常见的操作DOM方式有哪些\" class=\"headerlink\" title=\"如何操作DOM，常见的操作DOM方式有哪些\"></a>如何操作DOM，常见的操作DOM方式有哪些</h2><ul>\n<li>通过 ID 选择元素<ul>\n<li>document.getElementById(id): 返回指定 ID 的元素。</li>\n</ul>\n</li>\n<li>通过选择器选择元素<ul>\n<li>document.querySelector(selector): 返回匹配 CSS 选择器的第一个元素。</li>\n<li>document.querySelectorAll(selector): 返回匹配 CSS 选择器的所有元素的 NodeList。</li>\n</ul>\n</li>\n<li>通过标签名选择元素<ul>\n<li>document.getElementsByTagName(tagName): 返回指定标签名的元素集合。</li>\n</ul>\n</li>\n<li>通过类名选择元素<ul>\n<li>document.getElementsByClassName(className): 返回指定类名的元素集合。</li>\n</ul>\n</li>\n<li>创建元素<ul>\n<li>document.createElement(tagName): 创建一个具有指定标签名的元素节点。</li>\n</ul>\n</li>\n<li>修改元素内容和属性<ul>\n<li>element.textContent: 设置或获取元素的文本内容。</li>\n<li>element.innerHTML: 设置或获取元素的 HTML 内容。</li>\n<li>element.setAttribute(name, value): 设置元素的属性。</li>\n<li>element.getAttribute(name): 获取元素的属性值。</li>\n<li>element.style.property &#x3D; value: 设置元素的 CSS 样式。</li>\n</ul>\n</li>\n<li>添加，移除和替换元素<ul>\n<li>element.appendChild(newChild): 在元素的子节点列表末尾添加一个新的子节点。</li>\n<li>element.removeChild(child): 从元素的子节点列表中移除指定的子节点。</li>\n<li>element.replaceChild(newChild, oldChild): 替换元素的指定子节点。</li>\n</ul>\n</li>\n<li>添加和移除事件监听器<ul>\n<li>element.addEventListener(event, listener): 添加事件监听器</li>\n<li>element.removeEventListener(event, listener): 移除事件监听器。</li>\n</ul>\n</li>\n<li>修改元素的样式类<ul>\n<li>element.classList.add(className): 添加类名。</li>\n<li>element.classList.remove(className): 移除类名。</li>\n<li>element.classList.toggle(className): 切换类名的状态。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"变量提升\"><a href=\"#变量提升\" class=\"headerlink\" title=\"变量提升\"></a>变量提升</h2><ul>\n<li>在 JavaScript 中，变量提升（Hoisting）是一种特性，它指的是在代码执行之前，JavaScript 引擎会将变量和函数的声明提升到当前作用域的顶部。</li>\n<li>声明提升<ul>\n<li>在代码执行之前，JavaScript 引擎会扫描当前作用域内的变量声明，并将其提升到作用域顶部。</li>\n<li>可以在变量声明之前使用变量。</li>\n</ul>\n</li>\n<li>函数提升<ul>\n<li>与变量提升类似，JavaScript 引擎还会将函数的声明提升到作用域的顶部</li>\n<li>可以在函数声明之前调用函数。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"for-in和for-of的区别\"><a href=\"#for-in和for-of的区别\" class=\"headerlink\" title=\"for in和for of的区别\"></a>for in和for of的区别</h2><ul>\n<li>迭代的对象类型<ul>\n<li>for…in 循环用于迭代对象的属性，包括对象自身的可枚举属性以及继承的可枚举属性。</li>\n<li>for…of 循环用于迭代可迭代对象（如数组、字符串、Set、Map 等）的元素值。</li>\n</ul>\n</li>\n<li>迭代的顺序<ul>\n<li>for…in 循环的迭代顺序是不确定的，因为对象的属性没有固定的顺序。</li>\n<li>for…of 循环的迭代顺序是按照可迭代对象的迭代器定义的顺序进行迭代。</li>\n</ul>\n</li>\n<li>迭代变量的类型<ul>\n<li>for…in 循环中的迭代变量是字符串类型，表示对象的属性名。</li>\n<li>for…of 循环中的迭代变量可以是任意类型，表示可迭代对象中的元素值。</li>\n</ul>\n</li>\n<li>可迭代对象的要求<ul>\n<li>for…in 循环适用于任何对象，可以用于迭代普通对象的属性。</li>\n<li>for…of 循环要求迭代的对象实现了迭代器（Iterator）接口，即具有一个 Symbol.iterator 方法。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数组方法\"><a href=\"#数组方法\" class=\"headerlink\" title=\"数组方法\"></a>数组方法</h2><h3 id=\"改变原数组\"><a href=\"#改变原数组\" class=\"headerlink\" title=\"改变原数组\"></a>改变原数组</h3><pre><code>- push()：向数组末尾添加一个或多个元素，并返回新数组的长度。\n- pop()：从数组末尾移除最后一个元素，并返回被移除的元素。\n- unshift()：向数组开头添加一个或多个元素，并返回新数组的长度。\n- shift()：从数组开头移除第一个元素，并返回被移除的元素。\n- splice()：从数组中添加、删除或替换元素。\n- reverse()：颠倒数组中元素的顺序。\n- sort()：对数组元素进行排序。\n- fill()：替换值和起始索引位置（可选）。替换值指定要替换的固定值，起始索引位置指定开始替换的位置，默认为 0。\n</code></pre>\n<h3 id=\"不改变原数组\"><a href=\"#不改变原数组\" class=\"headerlink\" title=\"不改变原数组\"></a>不改变原数组</h3><pre><code>- concat()：将两个或多个数组合并为一个新数组。\n- join()：将数组中的所有元素连接成一个字符串，并返回该字符串。\n- slice()：返回数组的指定部分（浅拷贝）。\n- indexOf()：返回指定元素在数组中的第一个匹配位置的索引。\n- lastIndexOf()：返回指定元素在数组中最后一个匹配位置的索引。\n- forEach()：对数组中的每个元素执行指定的函数。\n- map()：对数组中的每个元素执行指定的函数，并返回一个新数组。\n- filter()：根据指定的条件过滤数组中的元素，并返回一个新数组。\n- reduce()：对数组中的元素执行累加器函数，返回一个累计值。\n- every()：检查数组中的每个元素是否满足指定条件。\n- some()：检查数组中是否至少有一个元素满足指定条件。\n- find()：返回数组中满足指定条件的第一个元素。\n- findIndex()：返回数组中满足指定条件的第一个元素的索引。\n</code></pre>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><ul>\n<li>使用 Set  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> uniqueArr = [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr)];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(uniqueArr); <span class=\"comment\">// 输出 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li>\n<li>使用 filter() 和 indexOf()  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> uniqueArr = arr.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> array.<span class=\"title function_\">indexOf</span>(value) === index);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(uniqueArr); <span class=\"comment\">// 输出 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li>\n<li>使用 reduce() 和 includes()：  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> uniqueArr = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">result, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!result.<span class=\"title function_\">includes</span>(value)) &#123;</span><br><span class=\"line\">    result.<span class=\"title function_\">push</span>(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;, []);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(uniqueArr); <span class=\"comment\">// 输出 [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"数组扁平化\"><a href=\"#数组扁平化\" class=\"headerlink\" title=\"数组扁平化\"></a>数组扁平化</h3><pre><code>- 递归\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">flattenArray</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> flattened = [];</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(item)) &#123;</span><br><span class=\"line\">      flattened = flattened.<span class=\"title function_\">concat</span>(<span class=\"title function_\">flattenArray</span>(item));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      flattened.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> flattened;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nestedArray = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>], <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> flattenedArray = <span class=\"title function_\">flattenArray</span>(nestedArray);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(flattenedArray); <span class=\"comment\">// 输出 [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n- Array.prototype.flat()\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nestedArray = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>], <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> flattenedArray = nestedArray.<span class=\"title function_\">flat</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(flattenedArray); <span class=\"comment\">// 输出 [1, 2, [3, 4], 5, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nestedArray = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>], <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> flattenedArray = nestedArray.<span class=\"title function_\">flat</span>(<span class=\"number\">2</span>); <span class=\"comment\">// 指定扁平化层数为 2</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(flattenedArray); <span class=\"comment\">// 输出 [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n- 扩展运算符+递归\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">flattenArray</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">result, item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(item)) &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(...<span class=\"title function_\">flattenArray</span>(item));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> nestedArray = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>], <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> flattenedArray = <span class=\"title function_\">flattenArray</span>(nestedArray);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(flattenedArray); <span class=\"comment\">// 输出 [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure>\n</code></pre>\n"},{"title":"only office 相关参数设置说明","cover":"/img/post-onlyoffice.jpg","_content":"\n```javaScript\nfunction initDoc(key, url, fileType, title, model, callbackUrl) {\n                let config = {\n                    \"document\": {\n                        \"documentType\": \"text\",\n                        \"width\": \"100%\", //打开窗口宽度\n                        \"height\": \"100%\", //打开窗口高度\n                        \"fileType\": fileType, //文档类型\n                        \"key\": key, //定义用于服务识别文档的唯一文档标识符。每次编辑和保存文档时，都必须重新生成密钥。长度限制为128个符号。\n                        \"title\": title, //为查看或编辑的文档定义所需的文件名，该文件名也将在下载文档时用作文件名。长度限制为128个符号。\n                        \"url\": url, //定义存储原始查看或编辑的文档的绝对URL\n                        \"info\": {\n                            \"owner\": \"王重阳\", //文件创建者名称\n                            \"sharingSettings\": [ //文件对应用户的操作权限配置\n                                {\n                                    \"permissions\": \"Full Access\", // 完全操作权限-Full Access,只读权限-Read Only 拒绝访问-Deny Access\n                                    \"user\": \"林朝英\" //有次权限的用户\n                                },\n                                {\n                                    \"permissions\": \"Read Only\",\n                                    \"user\": \"周伯通\"\n                                },\n                            ],\n                            \"uploaded\": \"2010-07-07 3:46 PM\" //文件创建时间\n                        },\n                        //文档权限参数\n                        \"permissions\": {\n                            \"edit\": true, //（文件是否可以编辑，false时文件不可编辑）\n                            \"fillForms\": true, //定义是否能在文档中填充表单\n                            \"print\": true, //定义文档是否能打印\n                            \"review\": false, //第一是否显示审阅文档菜单\n                            \"comment\": true, //定义是否可以注释文档。如果注释权限设置为“ true”，则文档侧栏将包含“注释”菜单选项；只有将mode参数设置为edit时才生效，默认值与edit参数的值一致。\n                            \"copy\": true, //是否允许您将内容复制到剪贴板。默认值为true。\n                            \"download\": true, //定义是否可以下载文档或仅在线查看或编辑文档。如果下载权限设置为“false”下载为菜单选项将没有。默认值为true。\n                            \"modifyContentControl\": true, //定义是否可以更改内容控件设置。仅当mode参数设置为edit时，内容控件修改才可用于文档编辑器。默认值为true。\n                            \"modifyFilter\": true, //定义过滤器是否可以全局应用（true）影响所有其他用户，或局部应用（false），即仅适用于当前用户。如果将mode参数设置为edit，则过滤器修改仅对电子表格编辑器可用。默认值为true。\n                        }\n                    },\n                    // type: \"embedded\",\n                    //打开文档类型\n                    // text对应各种文档类型(.doc, .docm, .docx, .dot, .dotm, .dotx, .epub, .fodt, .htm, .html, .mht, .odt, .ott, .pdf, .rtf, .txt, .djvu, .xps)\n                    //spreadsheet对应表格类型(.csv, .fods, .ods, .ots, .xls, .xlsm, .xlsx, .xlt, .xltm, .xltx)\n                    //presentation对应PPT类型(.fodp, .odp, .otp, .pot, .potm, .potx, .pps, .ppsm, .ppsx, .ppt, .pptm, .pptx)\n                    \"editorConfig\": { //编辑配置\n                        \"createUrl\": \"http://docServer:port/url-to-create-document/\", //指定创建文件的页面,添加该配置后文档服务器插件才会显示新建文件按钮\n                        \"mode\": model, //文档操作模式 view 视图模式不可编辑  edit 编辑模式可编辑文档\n                        \"callbackUrl\": callbackUrl, //保存文件时的回调地址\n                        \"lang\": \"zh-CN\", //语言环境\n                        \"customization\": { //定制部分允许自定义编辑器界面，使其看起来像您的其他产品，并更改是否存在其他按钮，链接，更改徽标和编辑者所有者详细信息。\n                            \"help\": false, //定义是显示还是隐藏“帮助”菜单按钮。默认值为true。\n                            \"hideRightMenu\": false, //定义在第一次加载时是显示还是隐藏右侧菜单。默认值为false。\n                            \"autosave\": false, //定义是启用还是禁用“自动保存”菜单选项。请注意，如果您在菜单中更改此选项，它将被保存到浏览器的localStorage中。默认值为true。\n                            \"forcesave\": true, //定义保存按钮是否显示默认false\n                            \"chat\": false, //定义“聊天”菜单按钮是显示还是隐藏；请注意，如果您隐藏“聊天”按钮，则相应的聊天功能也将被禁用。默认值为true。\n                            \"commentAuthorOnly\": false, //定义用户是否只能编辑和删除他的评论。默认值为false。\n                            \"comments\": false, //定义是显示还是隐藏“注释”菜单按钮；请注意，如果您隐藏“评论”按钮，则相应的评论功能将仅可用于查看，评论的添加和编辑将不可用。默认值为true。\n                            \"compactHeader\": false, //定义是否将菜单栏放在在徽标旁边使界面更加紧凑默认false。\n                            \"compactToolbar\": false, //定义显示的顶部工具栏类型是完整（false）还是紧凑true。默认值为false 多余菜单将在右侧折叠点击显示。\n                            \"compatibleFeatures\": false, //定义仅与OOXML格式兼容的功能的使用。例如，不要在整个文档上使用注释。默认值为false。\n                            \"macros\": false, //定义是否将运行文档宏以及可用的宏设置。默认值为true。\n                            \"macrosMode\": \"warn\", //定义是否将运行文档宏。可以采用以下值： disable -根本不运行；enable -自动运行所有宏；warn -警告宏并请求允许运行。默认值为original。\n                            \"plugins\": false, //定义是否将启动插件并可用。默认值为true。\n                            \"showReviewChanges\": false, //定义在加载编辑器时是否自动显示或隐藏审阅更改面板。默认值为false。\n                            \"spellcheck\": false, //定义在加载编辑器时是否自动打开或关闭拼写检查器。拼写检查器仅适用于文档编辑器和演示文稿编辑器。默认值为true。\n                            \"toolbarNoTabs\": false, //定义是突出显示顶部工具栏选项卡样式。默认值为false。\n                            \"unit\": \"cm\", //定义在标尺和对话框中使用的度量单位。可以采用以下值：cm -厘米，pt-点，inch -英寸。默认值为厘米（cm）。\n                            \"zoom\": 100, //定义以百分比为单位的文档显示缩放值。可以取大于0的值。对于文本文档和演示文稿，可以将此参数设置为-1（使文档适合页面选项）或-2（使文档页面宽度适合编辑器页面）。默认值为100。\n                            \"customer\": { //关于 文档编辑器的显示信息\n                                \"address\": \"My City, 123a-45\", //有权访问编辑或编辑作者的公司或个人的邮政地址，\n                                \"info\": \"Some additional information\", //有关您希望其他人认识的公司或个人的一些其他信息，\n                                \"logo\": \"https://example.com/logo-big.png\", //图片徽标的路径（此文件没有特别建议，但是如果使用透明背景的.png格式会更好）。图片必须具有以下尺寸：432x70，\n                                \"mail\": \"john@example.com\", //有权访问编辑者或编辑者的公司或个人的电子邮件地址\n                                \"name\": \"欧阳锋\", //该公司或个人的谁可以访问编辑或编辑作者，名称\n                                \"www\": \"example.com\" //以上公司或个人的家庭网站地址，\n                            },\n                            \"feedback\": { //反馈配置信息\n                                \"url\": \"https://example.com\", //单击“反馈和支持”菜单按钮时将打开的网站地址的绝对URL ，\n                                \"visible\": false //显示或隐藏“反馈和支持”菜单按钮，\n                            },\n                            \"goback\": { //定义“打开文件位置”菜单按钮和右上角按钮的设置。该对象具有以下参数：\n                                \"blank\": true, //在新的浏览器选项卡/窗口（如果值设置为true）或当前选项卡（如果值设置为false）中打开网站。默认值为true，\n                                \"requestClose\": false, //定义如果单击“打开文件位置”按钮，则调用events.onRequestClose事件，而不是打开浏览器选项卡或窗口。默认值为false，\n                                \"text\": \"Open file location\", //将在“打开文件位置”菜单按钮和右上角按钮（即，而不是“转到文档”）上显示的文本，\n                                \"url\": \"https://example.com\" //单击“打开文件位置”菜单按钮时将打开的网站地址的绝对URL ，\n                            },\n                            \"logo\": {\n                                \"image\": \"https://example.com/logo.png\", //图像文件的路径，用于在普通工作模式下显示（即，在所有编辑器的查看和编辑模式下）。图片必须具有以下尺寸：172x40，\n                                \"imageEmbedded\": \"https://example.com/logo_em.png\", //用于以嵌入式模式显示的图像文件的路径（请参阅config部分以了解如何定义嵌入式文档类型）。图片必须具有以下尺寸：248x40，\n                                \"url\": \"https://www.baidu.com\" //某人单击徽标图像时将使用的绝对URL（可用于转到您的网站等）。保留为空字符串或null以使徽标不可单击，\n                            },\n                        },\n                        \"user\": { //用户信息\n                            \"id\": \"admin\", //用户ID\n                            \"name\": \"操作员\" //用户全名称\n                        },\n                        \"embedded\": { //Embedded部分仅适用于嵌入式文档类型（请参阅config部分以了解如何定义嵌入式文档类型）。它允许更改设置，这些设置定义嵌入式模式下按钮的行为。\n                            \"embedUrl\": \"https://example.com/embedded?doc=exampledocument1.docx\", //定义文档的绝对URL，以作为嵌入到网页中的文档的源文件\n                            \"fullscreenUrl\": \"https://example.com/embedded?doc=exampledocument1.docx#fullscreen\", //定义将以全屏模式打开的文档的绝对URL。\n                            \"saveUrl\": \"https://example.com/download?doc=exampledocument1.docx\", //定义允许将文档保存到用户个人计算机上的绝对URL。\n                            \"shareUrl\": \"https://example.com/view?doc=exampledocument1.docx\", //定义允许其他用户共享此文档的绝对URL。\n                            \"toolbarDocked\": \"top\" //定义嵌入式查看器工具栏的位置，可以为top或bottom。\n                        }\n                    },\n\n                    \"events\": { //事件配置\n                        // onAppReady,//-将应用程序加载到浏览器时调用的函数。\n                        // onCollaborativeChanges //-当文档由其他用户在严格共同编辑模式下共同编辑时调用的函数。\n                        // onDocumentReady,//-将应用程序加载到浏览器时调用的函数。\n                        // onDocumentStateChange,//-修改文档时调用的函数。这就是所谓的使用参数：{真正的“数据”}在当前用户编辑文档以及与参数：{“数据”：假}在当前用户的更改发送到文档编辑服务。\n                        // onDownloadAs,//-调用downloadAs方法时，使用指向已编辑文件的绝对URL调用的函数。在data参数中发送要下载的文档的绝对URL 。\n                        // onError,//-发生错误或其他特定事件时调用的函数。错误消息在data参数中发送。\n                        // onInfo,//-应用程序打开文件时调用的函数。该模式在data.mode参数中发送。可以查看或编辑。\n                        // onMetaChange,//-通过meta命令更改文档的元信息时调用的函数。文档名称通过data.title参数发送。\n                        // onOutdatedVersion,//-使用旧的document.key值打开文档进行编辑时，显示错误后调用的函数，该值用于编辑先前的文档版本并已成功保存。调用此事件时，必须使用新的document.key重新初始化编辑器。\n                        // onReady,//-将应用程序加载到浏览器时调用的函数。自从5.0版本不推荐使用，请使用onAppReady代替\n                        // onRequestClose,//-结束编辑器的工作并且必须关闭编辑器时调用的函数。\n                        // onRequestCompareFile,//-用户尝试通过单击“存储中的文档”按钮来选择要比较的文档时调用的函数。要选择要比较的文档，必须调用setRevisedFile方法。如果未声明该方法，则不会显示“来自存储的文档”按钮。\n                        // onRequestCreateNew,//-用户尝试通过单击“新建”按钮来创建文档时调用的函数。使用此方法代替createUrl字段。如果未声明该方法且未指定createUrl，则将不会显示“创建新”按钮。\n                        // onRequestEditRights,//-用户尝试通过单击“编辑文档”按钮尝试将文档从视图切换到编辑模式时调用的函数。调用该函数时，必须在编辑模式下再次初始化编辑器。如果未声明该方法，则不会显示“编辑”按钮。\n                        // onRequestHistory,//-用户尝试通过单击“版本历史记录”按钮显示文档版本历史记录时调用的函数。要显示文档版本历史，您必须调用refreshHistory方法。如果未声明该方法和onRequestHistoryData方法，则不会显示“版本历史记录”按钮。\n                        // onRequestHistoryClose,//-当用户尝试通过单击“关闭历史记录”按钮来查看文档版本历史记录时，试图调用该文档时调用的函数。调用该函数时，必须在编辑模式下再次初始化编辑器。如果未声明该方法，则不会显示“关闭历史记录”按钮。\n                        // onRequestHistoryData,//-用户尝试单击文档版本历史记录中的特定文档版本时调用的函数。\n                        // onRequestInsertImage,//-用户尝试通过单击“保存图像”按钮插入图像时调用的函数。图像插入的类型在参数data.c中指定。\n                        // onRequestRename,//-用户尝试通过单击“重命名...”按钮重命名文件时调用的函数。\n                        // onRequestRestore,//-用户单击版本历史记录中的“还原”按钮来还原文件版本时调用的函数。\n                        // onRequestSaveAs,//-用户尝试通过单击“另存为...”按钮保存文件时调用的函数。文档的标题和要下载的文档的绝对URL在data参数中发送。如果未声明该方法，则不会显示“另存为...”按钮。\n                        // onRequestSharingSettings,//-用户单击“更改访问权限”按钮来管理文档访问权限时调用的函数。必须调用setSharingSettings方法来更新有关允许与其他用户共享文档的设置的信息。如果未声明该方法，则不会显示“更改访问权限”按钮。\n                        // onRequestUsers,//-评论者可以选择要在评论中提及的其他用户时调用的函数。要设置用户列表，必须调用setUsers方法。\n                        // onWarning,//-发生警告时调用的函数。警告消息在data参数中发送。\n                        // \"onDocumentStateChange\": function() {\n                        // }, //文档改变后的回调\n                        //\"onDocumentReady\" : onDocumentReady, //文档初始化准备好后的回调\n                    },\n                };\n                var docEditor = new DocsAPI.DocEditor(\"placeholder\", config);\n            }\n```\n\n转载至：https://blog.csdn.net/cyulotus/article/details/128404264\n","source":"_posts/only-office-01.md","raw":"---\ntitle: only office 相关参数设置说明\ncover: /img/post-onlyoffice.jpg\ncategories:\n  - 插件使用\n---\n\n```javaScript\nfunction initDoc(key, url, fileType, title, model, callbackUrl) {\n                let config = {\n                    \"document\": {\n                        \"documentType\": \"text\",\n                        \"width\": \"100%\", //打开窗口宽度\n                        \"height\": \"100%\", //打开窗口高度\n                        \"fileType\": fileType, //文档类型\n                        \"key\": key, //定义用于服务识别文档的唯一文档标识符。每次编辑和保存文档时，都必须重新生成密钥。长度限制为128个符号。\n                        \"title\": title, //为查看或编辑的文档定义所需的文件名，该文件名也将在下载文档时用作文件名。长度限制为128个符号。\n                        \"url\": url, //定义存储原始查看或编辑的文档的绝对URL\n                        \"info\": {\n                            \"owner\": \"王重阳\", //文件创建者名称\n                            \"sharingSettings\": [ //文件对应用户的操作权限配置\n                                {\n                                    \"permissions\": \"Full Access\", // 完全操作权限-Full Access,只读权限-Read Only 拒绝访问-Deny Access\n                                    \"user\": \"林朝英\" //有次权限的用户\n                                },\n                                {\n                                    \"permissions\": \"Read Only\",\n                                    \"user\": \"周伯通\"\n                                },\n                            ],\n                            \"uploaded\": \"2010-07-07 3:46 PM\" //文件创建时间\n                        },\n                        //文档权限参数\n                        \"permissions\": {\n                            \"edit\": true, //（文件是否可以编辑，false时文件不可编辑）\n                            \"fillForms\": true, //定义是否能在文档中填充表单\n                            \"print\": true, //定义文档是否能打印\n                            \"review\": false, //第一是否显示审阅文档菜单\n                            \"comment\": true, //定义是否可以注释文档。如果注释权限设置为“ true”，则文档侧栏将包含“注释”菜单选项；只有将mode参数设置为edit时才生效，默认值与edit参数的值一致。\n                            \"copy\": true, //是否允许您将内容复制到剪贴板。默认值为true。\n                            \"download\": true, //定义是否可以下载文档或仅在线查看或编辑文档。如果下载权限设置为“false”下载为菜单选项将没有。默认值为true。\n                            \"modifyContentControl\": true, //定义是否可以更改内容控件设置。仅当mode参数设置为edit时，内容控件修改才可用于文档编辑器。默认值为true。\n                            \"modifyFilter\": true, //定义过滤器是否可以全局应用（true）影响所有其他用户，或局部应用（false），即仅适用于当前用户。如果将mode参数设置为edit，则过滤器修改仅对电子表格编辑器可用。默认值为true。\n                        }\n                    },\n                    // type: \"embedded\",\n                    //打开文档类型\n                    // text对应各种文档类型(.doc, .docm, .docx, .dot, .dotm, .dotx, .epub, .fodt, .htm, .html, .mht, .odt, .ott, .pdf, .rtf, .txt, .djvu, .xps)\n                    //spreadsheet对应表格类型(.csv, .fods, .ods, .ots, .xls, .xlsm, .xlsx, .xlt, .xltm, .xltx)\n                    //presentation对应PPT类型(.fodp, .odp, .otp, .pot, .potm, .potx, .pps, .ppsm, .ppsx, .ppt, .pptm, .pptx)\n                    \"editorConfig\": { //编辑配置\n                        \"createUrl\": \"http://docServer:port/url-to-create-document/\", //指定创建文件的页面,添加该配置后文档服务器插件才会显示新建文件按钮\n                        \"mode\": model, //文档操作模式 view 视图模式不可编辑  edit 编辑模式可编辑文档\n                        \"callbackUrl\": callbackUrl, //保存文件时的回调地址\n                        \"lang\": \"zh-CN\", //语言环境\n                        \"customization\": { //定制部分允许自定义编辑器界面，使其看起来像您的其他产品，并更改是否存在其他按钮，链接，更改徽标和编辑者所有者详细信息。\n                            \"help\": false, //定义是显示还是隐藏“帮助”菜单按钮。默认值为true。\n                            \"hideRightMenu\": false, //定义在第一次加载时是显示还是隐藏右侧菜单。默认值为false。\n                            \"autosave\": false, //定义是启用还是禁用“自动保存”菜单选项。请注意，如果您在菜单中更改此选项，它将被保存到浏览器的localStorage中。默认值为true。\n                            \"forcesave\": true, //定义保存按钮是否显示默认false\n                            \"chat\": false, //定义“聊天”菜单按钮是显示还是隐藏；请注意，如果您隐藏“聊天”按钮，则相应的聊天功能也将被禁用。默认值为true。\n                            \"commentAuthorOnly\": false, //定义用户是否只能编辑和删除他的评论。默认值为false。\n                            \"comments\": false, //定义是显示还是隐藏“注释”菜单按钮；请注意，如果您隐藏“评论”按钮，则相应的评论功能将仅可用于查看，评论的添加和编辑将不可用。默认值为true。\n                            \"compactHeader\": false, //定义是否将菜单栏放在在徽标旁边使界面更加紧凑默认false。\n                            \"compactToolbar\": false, //定义显示的顶部工具栏类型是完整（false）还是紧凑true。默认值为false 多余菜单将在右侧折叠点击显示。\n                            \"compatibleFeatures\": false, //定义仅与OOXML格式兼容的功能的使用。例如，不要在整个文档上使用注释。默认值为false。\n                            \"macros\": false, //定义是否将运行文档宏以及可用的宏设置。默认值为true。\n                            \"macrosMode\": \"warn\", //定义是否将运行文档宏。可以采用以下值： disable -根本不运行；enable -自动运行所有宏；warn -警告宏并请求允许运行。默认值为original。\n                            \"plugins\": false, //定义是否将启动插件并可用。默认值为true。\n                            \"showReviewChanges\": false, //定义在加载编辑器时是否自动显示或隐藏审阅更改面板。默认值为false。\n                            \"spellcheck\": false, //定义在加载编辑器时是否自动打开或关闭拼写检查器。拼写检查器仅适用于文档编辑器和演示文稿编辑器。默认值为true。\n                            \"toolbarNoTabs\": false, //定义是突出显示顶部工具栏选项卡样式。默认值为false。\n                            \"unit\": \"cm\", //定义在标尺和对话框中使用的度量单位。可以采用以下值：cm -厘米，pt-点，inch -英寸。默认值为厘米（cm）。\n                            \"zoom\": 100, //定义以百分比为单位的文档显示缩放值。可以取大于0的值。对于文本文档和演示文稿，可以将此参数设置为-1（使文档适合页面选项）或-2（使文档页面宽度适合编辑器页面）。默认值为100。\n                            \"customer\": { //关于 文档编辑器的显示信息\n                                \"address\": \"My City, 123a-45\", //有权访问编辑或编辑作者的公司或个人的邮政地址，\n                                \"info\": \"Some additional information\", //有关您希望其他人认识的公司或个人的一些其他信息，\n                                \"logo\": \"https://example.com/logo-big.png\", //图片徽标的路径（此文件没有特别建议，但是如果使用透明背景的.png格式会更好）。图片必须具有以下尺寸：432x70，\n                                \"mail\": \"john@example.com\", //有权访问编辑者或编辑者的公司或个人的电子邮件地址\n                                \"name\": \"欧阳锋\", //该公司或个人的谁可以访问编辑或编辑作者，名称\n                                \"www\": \"example.com\" //以上公司或个人的家庭网站地址，\n                            },\n                            \"feedback\": { //反馈配置信息\n                                \"url\": \"https://example.com\", //单击“反馈和支持”菜单按钮时将打开的网站地址的绝对URL ，\n                                \"visible\": false //显示或隐藏“反馈和支持”菜单按钮，\n                            },\n                            \"goback\": { //定义“打开文件位置”菜单按钮和右上角按钮的设置。该对象具有以下参数：\n                                \"blank\": true, //在新的浏览器选项卡/窗口（如果值设置为true）或当前选项卡（如果值设置为false）中打开网站。默认值为true，\n                                \"requestClose\": false, //定义如果单击“打开文件位置”按钮，则调用events.onRequestClose事件，而不是打开浏览器选项卡或窗口。默认值为false，\n                                \"text\": \"Open file location\", //将在“打开文件位置”菜单按钮和右上角按钮（即，而不是“转到文档”）上显示的文本，\n                                \"url\": \"https://example.com\" //单击“打开文件位置”菜单按钮时将打开的网站地址的绝对URL ，\n                            },\n                            \"logo\": {\n                                \"image\": \"https://example.com/logo.png\", //图像文件的路径，用于在普通工作模式下显示（即，在所有编辑器的查看和编辑模式下）。图片必须具有以下尺寸：172x40，\n                                \"imageEmbedded\": \"https://example.com/logo_em.png\", //用于以嵌入式模式显示的图像文件的路径（请参阅config部分以了解如何定义嵌入式文档类型）。图片必须具有以下尺寸：248x40，\n                                \"url\": \"https://www.baidu.com\" //某人单击徽标图像时将使用的绝对URL（可用于转到您的网站等）。保留为空字符串或null以使徽标不可单击，\n                            },\n                        },\n                        \"user\": { //用户信息\n                            \"id\": \"admin\", //用户ID\n                            \"name\": \"操作员\" //用户全名称\n                        },\n                        \"embedded\": { //Embedded部分仅适用于嵌入式文档类型（请参阅config部分以了解如何定义嵌入式文档类型）。它允许更改设置，这些设置定义嵌入式模式下按钮的行为。\n                            \"embedUrl\": \"https://example.com/embedded?doc=exampledocument1.docx\", //定义文档的绝对URL，以作为嵌入到网页中的文档的源文件\n                            \"fullscreenUrl\": \"https://example.com/embedded?doc=exampledocument1.docx#fullscreen\", //定义将以全屏模式打开的文档的绝对URL。\n                            \"saveUrl\": \"https://example.com/download?doc=exampledocument1.docx\", //定义允许将文档保存到用户个人计算机上的绝对URL。\n                            \"shareUrl\": \"https://example.com/view?doc=exampledocument1.docx\", //定义允许其他用户共享此文档的绝对URL。\n                            \"toolbarDocked\": \"top\" //定义嵌入式查看器工具栏的位置，可以为top或bottom。\n                        }\n                    },\n\n                    \"events\": { //事件配置\n                        // onAppReady,//-将应用程序加载到浏览器时调用的函数。\n                        // onCollaborativeChanges //-当文档由其他用户在严格共同编辑模式下共同编辑时调用的函数。\n                        // onDocumentReady,//-将应用程序加载到浏览器时调用的函数。\n                        // onDocumentStateChange,//-修改文档时调用的函数。这就是所谓的使用参数：{真正的“数据”}在当前用户编辑文档以及与参数：{“数据”：假}在当前用户的更改发送到文档编辑服务。\n                        // onDownloadAs,//-调用downloadAs方法时，使用指向已编辑文件的绝对URL调用的函数。在data参数中发送要下载的文档的绝对URL 。\n                        // onError,//-发生错误或其他特定事件时调用的函数。错误消息在data参数中发送。\n                        // onInfo,//-应用程序打开文件时调用的函数。该模式在data.mode参数中发送。可以查看或编辑。\n                        // onMetaChange,//-通过meta命令更改文档的元信息时调用的函数。文档名称通过data.title参数发送。\n                        // onOutdatedVersion,//-使用旧的document.key值打开文档进行编辑时，显示错误后调用的函数，该值用于编辑先前的文档版本并已成功保存。调用此事件时，必须使用新的document.key重新初始化编辑器。\n                        // onReady,//-将应用程序加载到浏览器时调用的函数。自从5.0版本不推荐使用，请使用onAppReady代替\n                        // onRequestClose,//-结束编辑器的工作并且必须关闭编辑器时调用的函数。\n                        // onRequestCompareFile,//-用户尝试通过单击“存储中的文档”按钮来选择要比较的文档时调用的函数。要选择要比较的文档，必须调用setRevisedFile方法。如果未声明该方法，则不会显示“来自存储的文档”按钮。\n                        // onRequestCreateNew,//-用户尝试通过单击“新建”按钮来创建文档时调用的函数。使用此方法代替createUrl字段。如果未声明该方法且未指定createUrl，则将不会显示“创建新”按钮。\n                        // onRequestEditRights,//-用户尝试通过单击“编辑文档”按钮尝试将文档从视图切换到编辑模式时调用的函数。调用该函数时，必须在编辑模式下再次初始化编辑器。如果未声明该方法，则不会显示“编辑”按钮。\n                        // onRequestHistory,//-用户尝试通过单击“版本历史记录”按钮显示文档版本历史记录时调用的函数。要显示文档版本历史，您必须调用refreshHistory方法。如果未声明该方法和onRequestHistoryData方法，则不会显示“版本历史记录”按钮。\n                        // onRequestHistoryClose,//-当用户尝试通过单击“关闭历史记录”按钮来查看文档版本历史记录时，试图调用该文档时调用的函数。调用该函数时，必须在编辑模式下再次初始化编辑器。如果未声明该方法，则不会显示“关闭历史记录”按钮。\n                        // onRequestHistoryData,//-用户尝试单击文档版本历史记录中的特定文档版本时调用的函数。\n                        // onRequestInsertImage,//-用户尝试通过单击“保存图像”按钮插入图像时调用的函数。图像插入的类型在参数data.c中指定。\n                        // onRequestRename,//-用户尝试通过单击“重命名...”按钮重命名文件时调用的函数。\n                        // onRequestRestore,//-用户单击版本历史记录中的“还原”按钮来还原文件版本时调用的函数。\n                        // onRequestSaveAs,//-用户尝试通过单击“另存为...”按钮保存文件时调用的函数。文档的标题和要下载的文档的绝对URL在data参数中发送。如果未声明该方法，则不会显示“另存为...”按钮。\n                        // onRequestSharingSettings,//-用户单击“更改访问权限”按钮来管理文档访问权限时调用的函数。必须调用setSharingSettings方法来更新有关允许与其他用户共享文档的设置的信息。如果未声明该方法，则不会显示“更改访问权限”按钮。\n                        // onRequestUsers,//-评论者可以选择要在评论中提及的其他用户时调用的函数。要设置用户列表，必须调用setUsers方法。\n                        // onWarning,//-发生警告时调用的函数。警告消息在data参数中发送。\n                        // \"onDocumentStateChange\": function() {\n                        // }, //文档改变后的回调\n                        //\"onDocumentReady\" : onDocumentReady, //文档初始化准备好后的回调\n                    },\n                };\n                var docEditor = new DocsAPI.DocEditor(\"placeholder\", config);\n            }\n```\n\n转载至：https://blog.csdn.net/cyulotus/article/details/128404264\n","slug":"only-office-01","published":1,"date":"2023-05-11T01:49:03.807Z","updated":"2023-06-02T06:50:48.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clijr0jcn000644vcb7orblmc","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initDoc</span>(<span class=\"params\">key, url, fileType, title, model, callbackUrl</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> config = &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;document&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;documentType&quot;</span>: <span class=\"string\">&quot;text&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;width&quot;</span>: <span class=\"string\">&quot;100%&quot;</span>, <span class=\"comment\">//打开窗口宽度</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;height&quot;</span>: <span class=\"string\">&quot;100%&quot;</span>, <span class=\"comment\">//打开窗口高度</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;fileType&quot;</span>: fileType, <span class=\"comment\">//文档类型</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;key&quot;</span>: key, <span class=\"comment\">//定义用于服务识别文档的唯一文档标识符。每次编辑和保存文档时，都必须重新生成密钥。长度限制为128个符号。</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;title&quot;</span>: title, <span class=\"comment\">//为查看或编辑的文档定义所需的文件名，该文件名也将在下载文档时用作文件名。长度限制为128个符号。</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;url&quot;</span>: url, <span class=\"comment\">//定义存储原始查看或编辑的文档的绝对URL</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;info&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;owner&quot;</span>: <span class=\"string\">&quot;王重阳&quot;</span>, <span class=\"comment\">//文件创建者名称</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;sharingSettings&quot;</span>: [ <span class=\"comment\">//文件对应用户的操作权限配置</span></span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    <span class=\"string\">&quot;permissions&quot;</span>: <span class=\"string\">&quot;Full Access&quot;</span>, <span class=\"comment\">// 完全操作权限-Full Access,只读权限-Read Only 拒绝访问-Deny Access</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">&quot;林朝英&quot;</span> <span class=\"comment\">//有次权限的用户</span></span><br><span class=\"line\">                                &#125;,</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    <span class=\"string\">&quot;permissions&quot;</span>: <span class=\"string\">&quot;Read Only&quot;</span>,</span><br><span class=\"line\">                                    <span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">&quot;周伯通&quot;</span></span><br><span class=\"line\">                                &#125;,</span><br><span class=\"line\">                            ],</span><br><span class=\"line\">                            <span class=\"string\">&quot;uploaded&quot;</span>: <span class=\"string\">&quot;2010-07-07 3:46 PM&quot;</span> <span class=\"comment\">//文件创建时间</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"comment\">//文档权限参数</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;permissions&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;edit&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//（文件是否可以编辑，false时文件不可编辑）</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;fillForms&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义是否能在文档中填充表单</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;print&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义文档是否能打印</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;review&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//第一是否显示审阅文档菜单</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;comment&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义是否可以注释文档。如果注释权限设置为“ true”，则文档侧栏将包含“注释”菜单选项；只有将mode参数设置为edit时才生效，默认值与edit参数的值一致。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;copy&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否允许您将内容复制到剪贴板。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;download&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义是否可以下载文档或仅在线查看或编辑文档。如果下载权限设置为“false”下载为菜单选项将没有。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;modifyContentControl&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义是否可以更改内容控件设置。仅当mode参数设置为edit时，内容控件修改才可用于文档编辑器。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;modifyFilter&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义过滤器是否可以全局应用（true）影响所有其他用户，或局部应用（false），即仅适用于当前用户。如果将mode参数设置为edit，则过滤器修改仅对电子表格编辑器可用。默认值为true。</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"comment\">// type: &quot;embedded&quot;,</span></span><br><span class=\"line\">                    <span class=\"comment\">//打开文档类型</span></span><br><span class=\"line\">                    <span class=\"comment\">// text对应各种文档类型(.doc, .docm, .docx, .dot, .dotm, .dotx, .epub, .fodt, .htm, .html, .mht, .odt, .ott, .pdf, .rtf, .txt, .djvu, .xps)</span></span><br><span class=\"line\">                    <span class=\"comment\">//spreadsheet对应表格类型(.csv, .fods, .ods, .ots, .xls, .xlsm, .xlsx, .xlt, .xltm, .xltx)</span></span><br><span class=\"line\">                    <span class=\"comment\">//presentation对应PPT类型(.fodp, .odp, .otp, .pot, .potm, .potx, .pps, .ppsm, .ppsx, .ppt, .pptm, .pptx)</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;editorConfig&quot;</span>: &#123; <span class=\"comment\">//编辑配置</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;createUrl&quot;</span>: <span class=\"string\">&quot;http://docServer:port/url-to-create-document/&quot;</span>, <span class=\"comment\">//指定创建文件的页面,添加该配置后文档服务器插件才会显示新建文件按钮</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;mode&quot;</span>: model, <span class=\"comment\">//文档操作模式 view 视图模式不可编辑  edit 编辑模式可编辑文档</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;callbackUrl&quot;</span>: callbackUrl, <span class=\"comment\">//保存文件时的回调地址</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;lang&quot;</span>: <span class=\"string\">&quot;zh-CN&quot;</span>, <span class=\"comment\">//语言环境</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;customization&quot;</span>: &#123; <span class=\"comment\">//定制部分允许自定义编辑器界面，使其看起来像您的其他产品，并更改是否存在其他按钮，链接，更改徽标和编辑者所有者详细信息。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;help&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是显示还是隐藏“帮助”菜单按钮。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;hideRightMenu&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义在第一次加载时是显示还是隐藏右侧菜单。默认值为false。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;autosave&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是启用还是禁用“自动保存”菜单选项。请注意，如果您在菜单中更改此选项，它将被保存到浏览器的localStorage中。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;forcesave&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义保存按钮是否显示默认false</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;chat&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义“聊天”菜单按钮是显示还是隐藏；请注意，如果您隐藏“聊天”按钮，则相应的聊天功能也将被禁用。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;commentAuthorOnly&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义用户是否只能编辑和删除他的评论。默认值为false。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;comments&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是显示还是隐藏“注释”菜单按钮；请注意，如果您隐藏“评论”按钮，则相应的评论功能将仅可用于查看，评论的添加和编辑将不可用。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;compactHeader&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是否将菜单栏放在在徽标旁边使界面更加紧凑默认false。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;compactToolbar&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义显示的顶部工具栏类型是完整（false）还是紧凑true。默认值为false 多余菜单将在右侧折叠点击显示。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;compatibleFeatures&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义仅与OOXML格式兼容的功能的使用。例如，不要在整个文档上使用注释。默认值为false。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;macros&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是否将运行文档宏以及可用的宏设置。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;macrosMode&quot;</span>: <span class=\"string\">&quot;warn&quot;</span>, <span class=\"comment\">//定义是否将运行文档宏。可以采用以下值： disable -根本不运行；enable -自动运行所有宏；warn -警告宏并请求允许运行。默认值为original。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;plugins&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是否将启动插件并可用。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;showReviewChanges&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义在加载编辑器时是否自动显示或隐藏审阅更改面板。默认值为false。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;spellcheck&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义在加载编辑器时是否自动打开或关闭拼写检查器。拼写检查器仅适用于文档编辑器和演示文稿编辑器。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;toolbarNoTabs&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是突出显示顶部工具栏选项卡样式。默认值为false。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;unit&quot;</span>: <span class=\"string\">&quot;cm&quot;</span>, <span class=\"comment\">//定义在标尺和对话框中使用的度量单位。可以采用以下值：cm -厘米，pt-点，inch -英寸。默认值为厘米（cm）。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;zoom&quot;</span>: <span class=\"number\">100</span>, <span class=\"comment\">//定义以百分比为单位的文档显示缩放值。可以取大于0的值。对于文本文档和演示文稿，可以将此参数设置为-1（使文档适合页面选项）或-2（使文档页面宽度适合编辑器页面）。默认值为100。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;customer&quot;</span>: &#123; <span class=\"comment\">//关于 文档编辑器的显示信息</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;address&quot;</span>: <span class=\"string\">&quot;My City, 123a-45&quot;</span>, <span class=\"comment\">//有权访问编辑或编辑作者的公司或个人的邮政地址，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;info&quot;</span>: <span class=\"string\">&quot;Some additional information&quot;</span>, <span class=\"comment\">//有关您希望其他人认识的公司或个人的一些其他信息，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;logo&quot;</span>: <span class=\"string\">&quot;https://example.com/logo-big.png&quot;</span>, <span class=\"comment\">//图片徽标的路径（此文件没有特别建议，但是如果使用透明背景的.png格式会更好）。图片必须具有以下尺寸：432x70，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;mail&quot;</span>: <span class=\"string\">&quot;john@example.com&quot;</span>, <span class=\"comment\">//有权访问编辑者或编辑者的公司或个人的电子邮件地址</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;欧阳锋&quot;</span>, <span class=\"comment\">//该公司或个人的谁可以访问编辑或编辑作者，名称</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;www&quot;</span>: <span class=\"string\">&quot;example.com&quot;</span> <span class=\"comment\">//以上公司或个人的家庭网站地址，</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"string\">&quot;feedback&quot;</span>: &#123; <span class=\"comment\">//反馈配置信息</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://example.com&quot;</span>, <span class=\"comment\">//单击“反馈和支持”菜单按钮时将打开的网站地址的绝对URL ，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;visible&quot;</span>: <span class=\"literal\">false</span> <span class=\"comment\">//显示或隐藏“反馈和支持”菜单按钮，</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"string\">&quot;goback&quot;</span>: &#123; <span class=\"comment\">//定义“打开文件位置”菜单按钮和右上角按钮的设置。该对象具有以下参数：</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;blank&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//在新的浏览器选项卡/窗口（如果值设置为true）或当前选项卡（如果值设置为false）中打开网站。默认值为true，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;requestClose&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义如果单击“打开文件位置”按钮，则调用events.onRequestClose事件，而不是打开浏览器选项卡或窗口。默认值为false，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;Open file location&quot;</span>, <span class=\"comment\">//将在“打开文件位置”菜单按钮和右上角按钮（即，而不是“转到文档”）上显示的文本，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://example.com&quot;</span> <span class=\"comment\">//单击“打开文件位置”菜单按钮时将打开的网站地址的绝对URL ，</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"string\">&quot;logo&quot;</span>: &#123;</span><br><span class=\"line\">                                <span class=\"string\">&quot;image&quot;</span>: <span class=\"string\">&quot;https://example.com/logo.png&quot;</span>, <span class=\"comment\">//图像文件的路径，用于在普通工作模式下显示（即，在所有编辑器的查看和编辑模式下）。图片必须具有以下尺寸：172x40，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;imageEmbedded&quot;</span>: <span class=\"string\">&quot;https://example.com/logo_em.png&quot;</span>, <span class=\"comment\">//用于以嵌入式模式显示的图像文件的路径（请参阅config部分以了解如何定义嵌入式文档类型）。图片必须具有以下尺寸：248x40，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"comment\">//某人单击徽标图像时将使用的绝对URL（可用于转到您的网站等）。保留为空字符串或null以使徽标不可单击，</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"string\">&quot;user&quot;</span>: &#123; <span class=\"comment\">//用户信息</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;admin&quot;</span>, <span class=\"comment\">//用户ID</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;操作员&quot;</span> <span class=\"comment\">//用户全名称</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"string\">&quot;embedded&quot;</span>: &#123; <span class=\"comment\">//Embedded部分仅适用于嵌入式文档类型（请参阅config部分以了解如何定义嵌入式文档类型）。它允许更改设置，这些设置定义嵌入式模式下按钮的行为。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;embedUrl&quot;</span>: <span class=\"string\">&quot;https://example.com/embedded?doc=exampledocument1.docx&quot;</span>, <span class=\"comment\">//定义文档的绝对URL，以作为嵌入到网页中的文档的源文件</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;fullscreenUrl&quot;</span>: <span class=\"string\">&quot;https://example.com/embedded?doc=exampledocument1.docx#fullscreen&quot;</span>, <span class=\"comment\">//定义将以全屏模式打开的文档的绝对URL。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;saveUrl&quot;</span>: <span class=\"string\">&quot;https://example.com/download?doc=exampledocument1.docx&quot;</span>, <span class=\"comment\">//定义允许将文档保存到用户个人计算机上的绝对URL。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;shareUrl&quot;</span>: <span class=\"string\">&quot;https://example.com/view?doc=exampledocument1.docx&quot;</span>, <span class=\"comment\">//定义允许其他用户共享此文档的绝对URL。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;toolbarDocked&quot;</span>: <span class=\"string\">&quot;top&quot;</span> <span class=\"comment\">//定义嵌入式查看器工具栏的位置，可以为top或bottom。</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"string\">&quot;events&quot;</span>: &#123; <span class=\"comment\">//事件配置</span></span><br><span class=\"line\">                        <span class=\"comment\">// onAppReady,//-将应用程序加载到浏览器时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onCollaborativeChanges //-当文档由其他用户在严格共同编辑模式下共同编辑时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onDocumentReady,//-将应用程序加载到浏览器时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onDocumentStateChange,//-修改文档时调用的函数。这就是所谓的使用参数：&#123;真正的“数据”&#125;在当前用户编辑文档以及与参数：&#123;“数据”：假&#125;在当前用户的更改发送到文档编辑服务。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onDownloadAs,//-调用downloadAs方法时，使用指向已编辑文件的绝对URL调用的函数。在data参数中发送要下载的文档的绝对URL 。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onError,//-发生错误或其他特定事件时调用的函数。错误消息在data参数中发送。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onInfo,//-应用程序打开文件时调用的函数。该模式在data.mode参数中发送。可以查看或编辑。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onMetaChange,//-通过meta命令更改文档的元信息时调用的函数。文档名称通过data.title参数发送。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onOutdatedVersion,//-使用旧的document.key值打开文档进行编辑时，显示错误后调用的函数，该值用于编辑先前的文档版本并已成功保存。调用此事件时，必须使用新的document.key重新初始化编辑器。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onReady,//-将应用程序加载到浏览器时调用的函数。自从5.0版本不推荐使用，请使用onAppReady代替</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestClose,//-结束编辑器的工作并且必须关闭编辑器时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestCompareFile,//-用户尝试通过单击“存储中的文档”按钮来选择要比较的文档时调用的函数。要选择要比较的文档，必须调用setRevisedFile方法。如果未声明该方法，则不会显示“来自存储的文档”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestCreateNew,//-用户尝试通过单击“新建”按钮来创建文档时调用的函数。使用此方法代替createUrl字段。如果未声明该方法且未指定createUrl，则将不会显示“创建新”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestEditRights,//-用户尝试通过单击“编辑文档”按钮尝试将文档从视图切换到编辑模式时调用的函数。调用该函数时，必须在编辑模式下再次初始化编辑器。如果未声明该方法，则不会显示“编辑”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestHistory,//-用户尝试通过单击“版本历史记录”按钮显示文档版本历史记录时调用的函数。要显示文档版本历史，您必须调用refreshHistory方法。如果未声明该方法和onRequestHistoryData方法，则不会显示“版本历史记录”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestHistoryClose,//-当用户尝试通过单击“关闭历史记录”按钮来查看文档版本历史记录时，试图调用该文档时调用的函数。调用该函数时，必须在编辑模式下再次初始化编辑器。如果未声明该方法，则不会显示“关闭历史记录”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestHistoryData,//-用户尝试单击文档版本历史记录中的特定文档版本时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestInsertImage,//-用户尝试通过单击“保存图像”按钮插入图像时调用的函数。图像插入的类型在参数data.c中指定。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestRename,//-用户尝试通过单击“重命名...”按钮重命名文件时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestRestore,//-用户单击版本历史记录中的“还原”按钮来还原文件版本时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestSaveAs,//-用户尝试通过单击“另存为...”按钮保存文件时调用的函数。文档的标题和要下载的文档的绝对URL在data参数中发送。如果未声明该方法，则不会显示“另存为...”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestSharingSettings,//-用户单击“更改访问权限”按钮来管理文档访问权限时调用的函数。必须调用setSharingSettings方法来更新有关允许与其他用户共享文档的设置的信息。如果未声明该方法，则不会显示“更改访问权限”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestUsers,//-评论者可以选择要在评论中提及的其他用户时调用的函数。要设置用户列表，必须调用setUsers方法。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onWarning,//-发生警告时调用的函数。警告消息在data参数中发送。</span></span><br><span class=\"line\">                        <span class=\"comment\">// &quot;onDocumentStateChange&quot;: function() &#123;</span></span><br><span class=\"line\">                        <span class=\"comment\">// &#125;, //文档改变后的回调</span></span><br><span class=\"line\">                        <span class=\"comment\">//&quot;onDocumentReady&quot; : onDocumentReady, //文档初始化准备好后的回调</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> docEditor = <span class=\"keyword\">new</span> <span class=\"title class_\">DocsAPI</span>.<span class=\"title class_\">DocEditor</span>(<span class=\"string\">&quot;placeholder&quot;</span>, config);</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n\n<p>转载至：<a href=\"https://blog.csdn.net/cyulotus/article/details/128404264\">https://blog.csdn.net/cyulotus/article/details/128404264</a></p>\n","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover_type":"img","excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initDoc</span>(<span class=\"params\">key, url, fileType, title, model, callbackUrl</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">let</span> config = &#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;document&quot;</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;documentType&quot;</span>: <span class=\"string\">&quot;text&quot;</span>,</span><br><span class=\"line\">                        <span class=\"string\">&quot;width&quot;</span>: <span class=\"string\">&quot;100%&quot;</span>, <span class=\"comment\">//打开窗口宽度</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;height&quot;</span>: <span class=\"string\">&quot;100%&quot;</span>, <span class=\"comment\">//打开窗口高度</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;fileType&quot;</span>: fileType, <span class=\"comment\">//文档类型</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;key&quot;</span>: key, <span class=\"comment\">//定义用于服务识别文档的唯一文档标识符。每次编辑和保存文档时，都必须重新生成密钥。长度限制为128个符号。</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;title&quot;</span>: title, <span class=\"comment\">//为查看或编辑的文档定义所需的文件名，该文件名也将在下载文档时用作文件名。长度限制为128个符号。</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;url&quot;</span>: url, <span class=\"comment\">//定义存储原始查看或编辑的文档的绝对URL</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;info&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;owner&quot;</span>: <span class=\"string\">&quot;王重阳&quot;</span>, <span class=\"comment\">//文件创建者名称</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;sharingSettings&quot;</span>: [ <span class=\"comment\">//文件对应用户的操作权限配置</span></span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    <span class=\"string\">&quot;permissions&quot;</span>: <span class=\"string\">&quot;Full Access&quot;</span>, <span class=\"comment\">// 完全操作权限-Full Access,只读权限-Read Only 拒绝访问-Deny Access</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">&quot;林朝英&quot;</span> <span class=\"comment\">//有次权限的用户</span></span><br><span class=\"line\">                                &#125;,</span><br><span class=\"line\">                                &#123;</span><br><span class=\"line\">                                    <span class=\"string\">&quot;permissions&quot;</span>: <span class=\"string\">&quot;Read Only&quot;</span>,</span><br><span class=\"line\">                                    <span class=\"string\">&quot;user&quot;</span>: <span class=\"string\">&quot;周伯通&quot;</span></span><br><span class=\"line\">                                &#125;,</span><br><span class=\"line\">                            ],</span><br><span class=\"line\">                            <span class=\"string\">&quot;uploaded&quot;</span>: <span class=\"string\">&quot;2010-07-07 3:46 PM&quot;</span> <span class=\"comment\">//文件创建时间</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"comment\">//文档权限参数</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;permissions&quot;</span>: &#123;</span><br><span class=\"line\">                            <span class=\"string\">&quot;edit&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//（文件是否可以编辑，false时文件不可编辑）</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;fillForms&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义是否能在文档中填充表单</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;print&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义文档是否能打印</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;review&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//第一是否显示审阅文档菜单</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;comment&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义是否可以注释文档。如果注释权限设置为“ true”，则文档侧栏将包含“注释”菜单选项；只有将mode参数设置为edit时才生效，默认值与edit参数的值一致。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;copy&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//是否允许您将内容复制到剪贴板。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;download&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义是否可以下载文档或仅在线查看或编辑文档。如果下载权限设置为“false”下载为菜单选项将没有。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;modifyContentControl&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义是否可以更改内容控件设置。仅当mode参数设置为edit时，内容控件修改才可用于文档编辑器。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;modifyFilter&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义过滤器是否可以全局应用（true）影响所有其他用户，或局部应用（false），即仅适用于当前用户。如果将mode参数设置为edit，则过滤器修改仅对电子表格编辑器可用。默认值为true。</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"comment\">// type: &quot;embedded&quot;,</span></span><br><span class=\"line\">                    <span class=\"comment\">//打开文档类型</span></span><br><span class=\"line\">                    <span class=\"comment\">// text对应各种文档类型(.doc, .docm, .docx, .dot, .dotm, .dotx, .epub, .fodt, .htm, .html, .mht, .odt, .ott, .pdf, .rtf, .txt, .djvu, .xps)</span></span><br><span class=\"line\">                    <span class=\"comment\">//spreadsheet对应表格类型(.csv, .fods, .ods, .ots, .xls, .xlsm, .xlsx, .xlt, .xltm, .xltx)</span></span><br><span class=\"line\">                    <span class=\"comment\">//presentation对应PPT类型(.fodp, .odp, .otp, .pot, .potm, .potx, .pps, .ppsm, .ppsx, .ppt, .pptm, .pptx)</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;editorConfig&quot;</span>: &#123; <span class=\"comment\">//编辑配置</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;createUrl&quot;</span>: <span class=\"string\">&quot;http://docServer:port/url-to-create-document/&quot;</span>, <span class=\"comment\">//指定创建文件的页面,添加该配置后文档服务器插件才会显示新建文件按钮</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;mode&quot;</span>: model, <span class=\"comment\">//文档操作模式 view 视图模式不可编辑  edit 编辑模式可编辑文档</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;callbackUrl&quot;</span>: callbackUrl, <span class=\"comment\">//保存文件时的回调地址</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;lang&quot;</span>: <span class=\"string\">&quot;zh-CN&quot;</span>, <span class=\"comment\">//语言环境</span></span><br><span class=\"line\">                        <span class=\"string\">&quot;customization&quot;</span>: &#123; <span class=\"comment\">//定制部分允许自定义编辑器界面，使其看起来像您的其他产品，并更改是否存在其他按钮，链接，更改徽标和编辑者所有者详细信息。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;help&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是显示还是隐藏“帮助”菜单按钮。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;hideRightMenu&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义在第一次加载时是显示还是隐藏右侧菜单。默认值为false。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;autosave&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是启用还是禁用“自动保存”菜单选项。请注意，如果您在菜单中更改此选项，它将被保存到浏览器的localStorage中。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;forcesave&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//定义保存按钮是否显示默认false</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;chat&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义“聊天”菜单按钮是显示还是隐藏；请注意，如果您隐藏“聊天”按钮，则相应的聊天功能也将被禁用。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;commentAuthorOnly&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义用户是否只能编辑和删除他的评论。默认值为false。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;comments&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是显示还是隐藏“注释”菜单按钮；请注意，如果您隐藏“评论”按钮，则相应的评论功能将仅可用于查看，评论的添加和编辑将不可用。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;compactHeader&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是否将菜单栏放在在徽标旁边使界面更加紧凑默认false。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;compactToolbar&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义显示的顶部工具栏类型是完整（false）还是紧凑true。默认值为false 多余菜单将在右侧折叠点击显示。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;compatibleFeatures&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义仅与OOXML格式兼容的功能的使用。例如，不要在整个文档上使用注释。默认值为false。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;macros&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是否将运行文档宏以及可用的宏设置。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;macrosMode&quot;</span>: <span class=\"string\">&quot;warn&quot;</span>, <span class=\"comment\">//定义是否将运行文档宏。可以采用以下值： disable -根本不运行；enable -自动运行所有宏；warn -警告宏并请求允许运行。默认值为original。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;plugins&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是否将启动插件并可用。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;showReviewChanges&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义在加载编辑器时是否自动显示或隐藏审阅更改面板。默认值为false。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;spellcheck&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义在加载编辑器时是否自动打开或关闭拼写检查器。拼写检查器仅适用于文档编辑器和演示文稿编辑器。默认值为true。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;toolbarNoTabs&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义是突出显示顶部工具栏选项卡样式。默认值为false。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;unit&quot;</span>: <span class=\"string\">&quot;cm&quot;</span>, <span class=\"comment\">//定义在标尺和对话框中使用的度量单位。可以采用以下值：cm -厘米，pt-点，inch -英寸。默认值为厘米（cm）。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;zoom&quot;</span>: <span class=\"number\">100</span>, <span class=\"comment\">//定义以百分比为单位的文档显示缩放值。可以取大于0的值。对于文本文档和演示文稿，可以将此参数设置为-1（使文档适合页面选项）或-2（使文档页面宽度适合编辑器页面）。默认值为100。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;customer&quot;</span>: &#123; <span class=\"comment\">//关于 文档编辑器的显示信息</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;address&quot;</span>: <span class=\"string\">&quot;My City, 123a-45&quot;</span>, <span class=\"comment\">//有权访问编辑或编辑作者的公司或个人的邮政地址，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;info&quot;</span>: <span class=\"string\">&quot;Some additional information&quot;</span>, <span class=\"comment\">//有关您希望其他人认识的公司或个人的一些其他信息，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;logo&quot;</span>: <span class=\"string\">&quot;https://example.com/logo-big.png&quot;</span>, <span class=\"comment\">//图片徽标的路径（此文件没有特别建议，但是如果使用透明背景的.png格式会更好）。图片必须具有以下尺寸：432x70，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;mail&quot;</span>: <span class=\"string\">&quot;john@example.com&quot;</span>, <span class=\"comment\">//有权访问编辑者或编辑者的公司或个人的电子邮件地址</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;欧阳锋&quot;</span>, <span class=\"comment\">//该公司或个人的谁可以访问编辑或编辑作者，名称</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;www&quot;</span>: <span class=\"string\">&quot;example.com&quot;</span> <span class=\"comment\">//以上公司或个人的家庭网站地址，</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"string\">&quot;feedback&quot;</span>: &#123; <span class=\"comment\">//反馈配置信息</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://example.com&quot;</span>, <span class=\"comment\">//单击“反馈和支持”菜单按钮时将打开的网站地址的绝对URL ，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;visible&quot;</span>: <span class=\"literal\">false</span> <span class=\"comment\">//显示或隐藏“反馈和支持”菜单按钮，</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"string\">&quot;goback&quot;</span>: &#123; <span class=\"comment\">//定义“打开文件位置”菜单按钮和右上角按钮的设置。该对象具有以下参数：</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;blank&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//在新的浏览器选项卡/窗口（如果值设置为true）或当前选项卡（如果值设置为false）中打开网站。默认值为true，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;requestClose&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">//定义如果单击“打开文件位置”按钮，则调用events.onRequestClose事件，而不是打开浏览器选项卡或窗口。默认值为false，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;text&quot;</span>: <span class=\"string\">&quot;Open file location&quot;</span>, <span class=\"comment\">//将在“打开文件位置”菜单按钮和右上角按钮（即，而不是“转到文档”）上显示的文本，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://example.com&quot;</span> <span class=\"comment\">//单击“打开文件位置”菜单按钮时将打开的网站地址的绝对URL ，</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                            <span class=\"string\">&quot;logo&quot;</span>: &#123;</span><br><span class=\"line\">                                <span class=\"string\">&quot;image&quot;</span>: <span class=\"string\">&quot;https://example.com/logo.png&quot;</span>, <span class=\"comment\">//图像文件的路径，用于在普通工作模式下显示（即，在所有编辑器的查看和编辑模式下）。图片必须具有以下尺寸：172x40，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;imageEmbedded&quot;</span>: <span class=\"string\">&quot;https://example.com/logo_em.png&quot;</span>, <span class=\"comment\">//用于以嵌入式模式显示的图像文件的路径（请参阅config部分以了解如何定义嵌入式文档类型）。图片必须具有以下尺寸：248x40，</span></span><br><span class=\"line\">                                <span class=\"string\">&quot;url&quot;</span>: <span class=\"string\">&quot;https://www.baidu.com&quot;</span> <span class=\"comment\">//某人单击徽标图像时将使用的绝对URL（可用于转到您的网站等）。保留为空字符串或null以使徽标不可单击，</span></span><br><span class=\"line\">                            &#125;,</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"string\">&quot;user&quot;</span>: &#123; <span class=\"comment\">//用户信息</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;admin&quot;</span>, <span class=\"comment\">//用户ID</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;操作员&quot;</span> <span class=\"comment\">//用户全名称</span></span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        <span class=\"string\">&quot;embedded&quot;</span>: &#123; <span class=\"comment\">//Embedded部分仅适用于嵌入式文档类型（请参阅config部分以了解如何定义嵌入式文档类型）。它允许更改设置，这些设置定义嵌入式模式下按钮的行为。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;embedUrl&quot;</span>: <span class=\"string\">&quot;https://example.com/embedded?doc=exampledocument1.docx&quot;</span>, <span class=\"comment\">//定义文档的绝对URL，以作为嵌入到网页中的文档的源文件</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;fullscreenUrl&quot;</span>: <span class=\"string\">&quot;https://example.com/embedded?doc=exampledocument1.docx#fullscreen&quot;</span>, <span class=\"comment\">//定义将以全屏模式打开的文档的绝对URL。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;saveUrl&quot;</span>: <span class=\"string\">&quot;https://example.com/download?doc=exampledocument1.docx&quot;</span>, <span class=\"comment\">//定义允许将文档保存到用户个人计算机上的绝对URL。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;shareUrl&quot;</span>: <span class=\"string\">&quot;https://example.com/view?doc=exampledocument1.docx&quot;</span>, <span class=\"comment\">//定义允许其他用户共享此文档的绝对URL。</span></span><br><span class=\"line\">                            <span class=\"string\">&quot;toolbarDocked&quot;</span>: <span class=\"string\">&quot;top&quot;</span> <span class=\"comment\">//定义嵌入式查看器工具栏的位置，可以为top或bottom。</span></span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"string\">&quot;events&quot;</span>: &#123; <span class=\"comment\">//事件配置</span></span><br><span class=\"line\">                        <span class=\"comment\">// onAppReady,//-将应用程序加载到浏览器时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onCollaborativeChanges //-当文档由其他用户在严格共同编辑模式下共同编辑时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onDocumentReady,//-将应用程序加载到浏览器时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onDocumentStateChange,//-修改文档时调用的函数。这就是所谓的使用参数：&#123;真正的“数据”&#125;在当前用户编辑文档以及与参数：&#123;“数据”：假&#125;在当前用户的更改发送到文档编辑服务。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onDownloadAs,//-调用downloadAs方法时，使用指向已编辑文件的绝对URL调用的函数。在data参数中发送要下载的文档的绝对URL 。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onError,//-发生错误或其他特定事件时调用的函数。错误消息在data参数中发送。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onInfo,//-应用程序打开文件时调用的函数。该模式在data.mode参数中发送。可以查看或编辑。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onMetaChange,//-通过meta命令更改文档的元信息时调用的函数。文档名称通过data.title参数发送。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onOutdatedVersion,//-使用旧的document.key值打开文档进行编辑时，显示错误后调用的函数，该值用于编辑先前的文档版本并已成功保存。调用此事件时，必须使用新的document.key重新初始化编辑器。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onReady,//-将应用程序加载到浏览器时调用的函数。自从5.0版本不推荐使用，请使用onAppReady代替</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestClose,//-结束编辑器的工作并且必须关闭编辑器时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestCompareFile,//-用户尝试通过单击“存储中的文档”按钮来选择要比较的文档时调用的函数。要选择要比较的文档，必须调用setRevisedFile方法。如果未声明该方法，则不会显示“来自存储的文档”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestCreateNew,//-用户尝试通过单击“新建”按钮来创建文档时调用的函数。使用此方法代替createUrl字段。如果未声明该方法且未指定createUrl，则将不会显示“创建新”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestEditRights,//-用户尝试通过单击“编辑文档”按钮尝试将文档从视图切换到编辑模式时调用的函数。调用该函数时，必须在编辑模式下再次初始化编辑器。如果未声明该方法，则不会显示“编辑”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestHistory,//-用户尝试通过单击“版本历史记录”按钮显示文档版本历史记录时调用的函数。要显示文档版本历史，您必须调用refreshHistory方法。如果未声明该方法和onRequestHistoryData方法，则不会显示“版本历史记录”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestHistoryClose,//-当用户尝试通过单击“关闭历史记录”按钮来查看文档版本历史记录时，试图调用该文档时调用的函数。调用该函数时，必须在编辑模式下再次初始化编辑器。如果未声明该方法，则不会显示“关闭历史记录”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestHistoryData,//-用户尝试单击文档版本历史记录中的特定文档版本时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestInsertImage,//-用户尝试通过单击“保存图像”按钮插入图像时调用的函数。图像插入的类型在参数data.c中指定。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestRename,//-用户尝试通过单击“重命名...”按钮重命名文件时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestRestore,//-用户单击版本历史记录中的“还原”按钮来还原文件版本时调用的函数。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestSaveAs,//-用户尝试通过单击“另存为...”按钮保存文件时调用的函数。文档的标题和要下载的文档的绝对URL在data参数中发送。如果未声明该方法，则不会显示“另存为...”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestSharingSettings,//-用户单击“更改访问权限”按钮来管理文档访问权限时调用的函数。必须调用setSharingSettings方法来更新有关允许与其他用户共享文档的设置的信息。如果未声明该方法，则不会显示“更改访问权限”按钮。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onRequestUsers,//-评论者可以选择要在评论中提及的其他用户时调用的函数。要设置用户列表，必须调用setUsers方法。</span></span><br><span class=\"line\">                        <span class=\"comment\">// onWarning,//-发生警告时调用的函数。警告消息在data参数中发送。</span></span><br><span class=\"line\">                        <span class=\"comment\">// &quot;onDocumentStateChange&quot;: function() &#123;</span></span><br><span class=\"line\">                        <span class=\"comment\">// &#125;, //文档改变后的回调</span></span><br><span class=\"line\">                        <span class=\"comment\">//&quot;onDocumentReady&quot; : onDocumentReady, //文档初始化准备好后的回调</span></span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> docEditor = <span class=\"keyword\">new</span> <span class=\"title class_\">DocsAPI</span>.<span class=\"title class_\">DocEditor</span>(<span class=\"string\">&quot;placeholder&quot;</span>, config);</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n\n<p>转载至：<a href=\"https://blog.csdn.net/cyulotus/article/details/128404264\">https://blog.csdn.net/cyulotus/article/details/128404264</a></p>\n"},{"title":"hexo 发布报错-spawn failed","cover":"/img/hexo.jpg","_content":"\n由于本人在搭建博客发布时经常遇到问题，所以就记录了下来，希望对你们有所帮助\n\n- hexo d 发布时有时候会报错 spawn failed\n- 之前经常碰到这个问题是在魔改样式时碰到的，所以大家在魔改之间可以提前备份一份 _config.butterfly.yml 文件，如果遇到问题，也可以快速回退。\n\n如果是刚搭建博客时，发布就遇到这样的问题，可以尝试以下两种方式\n\n## 解决方案01\n  - 打开配置文件 ——config.yml\n  - 修改其中的配置\n  ``` javascript\n    deploy:\n    type: git\n    // repo:\thttps://github.com/yourName/yourName.github.io.git(不要使用这个)\n    repo: git@github.com:yourName/yourName.github.io.git\n    branch:\n      master\n  ```\n  - 可以将其中的博客地址替换为ssh的形式在尝试发布一次\n\n## 解决方案02\n  - 如果上述的方法不成功，可以尝试下这个方法\n  - 将下面三个指令走一遍\n  ```shell\n    // 删除这个文件\n    rm-rf .depoly_git\n\n    // 将git加入系统环境变量\n    git config --global core.autocrlf false\n\n    // 重新执行一键三连\n    hexo c hexo g hexo d\n  ```\n\n## 解决方案03\n  - 如果之前发布的很正常，突然发布不成功，可以尝试以下方案\n  - 如果突然的切换 sshkey 则也有可能导致 hexo d 失败（别问我怎么知道的 emmm...）\n  - 建议重新生成一个 sshkey 去git上替换掉原先的 sshkey\n  [如何生成并替换 sshkey](https://nanako-00.github.io/2023/06/05/%E7%94%9F%E6%88%90sshkey/)","source":"_posts/hexo发布报错.md","raw":"---\ntitle: hexo 发布报错-spawn failed\ncover: /img/hexo.jpg\ncategories:\n  - 博客搭建\n---\n\n由于本人在搭建博客发布时经常遇到问题，所以就记录了下来，希望对你们有所帮助\n\n- hexo d 发布时有时候会报错 spawn failed\n- 之前经常碰到这个问题是在魔改样式时碰到的，所以大家在魔改之间可以提前备份一份 _config.butterfly.yml 文件，如果遇到问题，也可以快速回退。\n\n如果是刚搭建博客时，发布就遇到这样的问题，可以尝试以下两种方式\n\n## 解决方案01\n  - 打开配置文件 ——config.yml\n  - 修改其中的配置\n  ``` javascript\n    deploy:\n    type: git\n    // repo:\thttps://github.com/yourName/yourName.github.io.git(不要使用这个)\n    repo: git@github.com:yourName/yourName.github.io.git\n    branch:\n      master\n  ```\n  - 可以将其中的博客地址替换为ssh的形式在尝试发布一次\n\n## 解决方案02\n  - 如果上述的方法不成功，可以尝试下这个方法\n  - 将下面三个指令走一遍\n  ```shell\n    // 删除这个文件\n    rm-rf .depoly_git\n\n    // 将git加入系统环境变量\n    git config --global core.autocrlf false\n\n    // 重新执行一键三连\n    hexo c hexo g hexo d\n  ```\n\n## 解决方案03\n  - 如果之前发布的很正常，突然发布不成功，可以尝试以下方案\n  - 如果突然的切换 sshkey 则也有可能导致 hexo d 失败（别问我怎么知道的 emmm...）\n  - 建议重新生成一个 sshkey 去git上替换掉原先的 sshkey\n  [如何生成并替换 sshkey](https://nanako-00.github.io/2023/06/05/%E7%94%9F%E6%88%90sshkey/)","slug":"hexo发布报错","published":1,"date":"2023-06-05T12:07:09.290Z","updated":"2023-06-06T02:15:01.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clijr0jco000844vc3oky1ru8","content":"<p>由于本人在搭建博客发布时经常遇到问题，所以就记录了下来，希望对你们有所帮助</p>\n<ul>\n<li>hexo d 发布时有时候会报错 spawn failed</li>\n<li>之前经常碰到这个问题是在魔改样式时碰到的，所以大家在魔改之间可以提前备份一份 _config.butterfly.yml 文件，如果遇到问题，也可以快速回退。</li>\n</ul>\n<p>如果是刚搭建博客时，发布就遇到这样的问题，可以尝试以下两种方式</p>\n<h2 id=\"解决方案01\"><a href=\"#解决方案01\" class=\"headerlink\" title=\"解决方案01\"></a>解决方案01</h2><ul>\n<li>打开配置文件 ——config.yml</li>\n<li>修改其中的配置  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy</span>:</span><br><span class=\"line\"><span class=\"attr\">type</span>: git</span><br><span class=\"line\"><span class=\"comment\">// repo:\thttps://github.com/yourName/yourName.github.io.git(不要使用这个)</span></span><br><span class=\"line\"><span class=\"attr\">repo</span>: git@github.<span class=\"property\">com</span>:yourName/yourName.<span class=\"property\">github</span>.<span class=\"property\">io</span>.<span class=\"property\">git</span></span><br><span class=\"line\"><span class=\"attr\">branch</span>:</span><br><span class=\"line\">  master</span><br></pre></td></tr></table></figure></li>\n<li>可以将其中的博客地址替换为ssh的形式在尝试发布一次</li>\n</ul>\n<h2 id=\"解决方案02\"><a href=\"#解决方案02\" class=\"headerlink\" title=\"解决方案02\"></a>解决方案02</h2><ul>\n<li>如果上述的方法不成功，可以尝试下这个方法</li>\n<li>将下面三个指令走一遍  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 删除这个文件</span><br><span class=\"line\">rm-rf .depoly_git</span><br><span class=\"line\"></span><br><span class=\"line\">// 将git加入系统环境变量</span><br><span class=\"line\">git config --global core.autocrlf false</span><br><span class=\"line\"></span><br><span class=\"line\">// 重新执行一键三连</span><br><span class=\"line\">hexo c hexo g hexo d</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"解决方案03\"><a href=\"#解决方案03\" class=\"headerlink\" title=\"解决方案03\"></a>解决方案03</h2><ul>\n<li>如果之前发布的很正常，突然发布不成功，可以尝试以下方案</li>\n<li>如果突然的切换 sshkey 则也有可能导致 hexo d 失败（别问我怎么知道的 emmm…）</li>\n<li>建议重新生成一个 sshkey 去git上替换掉原先的 sshkey<br>  <a href=\"https://nanako-00.github.io/2023/06/05/%E7%94%9F%E6%88%90sshkey/\">如何生成并替换 sshkey</a></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover_type":"img","excerpt":"","more":"<p>由于本人在搭建博客发布时经常遇到问题，所以就记录了下来，希望对你们有所帮助</p>\n<ul>\n<li>hexo d 发布时有时候会报错 spawn failed</li>\n<li>之前经常碰到这个问题是在魔改样式时碰到的，所以大家在魔改之间可以提前备份一份 _config.butterfly.yml 文件，如果遇到问题，也可以快速回退。</li>\n</ul>\n<p>如果是刚搭建博客时，发布就遇到这样的问题，可以尝试以下两种方式</p>\n<h2 id=\"解决方案01\"><a href=\"#解决方案01\" class=\"headerlink\" title=\"解决方案01\"></a>解决方案01</h2><ul>\n<li>打开配置文件 ——config.yml</li>\n<li>修改其中的配置  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy</span>:</span><br><span class=\"line\"><span class=\"attr\">type</span>: git</span><br><span class=\"line\"><span class=\"comment\">// repo:\thttps://github.com/yourName/yourName.github.io.git(不要使用这个)</span></span><br><span class=\"line\"><span class=\"attr\">repo</span>: git@github.<span class=\"property\">com</span>:yourName/yourName.<span class=\"property\">github</span>.<span class=\"property\">io</span>.<span class=\"property\">git</span></span><br><span class=\"line\"><span class=\"attr\">branch</span>:</span><br><span class=\"line\">  master</span><br></pre></td></tr></table></figure></li>\n<li>可以将其中的博客地址替换为ssh的形式在尝试发布一次</li>\n</ul>\n<h2 id=\"解决方案02\"><a href=\"#解决方案02\" class=\"headerlink\" title=\"解决方案02\"></a>解决方案02</h2><ul>\n<li>如果上述的方法不成功，可以尝试下这个方法</li>\n<li>将下面三个指令走一遍  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">// 删除这个文件</span><br><span class=\"line\">rm-rf .depoly_git</span><br><span class=\"line\"></span><br><span class=\"line\">// 将git加入系统环境变量</span><br><span class=\"line\">git config --global core.autocrlf false</span><br><span class=\"line\"></span><br><span class=\"line\">// 重新执行一键三连</span><br><span class=\"line\">hexo c hexo g hexo d</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"解决方案03\"><a href=\"#解决方案03\" class=\"headerlink\" title=\"解决方案03\"></a>解决方案03</h2><ul>\n<li>如果之前发布的很正常，突然发布不成功，可以尝试以下方案</li>\n<li>如果突然的切换 sshkey 则也有可能导致 hexo d 失败（别问我怎么知道的 emmm…）</li>\n<li>建议重新生成一个 sshkey 去git上替换掉原先的 sshkey<br>  <a href=\"https://nanako-00.github.io/2023/06/05/%E7%94%9F%E6%88%90sshkey/\">如何生成并替换 sshkey</a></li>\n</ul>\n"},{"title":"前端css,html面试题","cover":"/img/post-css.jpg","_content":"\n近期准备换个坑位，所以整理了一些面试题，希望有用！\n本篇主要以html和css内容为主，如需其他，请阅读其他文章。\n\n## HTML5 新特性、语义化\n\n  ### 概念：\n    HTML5的语义化指的是合理的使用语义化的标签来创建页面结构。【正确的标签做正确的事】\n\n  ### 语义化标签\n    header(头部)\n      - 通常包含页面的标题、导航菜单、品牌标识等与页面头部相关的内容\n    nav(导航栏)\n      - 用于表示页面中的导航菜单或导航链接集合。\n    main(内容区域)\n      - 一般一个页面只应有一个main标签\n    article(表示独立、完整、可以独立分配或复用的内容块的元素)\n      - article标签应该包含独立的、自包含的内容，而不是被其他元素依赖或嵌套使用\n    section(独立内容区块的元素)\n      - 用于将相关的内容组织在一起，通常具有一个标题或主题。\n    aside(侧边栏)\n      - 通常包含与页面主要内容相关但又可以作为补充的内容\n      - 不仅限于侧边栏的用法，它也可以用于其他附加信息的展示，例如广告、引用、附属内容等\n    footer(底部内容)\n      - 通常包含与页面相关的版权信息、联系信息、导航链接等。\n  ### 优点\n    - 在没CSS样式的情况下，页面整体也会呈现很好的结构效果\n    - 代码结构清晰，易于阅读，\n    - 利于开发和维护 方便其他设备解析（如屏幕阅读器）根据语义渲染网页。\n    - 有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重\n\n## css选择器优先级\n  ### 选择器\n    - 元素选择器：通过元素名称选取元素，如 p 选择所有 <p> 元素。\n    - 类选择器：通过类名选取元素，以.开头，如 .my-class 选择所有具有 my-class 类名的元素。\n    - ID选择器：通过元素的唯一ID选取元素，以#开头，如 #my-id 选择具有 my-id ID的元素。\n    - 属性选择器：通过元素的属性值选取元素，如 [type=\"text\"] 选择所有 type 属性值为 text 的元素。\n    - 后代选择器：通过元素的后代关系选取元素，使用空格分隔，如 div p 选择所有 <p> 元素，它们是 <div> 元素的后代。\n    - 直接子元素选择器：通过元素的直接子元素关系选取元素，使用 > 分隔，如 div > p 选择所有 <p> 元素，它们是 <div> 元素的直接子元素。\n    - 兄弟选择器：通过元素的兄弟关系选取元素，使用 + 分隔，如 h2 + p 选择紧接在 <h2> 元素后的 <p> 元素。\n    - 伪类选择器：通过元素的状态或特定条件选取元素，以:开头，如 :hover 选择鼠标悬停在元素上的状态。\n    - 伪元素选择器：通过元素的特定部分选取元素，以::开头，如 ::before 选择元素的前置内容。\n  ### 优先级\n    1. ！important\n    2. 内联样式\n    3. ID选择器\n    4. 类选择器，属性选择器，伪类选择器\n    5. 元素选择器，伪元素选择器\n    6. 通配符，子类，相邻选择器\n\n## position 属性的值有哪些及其区别\n  ### static(默认值):\n    - 元素按照正常文档流进行定位，不受 top、right、bottom、left 等属性的影响。\n  ### relative(相对定位):\n    - 元素相对于其正常位置进行定位，通过设置 top、right、bottom、left 属性来调整元素的位置。相对定位不会影响其他元素的布局。\n  ### absolute(绝对定位):\n    - 元素相对于其最近的已定位（非 static）的父元素进行定位，如果没有已定位的父元素，则相对于文档根元素进行定位。通过设置 top、right、 bottom、  left 属性来指定元素的精确位置。绝对定位会使元素脱离正常文档流，并且不会为其保留空间。\n  ### fixed(固定定位):\n    - 元素相对于视口进行定位，即无论页面滚动与否，元素都会保持在固定位置。通过设置 top、right、bottom、left 属性来指定元素的精确位置。\n  ### sticky(粘性定位):\n    - 元素根据正常文档流进行定位，但在滚动到特定阈值时，会变为固定定位。通过设置 top、right、bottom、left 属性和 top、bottom 等阈值来调整元素的位置和触发条件。\n\n## box-sizing属性(盒模型)\n  ### content-box(标准盒模型)\n    - 宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。\n    - width 指 content 部分的宽度。\n  ### border-box(IE 盒子模型 | 怪异盒模型)\n    - 为元素设定的宽度和高度决定了元素的边框盒。\n    - width 表示 content+padding+border 这三个部分的宽度。\n  ### inherit\n    - 继承父元素的 box-sizing 值。\n\n## BFC（块级格式上下文）\n  ### 概念\n    - 块级格式化上下文（Block Formatting Context，BFC）是CSS中的一个概念，用于描述元素在布局时的一种独立的渲染区域。每个BFC都是一个独立的容器，内部元素的布局不会影响到外部元素。\n  ### 主要特征\n    - 内部元素垂直方向的边距会发生重叠：当多个块级元素嵌套在同一个BFC中时，它们的上下边距可能会发生重叠。\n    - BFC可以包含浮动元素：当一个元素触发了BFC，它可以包含浮动元素，并阻止浮动元素溢出到其他区域。\n    - BFC可以阻止浮动元素造成的父元素塌陷：当一个元素的子元素都浮动时，如果父元素触发了BFC，它会根据子元素的高度进行布局，不会因为浮动元素而塌陷。\n    - BFC在页面布局中的应用：通过触发元素的BFC特性，可以实现一些布局效果，如清除浮动、创建自适应的多栏布局等。\n  ### 触发方式\n    - 根元素（<html>）是一个BFC。\n    - 设置元素的 float 属性为除 none 以外的值。\n    - 设置元素的 position 属性为 absolute 或 fixed。\n    - 设置元素的 display 属性为 inline-block、table-cell、table-caption 或 flex。\n\n## 元素水平垂直居中\n  ### flex布局\n    ```css\n      .element {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n    ```\n  ### 定位实现\n  - 方式一:\n    ```css\n      .element {\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        bottom: 0;\n        margin: auto;\n      }\n    ```\n  - 方式二:\n   ```css\n      .element {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n      }\n    ```\n  ### flex布局\n    ```css\n      .element {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n    ```\n\n## 隐藏元素的方式\n  - display: none;\n    - 元素完全被隐藏掉，文档流中不占据空间，改变布局。\n    - 不可触发事件。\n  - visibility: hidden;\n    - 元素隐藏掉，但仍占据空间，不改变布局。\n    - 不可触发事件\n  - opacity: 0;\n    - 元素变为透明，视觉上不可见，仍占据空间。\n    - 可触发事件。\n\n## css实现三角形\n  - 思路： 宽高设为0，边框给一定粗度，然后将三边设置为透明\n  - 使用边框：\n    ```css\n      .element {\n        width: 0;\n        height: 0;\n        border-top: 50px solid transparent;\n        border-left: 50px solid transparent;\n        border-right: 50px solid transparent;\n        border-bottom: 100px solid red;\n      }\n    ```\n  - 使用伪元素：\n    ```css\n      .element {\n        position: relative;\n        width: 100px;\n        height: 100px;\n      }\n\n      .element::before {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 0;\n        height: 0;\n        border-top: 50px solid transparent;\n        border-left: 50px solid transparent;\n        border-right: 50px solid transparent;\n        border-bottom: 100px solid blue;\n      }\n    ```\n## 伪类和伪元素的区别\n  - 伪类选择的是满足某个条件的元素，而伪元素选择的是元素的某个部分。\n  - 伪类以单冒号（:）开头，伪元素以双冒号（::）开头。\n  - 伪类用于选择元素的状态或行为，而伪元素用于插入或生成元素的内容。\n\n## 实现响应式设计\n  ### 媒体查询\n  - 媒体查询是 CSS 中的一种功能，它允许根据不同的媒体特性（如屏幕宽度、设备类型等）应用不同的样式。通过在 CSS 中定义不同的媒体查询规则，可以根据设备的特征为不同的屏幕尺寸提供不同的布局和样式。\n  ### 弹性网格布局\n  - 弹性网格布局使用相对单位（如百分比）来定义网格的列宽和行高，使得布局可以根据屏幕尺寸的变化自动调整。通过使用弹性网格布局，网页的各个元素可以根据屏幕大小灵活地改变宽度和位置。\n  ### 流式布局\n  - 流式布局使用相对单位和百分比来定义元素的尺寸，使得页面可以根据屏幕尺寸进行伸缩。相对于固定的像素单位，流式布局可以更好地适应不同设备的屏幕尺寸，提供更好的响应性。\n  ### 图片响应式设计\n  - 图片响应式设计通过使用不同的图片源（如不同大小或分辨率的图片）来适应不同的屏幕尺寸。可以使用 CSS 的 max-width 属性和 <img> 标签的 srcset 属性来实现图片的响应式展示，以确保在不同设备上加载适合的图片。\n  ### 设备像素比\n  - 设备像素比是设备物理像素与 CSS 像素之间的比率。通过使用媒体查询和 CSS 的 min-device-pixel-ratio 或 max-device-pixel-ratio 属性，可以针对不同的设备像素比提供不同的样式和布局。\n    #### min-device-pixel-ratio && max-device-pixel-ratio\n    - 是一个用于媒体查询的 CSS 属性，用于检测设备的像素密度。它用于确定设备物理像素和 CSS 像素之间的比率，并根据设备的像素密度应用不同的样式或布局\n    <font color=#00FFFF>例：</font>下面的媒体查询将应用于 min-device-pixel-ratio 属性，仅在设备像素密度比率大于或等于 2 的情况下生效\n    ```css\n      @media (-webkit-min-device-pixel-ratio: 2),\n            (min--moz-device-pixel-ratio: 2),\n            (min-device-pixel-ratio: 2) {\n        /* 根据高像素密度设备的需要应用样式或布局 */\n      }\n    ```\n    <font color=red>注：</font> min-device-pixel-ratio 属性的值是一个 <font color=red>浮点数</font>，可以根据具体需求进行调整和匹配。同时，由于不同浏览器和设备对于 min-device-pixel-ratio 的支持可能存在差异，建议在使用时进行适当的兼容性处理和测试。\n## 优雅降级和渐进增强\n  ### 概念\n  - 优雅降级和渐进增强是两种前端开发的策略，用于确保网站或应用在不同浏览器或设备上具备基本的可用性和用户体验。\n  ### 区别\n    - 优雅降级是指首先针对具有较高性能和功能的现代浏览器开发网站或应用，然后逐步提供对较旧或不支持某些功能的浏览器的支持。\n    - 渐进增强是指从基本的、核心功能开始，然后根据浏览器的能力逐步增强网站或应用的功能和体验。\n## 动画（animation）\n  ### 属性\n  - animation-name：定义动画的名称，对应关键帧规则中的动画名称。\n  - animation-duration：指定动画的持续时间，单位可以是秒（s）或毫秒（ms）。\n  - animation-timing-function：设置动画的时间函数，控制动画的速度变化。\n  - animation-delay：指定动画开始之前的延迟时间，单位可以是秒（s）或毫秒（ms）。\n  - animation-iteration-count：定义动画的播放次数，可以是具体的次数或 infinite（无限循环）。\n  - animation-direction：指定动画的播放方向，可以是 normal（正向播放）、reverse（反向播放）或 alternate（来回播放）。\n  - animation-fill-mode：设置动画在播放之前和之后的样式状态，可以是 none、forwards、backwards 或 both。\n  - animation-play-state：控制动画的播放状态，可以是 paused（暂停）或 running（播放）。\n  <font color=red>注：</font> 除了上述属性外，还有一些与动画相关的属性，如 <font color=red>transform、opacity、transition</font> 等，它们可以与动画属性结合使用，实现更丰富的动画效果。\n  <font color=#00FFFF>例：</font>\n  ```css\n    @keyframes fade-in {\n      0% {\n        opacity: 0;\n      }\n      100% {\n        opacity: 1;\n      }\n    }\n\n    .element {\n      animation-name: fade-in;\n      animation-duration: 2s;\n      animation-delay: 1s;\n      animation-timing-function: ease-in-out;\n      animation-iteration-count: infinite;\n    }\n    <!-- 上述示例定义了一个名为 \"fade-in\" 的动画，通过逐渐改变元素的透明度，实现了一个淡入效果。然后将动画应用于具有 \".element\" 类的元素，并设置动画的持续时间为 2 秒，延迟时间为 1 秒，时间函数为 ease-in-out，并无限循环播放。通过组合和调整这些动画属性，可以创建各种各样的 CSS 动画效果，如淡入淡出、平移、旋转、缩放等。根据具体的需求和创意，可以灵活运用这些属性来设计和实现自定义的动画效果。 -->\n  ```\n\n## 如何实现溢出省略号\n  ### 单行省略号\n  ```css\n    .ellipsis {\n      width: 200px; /* 设置容器的宽度，根据需要进行调整 */\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n    }\n  ```\n  ### 多行省略号\n    ```css\n      .ellipsis {\n        overflow: hidden;\n        display: -webkit-box;\n        -webkit-box-orient: vertical;\n        -webkit-line-clamp: 3; /* 设置显示的最大行数，根据需要进行调整 */\n        }\n   ```","source":"_posts/html,css面试题.md","raw":"---\ntitle: 前端css,html面试题\ncover: /img/post-css.jpg\ncategories:\n  - 前端面试题\n---\n\n近期准备换个坑位，所以整理了一些面试题，希望有用！\n本篇主要以html和css内容为主，如需其他，请阅读其他文章。\n\n## HTML5 新特性、语义化\n\n  ### 概念：\n    HTML5的语义化指的是合理的使用语义化的标签来创建页面结构。【正确的标签做正确的事】\n\n  ### 语义化标签\n    header(头部)\n      - 通常包含页面的标题、导航菜单、品牌标识等与页面头部相关的内容\n    nav(导航栏)\n      - 用于表示页面中的导航菜单或导航链接集合。\n    main(内容区域)\n      - 一般一个页面只应有一个main标签\n    article(表示独立、完整、可以独立分配或复用的内容块的元素)\n      - article标签应该包含独立的、自包含的内容，而不是被其他元素依赖或嵌套使用\n    section(独立内容区块的元素)\n      - 用于将相关的内容组织在一起，通常具有一个标题或主题。\n    aside(侧边栏)\n      - 通常包含与页面主要内容相关但又可以作为补充的内容\n      - 不仅限于侧边栏的用法，它也可以用于其他附加信息的展示，例如广告、引用、附属内容等\n    footer(底部内容)\n      - 通常包含与页面相关的版权信息、联系信息、导航链接等。\n  ### 优点\n    - 在没CSS样式的情况下，页面整体也会呈现很好的结构效果\n    - 代码结构清晰，易于阅读，\n    - 利于开发和维护 方便其他设备解析（如屏幕阅读器）根据语义渲染网页。\n    - 有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重\n\n## css选择器优先级\n  ### 选择器\n    - 元素选择器：通过元素名称选取元素，如 p 选择所有 <p> 元素。\n    - 类选择器：通过类名选取元素，以.开头，如 .my-class 选择所有具有 my-class 类名的元素。\n    - ID选择器：通过元素的唯一ID选取元素，以#开头，如 #my-id 选择具有 my-id ID的元素。\n    - 属性选择器：通过元素的属性值选取元素，如 [type=\"text\"] 选择所有 type 属性值为 text 的元素。\n    - 后代选择器：通过元素的后代关系选取元素，使用空格分隔，如 div p 选择所有 <p> 元素，它们是 <div> 元素的后代。\n    - 直接子元素选择器：通过元素的直接子元素关系选取元素，使用 > 分隔，如 div > p 选择所有 <p> 元素，它们是 <div> 元素的直接子元素。\n    - 兄弟选择器：通过元素的兄弟关系选取元素，使用 + 分隔，如 h2 + p 选择紧接在 <h2> 元素后的 <p> 元素。\n    - 伪类选择器：通过元素的状态或特定条件选取元素，以:开头，如 :hover 选择鼠标悬停在元素上的状态。\n    - 伪元素选择器：通过元素的特定部分选取元素，以::开头，如 ::before 选择元素的前置内容。\n  ### 优先级\n    1. ！important\n    2. 内联样式\n    3. ID选择器\n    4. 类选择器，属性选择器，伪类选择器\n    5. 元素选择器，伪元素选择器\n    6. 通配符，子类，相邻选择器\n\n## position 属性的值有哪些及其区别\n  ### static(默认值):\n    - 元素按照正常文档流进行定位，不受 top、right、bottom、left 等属性的影响。\n  ### relative(相对定位):\n    - 元素相对于其正常位置进行定位，通过设置 top、right、bottom、left 属性来调整元素的位置。相对定位不会影响其他元素的布局。\n  ### absolute(绝对定位):\n    - 元素相对于其最近的已定位（非 static）的父元素进行定位，如果没有已定位的父元素，则相对于文档根元素进行定位。通过设置 top、right、 bottom、  left 属性来指定元素的精确位置。绝对定位会使元素脱离正常文档流，并且不会为其保留空间。\n  ### fixed(固定定位):\n    - 元素相对于视口进行定位，即无论页面滚动与否，元素都会保持在固定位置。通过设置 top、right、bottom、left 属性来指定元素的精确位置。\n  ### sticky(粘性定位):\n    - 元素根据正常文档流进行定位，但在滚动到特定阈值时，会变为固定定位。通过设置 top、right、bottom、left 属性和 top、bottom 等阈值来调整元素的位置和触发条件。\n\n## box-sizing属性(盒模型)\n  ### content-box(标准盒模型)\n    - 宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。\n    - width 指 content 部分的宽度。\n  ### border-box(IE 盒子模型 | 怪异盒模型)\n    - 为元素设定的宽度和高度决定了元素的边框盒。\n    - width 表示 content+padding+border 这三个部分的宽度。\n  ### inherit\n    - 继承父元素的 box-sizing 值。\n\n## BFC（块级格式上下文）\n  ### 概念\n    - 块级格式化上下文（Block Formatting Context，BFC）是CSS中的一个概念，用于描述元素在布局时的一种独立的渲染区域。每个BFC都是一个独立的容器，内部元素的布局不会影响到外部元素。\n  ### 主要特征\n    - 内部元素垂直方向的边距会发生重叠：当多个块级元素嵌套在同一个BFC中时，它们的上下边距可能会发生重叠。\n    - BFC可以包含浮动元素：当一个元素触发了BFC，它可以包含浮动元素，并阻止浮动元素溢出到其他区域。\n    - BFC可以阻止浮动元素造成的父元素塌陷：当一个元素的子元素都浮动时，如果父元素触发了BFC，它会根据子元素的高度进行布局，不会因为浮动元素而塌陷。\n    - BFC在页面布局中的应用：通过触发元素的BFC特性，可以实现一些布局效果，如清除浮动、创建自适应的多栏布局等。\n  ### 触发方式\n    - 根元素（<html>）是一个BFC。\n    - 设置元素的 float 属性为除 none 以外的值。\n    - 设置元素的 position 属性为 absolute 或 fixed。\n    - 设置元素的 display 属性为 inline-block、table-cell、table-caption 或 flex。\n\n## 元素水平垂直居中\n  ### flex布局\n    ```css\n      .element {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n    ```\n  ### 定位实现\n  - 方式一:\n    ```css\n      .element {\n        position: absolute;\n        left: 0;\n        right: 0;\n        top: 0;\n        bottom: 0;\n        margin: auto;\n      }\n    ```\n  - 方式二:\n   ```css\n      .element {\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n      }\n    ```\n  ### flex布局\n    ```css\n      .element {\n        display: flex;\n        justify-content: center;\n        align-items: center;\n      }\n    ```\n\n## 隐藏元素的方式\n  - display: none;\n    - 元素完全被隐藏掉，文档流中不占据空间，改变布局。\n    - 不可触发事件。\n  - visibility: hidden;\n    - 元素隐藏掉，但仍占据空间，不改变布局。\n    - 不可触发事件\n  - opacity: 0;\n    - 元素变为透明，视觉上不可见，仍占据空间。\n    - 可触发事件。\n\n## css实现三角形\n  - 思路： 宽高设为0，边框给一定粗度，然后将三边设置为透明\n  - 使用边框：\n    ```css\n      .element {\n        width: 0;\n        height: 0;\n        border-top: 50px solid transparent;\n        border-left: 50px solid transparent;\n        border-right: 50px solid transparent;\n        border-bottom: 100px solid red;\n      }\n    ```\n  - 使用伪元素：\n    ```css\n      .element {\n        position: relative;\n        width: 100px;\n        height: 100px;\n      }\n\n      .element::before {\n        content: \"\";\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 0;\n        height: 0;\n        border-top: 50px solid transparent;\n        border-left: 50px solid transparent;\n        border-right: 50px solid transparent;\n        border-bottom: 100px solid blue;\n      }\n    ```\n## 伪类和伪元素的区别\n  - 伪类选择的是满足某个条件的元素，而伪元素选择的是元素的某个部分。\n  - 伪类以单冒号（:）开头，伪元素以双冒号（::）开头。\n  - 伪类用于选择元素的状态或行为，而伪元素用于插入或生成元素的内容。\n\n## 实现响应式设计\n  ### 媒体查询\n  - 媒体查询是 CSS 中的一种功能，它允许根据不同的媒体特性（如屏幕宽度、设备类型等）应用不同的样式。通过在 CSS 中定义不同的媒体查询规则，可以根据设备的特征为不同的屏幕尺寸提供不同的布局和样式。\n  ### 弹性网格布局\n  - 弹性网格布局使用相对单位（如百分比）来定义网格的列宽和行高，使得布局可以根据屏幕尺寸的变化自动调整。通过使用弹性网格布局，网页的各个元素可以根据屏幕大小灵活地改变宽度和位置。\n  ### 流式布局\n  - 流式布局使用相对单位和百分比来定义元素的尺寸，使得页面可以根据屏幕尺寸进行伸缩。相对于固定的像素单位，流式布局可以更好地适应不同设备的屏幕尺寸，提供更好的响应性。\n  ### 图片响应式设计\n  - 图片响应式设计通过使用不同的图片源（如不同大小或分辨率的图片）来适应不同的屏幕尺寸。可以使用 CSS 的 max-width 属性和 <img> 标签的 srcset 属性来实现图片的响应式展示，以确保在不同设备上加载适合的图片。\n  ### 设备像素比\n  - 设备像素比是设备物理像素与 CSS 像素之间的比率。通过使用媒体查询和 CSS 的 min-device-pixel-ratio 或 max-device-pixel-ratio 属性，可以针对不同的设备像素比提供不同的样式和布局。\n    #### min-device-pixel-ratio && max-device-pixel-ratio\n    - 是一个用于媒体查询的 CSS 属性，用于检测设备的像素密度。它用于确定设备物理像素和 CSS 像素之间的比率，并根据设备的像素密度应用不同的样式或布局\n    <font color=#00FFFF>例：</font>下面的媒体查询将应用于 min-device-pixel-ratio 属性，仅在设备像素密度比率大于或等于 2 的情况下生效\n    ```css\n      @media (-webkit-min-device-pixel-ratio: 2),\n            (min--moz-device-pixel-ratio: 2),\n            (min-device-pixel-ratio: 2) {\n        /* 根据高像素密度设备的需要应用样式或布局 */\n      }\n    ```\n    <font color=red>注：</font> min-device-pixel-ratio 属性的值是一个 <font color=red>浮点数</font>，可以根据具体需求进行调整和匹配。同时，由于不同浏览器和设备对于 min-device-pixel-ratio 的支持可能存在差异，建议在使用时进行适当的兼容性处理和测试。\n## 优雅降级和渐进增强\n  ### 概念\n  - 优雅降级和渐进增强是两种前端开发的策略，用于确保网站或应用在不同浏览器或设备上具备基本的可用性和用户体验。\n  ### 区别\n    - 优雅降级是指首先针对具有较高性能和功能的现代浏览器开发网站或应用，然后逐步提供对较旧或不支持某些功能的浏览器的支持。\n    - 渐进增强是指从基本的、核心功能开始，然后根据浏览器的能力逐步增强网站或应用的功能和体验。\n## 动画（animation）\n  ### 属性\n  - animation-name：定义动画的名称，对应关键帧规则中的动画名称。\n  - animation-duration：指定动画的持续时间，单位可以是秒（s）或毫秒（ms）。\n  - animation-timing-function：设置动画的时间函数，控制动画的速度变化。\n  - animation-delay：指定动画开始之前的延迟时间，单位可以是秒（s）或毫秒（ms）。\n  - animation-iteration-count：定义动画的播放次数，可以是具体的次数或 infinite（无限循环）。\n  - animation-direction：指定动画的播放方向，可以是 normal（正向播放）、reverse（反向播放）或 alternate（来回播放）。\n  - animation-fill-mode：设置动画在播放之前和之后的样式状态，可以是 none、forwards、backwards 或 both。\n  - animation-play-state：控制动画的播放状态，可以是 paused（暂停）或 running（播放）。\n  <font color=red>注：</font> 除了上述属性外，还有一些与动画相关的属性，如 <font color=red>transform、opacity、transition</font> 等，它们可以与动画属性结合使用，实现更丰富的动画效果。\n  <font color=#00FFFF>例：</font>\n  ```css\n    @keyframes fade-in {\n      0% {\n        opacity: 0;\n      }\n      100% {\n        opacity: 1;\n      }\n    }\n\n    .element {\n      animation-name: fade-in;\n      animation-duration: 2s;\n      animation-delay: 1s;\n      animation-timing-function: ease-in-out;\n      animation-iteration-count: infinite;\n    }\n    <!-- 上述示例定义了一个名为 \"fade-in\" 的动画，通过逐渐改变元素的透明度，实现了一个淡入效果。然后将动画应用于具有 \".element\" 类的元素，并设置动画的持续时间为 2 秒，延迟时间为 1 秒，时间函数为 ease-in-out，并无限循环播放。通过组合和调整这些动画属性，可以创建各种各样的 CSS 动画效果，如淡入淡出、平移、旋转、缩放等。根据具体的需求和创意，可以灵活运用这些属性来设计和实现自定义的动画效果。 -->\n  ```\n\n## 如何实现溢出省略号\n  ### 单行省略号\n  ```css\n    .ellipsis {\n      width: 200px; /* 设置容器的宽度，根据需要进行调整 */\n      overflow: hidden;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n    }\n  ```\n  ### 多行省略号\n    ```css\n      .ellipsis {\n        overflow: hidden;\n        display: -webkit-box;\n        -webkit-box-orient: vertical;\n        -webkit-line-clamp: 3; /* 设置显示的最大行数，根据需要进行调整 */\n        }\n   ```","slug":"html,css面试题","published":1,"date":"2023-05-22T12:20:11.009Z","updated":"2023-06-05T11:59:20.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clijr0jcp000a44vcf5xo0m6w","content":"<p>近期准备换个坑位，所以整理了一些面试题，希望有用！<br>本篇主要以html和css内容为主，如需其他，请阅读其他文章。</p>\n<h2 id=\"HTML5-新特性、语义化\"><a href=\"#HTML5-新特性、语义化\" class=\"headerlink\" title=\"HTML5 新特性、语义化\"></a>HTML5 新特性、语义化</h2><h3 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><pre><code>HTML5的语义化指的是合理的使用语义化的标签来创建页面结构。【正确的标签做正确的事】\n</code></pre>\n<h3 id=\"语义化标签\"><a href=\"#语义化标签\" class=\"headerlink\" title=\"语义化标签\"></a>语义化标签</h3><pre><code>header(头部)\n  - 通常包含页面的标题、导航菜单、品牌标识等与页面头部相关的内容\nnav(导航栏)\n  - 用于表示页面中的导航菜单或导航链接集合。\nmain(内容区域)\n  - 一般一个页面只应有一个main标签\narticle(表示独立、完整、可以独立分配或复用的内容块的元素)\n  - article标签应该包含独立的、自包含的内容，而不是被其他元素依赖或嵌套使用\nsection(独立内容区块的元素)\n  - 用于将相关的内容组织在一起，通常具有一个标题或主题。\naside(侧边栏)\n  - 通常包含与页面主要内容相关但又可以作为补充的内容\n  - 不仅限于侧边栏的用法，它也可以用于其他附加信息的展示，例如广告、引用、附属内容等\nfooter(底部内容)\n  - 通常包含与页面相关的版权信息、联系信息、导航链接等。\n</code></pre>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><pre><code>- 在没CSS样式的情况下，页面整体也会呈现很好的结构效果\n- 代码结构清晰，易于阅读，\n- 利于开发和维护 方便其他设备解析（如屏幕阅读器）根据语义渲染网页。\n- 有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重\n</code></pre>\n<h2 id=\"css选择器优先级\"><a href=\"#css选择器优先级\" class=\"headerlink\" title=\"css选择器优先级\"></a>css选择器优先级</h2><h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><pre><code>- 元素选择器：通过元素名称选取元素，如 p 选择所有 &lt;p&gt; 元素。\n- 类选择器：通过类名选取元素，以.开头，如 .my-class 选择所有具有 my-class 类名的元素。\n- ID选择器：通过元素的唯一ID选取元素，以#开头，如 #my-id 选择具有 my-id ID的元素。\n- 属性选择器：通过元素的属性值选取元素，如 [type=&quot;text&quot;] 选择所有 type 属性值为 text 的元素。\n- 后代选择器：通过元素的后代关系选取元素，使用空格分隔，如 div p 选择所有 &lt;p&gt; 元素，它们是 &lt;div&gt; 元素的后代。\n- 直接子元素选择器：通过元素的直接子元素关系选取元素，使用 &gt; 分隔，如 div &gt; p 选择所有 &lt;p&gt; 元素，它们是 &lt;div&gt; 元素的直接子元素。\n- 兄弟选择器：通过元素的兄弟关系选取元素，使用 + 分隔，如 h2 + p 选择紧接在 &lt;h2&gt; 元素后的 &lt;p&gt; 元素。\n- 伪类选择器：通过元素的状态或特定条件选取元素，以:开头，如 :hover 选择鼠标悬停在元素上的状态。\n- 伪元素选择器：通过元素的特定部分选取元素，以::开头，如 ::before 选择元素的前置内容。\n</code></pre>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><pre><code>1. ！important\n2. 内联样式\n3. ID选择器\n4. 类选择器，属性选择器，伪类选择器\n5. 元素选择器，伪元素选择器\n6. 通配符，子类，相邻选择器\n</code></pre>\n<h2 id=\"position-属性的值有哪些及其区别\"><a href=\"#position-属性的值有哪些及其区别\" class=\"headerlink\" title=\"position 属性的值有哪些及其区别\"></a>position 属性的值有哪些及其区别</h2><h3 id=\"static-默认值\"><a href=\"#static-默认值\" class=\"headerlink\" title=\"static(默认值):\"></a>static(默认值):</h3><pre><code>- 元素按照正常文档流进行定位，不受 top、right、bottom、left 等属性的影响。\n</code></pre>\n<h3 id=\"relative-相对定位\"><a href=\"#relative-相对定位\" class=\"headerlink\" title=\"relative(相对定位):\"></a>relative(相对定位):</h3><pre><code>- 元素相对于其正常位置进行定位，通过设置 top、right、bottom、left 属性来调整元素的位置。相对定位不会影响其他元素的布局。\n</code></pre>\n<h3 id=\"absolute-绝对定位\"><a href=\"#absolute-绝对定位\" class=\"headerlink\" title=\"absolute(绝对定位):\"></a>absolute(绝对定位):</h3><pre><code>- 元素相对于其最近的已定位（非 static）的父元素进行定位，如果没有已定位的父元素，则相对于文档根元素进行定位。通过设置 top、right、 bottom、  left 属性来指定元素的精确位置。绝对定位会使元素脱离正常文档流，并且不会为其保留空间。\n</code></pre>\n<h3 id=\"fixed-固定定位\"><a href=\"#fixed-固定定位\" class=\"headerlink\" title=\"fixed(固定定位):\"></a>fixed(固定定位):</h3><pre><code>- 元素相对于视口进行定位，即无论页面滚动与否，元素都会保持在固定位置。通过设置 top、right、bottom、left 属性来指定元素的精确位置。\n</code></pre>\n<h3 id=\"sticky-粘性定位\"><a href=\"#sticky-粘性定位\" class=\"headerlink\" title=\"sticky(粘性定位):\"></a>sticky(粘性定位):</h3><pre><code>- 元素根据正常文档流进行定位，但在滚动到特定阈值时，会变为固定定位。通过设置 top、right、bottom、left 属性和 top、bottom 等阈值来调整元素的位置和触发条件。\n</code></pre>\n<h2 id=\"box-sizing属性-盒模型\"><a href=\"#box-sizing属性-盒模型\" class=\"headerlink\" title=\"box-sizing属性(盒模型)\"></a>box-sizing属性(盒模型)</h2><h3 id=\"content-box-标准盒模型\"><a href=\"#content-box-标准盒模型\" class=\"headerlink\" title=\"content-box(标准盒模型)\"></a>content-box(标准盒模型)</h3><pre><code>- 宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。\n- width 指 content 部分的宽度。\n</code></pre>\n<h3 id=\"border-box-IE-盒子模型-怪异盒模型\"><a href=\"#border-box-IE-盒子模型-怪异盒模型\" class=\"headerlink\" title=\"border-box(IE 盒子模型 | 怪异盒模型)\"></a>border-box(IE 盒子模型 | 怪异盒模型)</h3><pre><code>- 为元素设定的宽度和高度决定了元素的边框盒。\n- width 表示 content+padding+border 这三个部分的宽度。\n</code></pre>\n<h3 id=\"inherit\"><a href=\"#inherit\" class=\"headerlink\" title=\"inherit\"></a>inherit</h3><pre><code>- 继承父元素的 box-sizing 值。\n</code></pre>\n<h2 id=\"BFC（块级格式上下文）\"><a href=\"#BFC（块级格式上下文）\" class=\"headerlink\" title=\"BFC（块级格式上下文）\"></a>BFC（块级格式上下文）</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><pre><code>- 块级格式化上下文（Block Formatting Context，BFC）是CSS中的一个概念，用于描述元素在布局时的一种独立的渲染区域。每个BFC都是一个独立的容器，内部元素的布局不会影响到外部元素。\n</code></pre>\n<h3 id=\"主要特征\"><a href=\"#主要特征\" class=\"headerlink\" title=\"主要特征\"></a>主要特征</h3><pre><code>- 内部元素垂直方向的边距会发生重叠：当多个块级元素嵌套在同一个BFC中时，它们的上下边距可能会发生重叠。\n- BFC可以包含浮动元素：当一个元素触发了BFC，它可以包含浮动元素，并阻止浮动元素溢出到其他区域。\n- BFC可以阻止浮动元素造成的父元素塌陷：当一个元素的子元素都浮动时，如果父元素触发了BFC，它会根据子元素的高度进行布局，不会因为浮动元素而塌陷。\n- BFC在页面布局中的应用：通过触发元素的BFC特性，可以实现一些布局效果，如清除浮动、创建自适应的多栏布局等。\n</code></pre>\n<h3 id=\"触发方式\"><a href=\"#触发方式\" class=\"headerlink\" title=\"触发方式\"></a>触发方式</h3><pre><code>- 根元素（&lt;html&gt;）是一个BFC。\n- 设置元素的 float 属性为除 none 以外的值。\n- 设置元素的 position 属性为 absolute 或 fixed。\n- 设置元素的 display 属性为 inline-block、table-cell、table-caption 或 flex。\n</code></pre>\n<h2 id=\"元素水平垂直居中\"><a href=\"#元素水平垂直居中\" class=\"headerlink\" title=\"元素水平垂直居中\"></a>元素水平垂直居中</h2><h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><pre><code><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"定位实现\"><a href=\"#定位实现\" class=\"headerlink\" title=\"定位实现\"></a>定位实现</h3><ul>\n<li>方式一:<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>方式二:   <figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"flex布局-1\"><a href=\"#flex布局-1\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><pre><code><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"隐藏元素的方式\"><a href=\"#隐藏元素的方式\" class=\"headerlink\" title=\"隐藏元素的方式\"></a>隐藏元素的方式</h2><ul>\n<li>display: none;<ul>\n<li>元素完全被隐藏掉，文档流中不占据空间，改变布局。</li>\n<li>不可触发事件。</li>\n</ul>\n</li>\n<li>visibility: hidden;<ul>\n<li>元素隐藏掉，但仍占据空间，不改变布局。</li>\n<li>不可触发事件</li>\n</ul>\n</li>\n<li>opacity: 0;<ul>\n<li>元素变为透明，视觉上不可见，仍占据空间。</li>\n<li>可触发事件。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"css实现三角形\"><a href=\"#css实现三角形\" class=\"headerlink\" title=\"css实现三角形\"></a>css实现三角形</h2><ul>\n<li>思路： 宽高设为0，边框给一定粗度，然后将三边设置为透明</li>\n<li>使用边框：<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>使用伪元素：<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.element</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"伪类和伪元素的区别\"><a href=\"#伪类和伪元素的区别\" class=\"headerlink\" title=\"伪类和伪元素的区别\"></a>伪类和伪元素的区别</h2><ul>\n<li>伪类选择的是满足某个条件的元素，而伪元素选择的是元素的某个部分。</li>\n<li>伪类以单冒号（:）开头，伪元素以双冒号（::）开头。</li>\n<li>伪类用于选择元素的状态或行为，而伪元素用于插入或生成元素的内容。</li>\n</ul>\n<h2 id=\"实现响应式设计\"><a href=\"#实现响应式设计\" class=\"headerlink\" title=\"实现响应式设计\"></a>实现响应式设计</h2><h3 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h3><ul>\n<li>媒体查询是 CSS 中的一种功能，它允许根据不同的媒体特性（如屏幕宽度、设备类型等）应用不同的样式。通过在 CSS 中定义不同的媒体查询规则，可以根据设备的特征为不同的屏幕尺寸提供不同的布局和样式。</li>\n</ul>\n<h3 id=\"弹性网格布局\"><a href=\"#弹性网格布局\" class=\"headerlink\" title=\"弹性网格布局\"></a>弹性网格布局</h3><ul>\n<li>弹性网格布局使用相对单位（如百分比）来定义网格的列宽和行高，使得布局可以根据屏幕尺寸的变化自动调整。通过使用弹性网格布局，网页的各个元素可以根据屏幕大小灵活地改变宽度和位置。</li>\n</ul>\n<h3 id=\"流式布局\"><a href=\"#流式布局\" class=\"headerlink\" title=\"流式布局\"></a>流式布局</h3><ul>\n<li>流式布局使用相对单位和百分比来定义元素的尺寸，使得页面可以根据屏幕尺寸进行伸缩。相对于固定的像素单位，流式布局可以更好地适应不同设备的屏幕尺寸，提供更好的响应性。</li>\n</ul>\n<h3 id=\"图片响应式设计\"><a href=\"#图片响应式设计\" class=\"headerlink\" title=\"图片响应式设计\"></a>图片响应式设计</h3><ul>\n<li>图片响应式设计通过使用不同的图片源（如不同大小或分辨率的图片）来适应不同的屏幕尺寸。可以使用 CSS 的 max-width 属性和 <img> 标签的 srcset 属性来实现图片的响应式展示，以确保在不同设备上加载适合的图片。</li>\n</ul>\n<h3 id=\"设备像素比\"><a href=\"#设备像素比\" class=\"headerlink\" title=\"设备像素比\"></a>设备像素比</h3><ul>\n<li>设备像素比是设备物理像素与 CSS 像素之间的比率。通过使用媒体查询和 CSS 的 min-device-pixel-ratio 或 max-device-pixel-ratio 属性，可以针对不同的设备像素比提供不同的样式和布局。<h4 id=\"min-device-pixel-ratio-amp-amp-max-device-pixel-ratio\"><a href=\"#min-device-pixel-ratio-amp-amp-max-device-pixel-ratio\" class=\"headerlink\" title=\"min-device-pixel-ratio &amp;&amp; max-device-pixel-ratio\"></a>min-device-pixel-ratio &amp;&amp; max-device-pixel-ratio</h4><ul>\n<li>是一个用于媒体查询的 CSS 属性，用于检测设备的像素密度。它用于确定设备物理像素和 CSS 像素之间的比率，并根据设备的像素密度应用不同的样式或布局<br><font color=#00FFFF>例：</font>下面的媒体查询将应用于 min-device-pixel-ratio 属性，仅在设备像素密度比率大于或等于 2 的情况下生效<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>: <span class=\"number\">2</span>),</span><br><span class=\"line\">      (<span class=\"attribute\">min--moz-device-pixel-ratio</span>: <span class=\"number\">2</span>),</span><br><span class=\"line\">      (<span class=\"attribute\">min-device-pixel-ratio</span>: <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 根据高像素密度设备的需要应用样式或布局 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<font color=red>注：</font> min-device-pixel-ratio 属性的值是一个 <font color=red>浮点数</font>，可以根据具体需求进行调整和匹配。同时，由于不同浏览器和设备对于 min-device-pixel-ratio 的支持可能存在差异，建议在使用时进行适当的兼容性处理和测试。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"优雅降级和渐进增强\"><a href=\"#优雅降级和渐进增强\" class=\"headerlink\" title=\"优雅降级和渐进增强\"></a>优雅降级和渐进增强</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>优雅降级和渐进增强是两种前端开发的策略，用于确保网站或应用在不同浏览器或设备上具备基本的可用性和用户体验。</li>\n</ul>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><pre><code>- 优雅降级是指首先针对具有较高性能和功能的现代浏览器开发网站或应用，然后逐步提供对较旧或不支持某些功能的浏览器的支持。\n- 渐进增强是指从基本的、核心功能开始，然后根据浏览器的能力逐步增强网站或应用的功能和体验。\n</code></pre>\n<h2 id=\"动画（animation）\"><a href=\"#动画（animation）\" class=\"headerlink\" title=\"动画（animation）\"></a>动画（animation）</h2><h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li>animation-name：定义动画的名称，对应关键帧规则中的动画名称。</li>\n<li>animation-duration：指定动画的持续时间，单位可以是秒（s）或毫秒（ms）。</li>\n<li>animation-timing-function：设置动画的时间函数，控制动画的速度变化。</li>\n<li>animation-delay：指定动画开始之前的延迟时间，单位可以是秒（s）或毫秒（ms）。</li>\n<li>animation-iteration-count：定义动画的播放次数，可以是具体的次数或 infinite（无限循环）。</li>\n<li>animation-direction：指定动画的播放方向，可以是 normal（正向播放）、reverse（反向播放）或 alternate（来回播放）。</li>\n<li>animation-fill-mode：设置动画在播放之前和之后的样式状态，可以是 none、forwards、backwards 或 both。</li>\n<li>animation-play-state：控制动画的播放状态，可以是 paused（暂停）或 running（播放）。<br>  <font color=red>注：</font> 除了上述属性外，还有一些与动画相关的属性，如 <font color=red>transform、opacity、transition</font> 等，它们可以与动画属性结合使用，实现更丰富的动画效果。<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@keyframes</span> fade-in &#123;</span><br><span class=\"line\">  <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">animation-name</span>: fade-in;</span><br><span class=\"line\">  <span class=\"attribute\">animation-duration</span>: <span class=\"number\">2s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation-delay</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation-timing-function</span>: ease-in-out;</span><br><span class=\"line\">  <span class=\"attribute\">animation-iteration-count</span>: infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 上述示例定义了一个名为 &quot;fade-in&quot; 的动画，通过逐渐改变元素的透明度，实现了一个淡入效果。然后将动画应用于具有 &quot;<span class=\"selector-class\">.element</span>&quot; 类的元素，并设置动画的持续时间为 <span class=\"number\">2</span> 秒，延迟时间为 <span class=\"number\">1</span> 秒，时间函数为 ease-in-out，并无限循环播放。通过组合和调整这些动画属性，可以创建各种各样的 CSS 动画效果，如淡入淡出、平移、旋转、缩放等。根据具体的需求和创意，可以灵活运用这些属性来设计和实现自定义的动画效果。 --&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"如何实现溢出省略号\"><a href=\"#如何实现溢出省略号\" class=\"headerlink\" title=\"如何实现溢出省略号\"></a>如何实现溢出省略号</h2><h3 id=\"单行省略号\"><a href=\"#单行省略号\" class=\"headerlink\" title=\"单行省略号\"></a>单行省略号</h3>  <figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ellipsis</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>; <span class=\"comment\">/* 设置容器的宽度，根据需要进行调整 */</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多行省略号\"><a href=\"#多行省略号\" class=\"headerlink\" title=\"多行省略号\"></a>多行省略号</h3><pre><code><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ellipsis</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">  -webkit-box-orient: vertical;</span><br><span class=\"line\">  -webkit-line-clamp: <span class=\"number\">3</span>; <span class=\"comment\">/* 设置显示的最大行数，根据需要进行调整 */</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover_type":"img","excerpt":"","more":"<p>近期准备换个坑位，所以整理了一些面试题，希望有用！<br>本篇主要以html和css内容为主，如需其他，请阅读其他文章。</p>\n<h2 id=\"HTML5-新特性、语义化\"><a href=\"#HTML5-新特性、语义化\" class=\"headerlink\" title=\"HTML5 新特性、语义化\"></a>HTML5 新特性、语义化</h2><h3 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h3><pre><code>HTML5的语义化指的是合理的使用语义化的标签来创建页面结构。【正确的标签做正确的事】\n</code></pre>\n<h3 id=\"语义化标签\"><a href=\"#语义化标签\" class=\"headerlink\" title=\"语义化标签\"></a>语义化标签</h3><pre><code>header(头部)\n  - 通常包含页面的标题、导航菜单、品牌标识等与页面头部相关的内容\nnav(导航栏)\n  - 用于表示页面中的导航菜单或导航链接集合。\nmain(内容区域)\n  - 一般一个页面只应有一个main标签\narticle(表示独立、完整、可以独立分配或复用的内容块的元素)\n  - article标签应该包含独立的、自包含的内容，而不是被其他元素依赖或嵌套使用\nsection(独立内容区块的元素)\n  - 用于将相关的内容组织在一起，通常具有一个标题或主题。\naside(侧边栏)\n  - 通常包含与页面主要内容相关但又可以作为补充的内容\n  - 不仅限于侧边栏的用法，它也可以用于其他附加信息的展示，例如广告、引用、附属内容等\nfooter(底部内容)\n  - 通常包含与页面相关的版权信息、联系信息、导航链接等。\n</code></pre>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><pre><code>- 在没CSS样式的情况下，页面整体也会呈现很好的结构效果\n- 代码结构清晰，易于阅读，\n- 利于开发和维护 方便其他设备解析（如屏幕阅读器）根据语义渲染网页。\n- 有利于搜索引擎优化（SEO），搜索引擎爬虫会根据不同的标签来赋予不同的权重\n</code></pre>\n<h2 id=\"css选择器优先级\"><a href=\"#css选择器优先级\" class=\"headerlink\" title=\"css选择器优先级\"></a>css选择器优先级</h2><h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><pre><code>- 元素选择器：通过元素名称选取元素，如 p 选择所有 &lt;p&gt; 元素。\n- 类选择器：通过类名选取元素，以.开头，如 .my-class 选择所有具有 my-class 类名的元素。\n- ID选择器：通过元素的唯一ID选取元素，以#开头，如 #my-id 选择具有 my-id ID的元素。\n- 属性选择器：通过元素的属性值选取元素，如 [type=&quot;text&quot;] 选择所有 type 属性值为 text 的元素。\n- 后代选择器：通过元素的后代关系选取元素，使用空格分隔，如 div p 选择所有 &lt;p&gt; 元素，它们是 &lt;div&gt; 元素的后代。\n- 直接子元素选择器：通过元素的直接子元素关系选取元素，使用 &gt; 分隔，如 div &gt; p 选择所有 &lt;p&gt; 元素，它们是 &lt;div&gt; 元素的直接子元素。\n- 兄弟选择器：通过元素的兄弟关系选取元素，使用 + 分隔，如 h2 + p 选择紧接在 &lt;h2&gt; 元素后的 &lt;p&gt; 元素。\n- 伪类选择器：通过元素的状态或特定条件选取元素，以:开头，如 :hover 选择鼠标悬停在元素上的状态。\n- 伪元素选择器：通过元素的特定部分选取元素，以::开头，如 ::before 选择元素的前置内容。\n</code></pre>\n<h3 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h3><pre><code>1. ！important\n2. 内联样式\n3. ID选择器\n4. 类选择器，属性选择器，伪类选择器\n5. 元素选择器，伪元素选择器\n6. 通配符，子类，相邻选择器\n</code></pre>\n<h2 id=\"position-属性的值有哪些及其区别\"><a href=\"#position-属性的值有哪些及其区别\" class=\"headerlink\" title=\"position 属性的值有哪些及其区别\"></a>position 属性的值有哪些及其区别</h2><h3 id=\"static-默认值\"><a href=\"#static-默认值\" class=\"headerlink\" title=\"static(默认值):\"></a>static(默认值):</h3><pre><code>- 元素按照正常文档流进行定位，不受 top、right、bottom、left 等属性的影响。\n</code></pre>\n<h3 id=\"relative-相对定位\"><a href=\"#relative-相对定位\" class=\"headerlink\" title=\"relative(相对定位):\"></a>relative(相对定位):</h3><pre><code>- 元素相对于其正常位置进行定位，通过设置 top、right、bottom、left 属性来调整元素的位置。相对定位不会影响其他元素的布局。\n</code></pre>\n<h3 id=\"absolute-绝对定位\"><a href=\"#absolute-绝对定位\" class=\"headerlink\" title=\"absolute(绝对定位):\"></a>absolute(绝对定位):</h3><pre><code>- 元素相对于其最近的已定位（非 static）的父元素进行定位，如果没有已定位的父元素，则相对于文档根元素进行定位。通过设置 top、right、 bottom、  left 属性来指定元素的精确位置。绝对定位会使元素脱离正常文档流，并且不会为其保留空间。\n</code></pre>\n<h3 id=\"fixed-固定定位\"><a href=\"#fixed-固定定位\" class=\"headerlink\" title=\"fixed(固定定位):\"></a>fixed(固定定位):</h3><pre><code>- 元素相对于视口进行定位，即无论页面滚动与否，元素都会保持在固定位置。通过设置 top、right、bottom、left 属性来指定元素的精确位置。\n</code></pre>\n<h3 id=\"sticky-粘性定位\"><a href=\"#sticky-粘性定位\" class=\"headerlink\" title=\"sticky(粘性定位):\"></a>sticky(粘性定位):</h3><pre><code>- 元素根据正常文档流进行定位，但在滚动到特定阈值时，会变为固定定位。通过设置 top、right、bottom、left 属性和 top、bottom 等阈值来调整元素的位置和触发条件。\n</code></pre>\n<h2 id=\"box-sizing属性-盒模型\"><a href=\"#box-sizing属性-盒模型\" class=\"headerlink\" title=\"box-sizing属性(盒模型)\"></a>box-sizing属性(盒模型)</h2><h3 id=\"content-box-标准盒模型\"><a href=\"#content-box-标准盒模型\" class=\"headerlink\" title=\"content-box(标准盒模型)\"></a>content-box(标准盒模型)</h3><pre><code>- 宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。\n- width 指 content 部分的宽度。\n</code></pre>\n<h3 id=\"border-box-IE-盒子模型-怪异盒模型\"><a href=\"#border-box-IE-盒子模型-怪异盒模型\" class=\"headerlink\" title=\"border-box(IE 盒子模型 | 怪异盒模型)\"></a>border-box(IE 盒子模型 | 怪异盒模型)</h3><pre><code>- 为元素设定的宽度和高度决定了元素的边框盒。\n- width 表示 content+padding+border 这三个部分的宽度。\n</code></pre>\n<h3 id=\"inherit\"><a href=\"#inherit\" class=\"headerlink\" title=\"inherit\"></a>inherit</h3><pre><code>- 继承父元素的 box-sizing 值。\n</code></pre>\n<h2 id=\"BFC（块级格式上下文）\"><a href=\"#BFC（块级格式上下文）\" class=\"headerlink\" title=\"BFC（块级格式上下文）\"></a>BFC（块级格式上下文）</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><pre><code>- 块级格式化上下文（Block Formatting Context，BFC）是CSS中的一个概念，用于描述元素在布局时的一种独立的渲染区域。每个BFC都是一个独立的容器，内部元素的布局不会影响到外部元素。\n</code></pre>\n<h3 id=\"主要特征\"><a href=\"#主要特征\" class=\"headerlink\" title=\"主要特征\"></a>主要特征</h3><pre><code>- 内部元素垂直方向的边距会发生重叠：当多个块级元素嵌套在同一个BFC中时，它们的上下边距可能会发生重叠。\n- BFC可以包含浮动元素：当一个元素触发了BFC，它可以包含浮动元素，并阻止浮动元素溢出到其他区域。\n- BFC可以阻止浮动元素造成的父元素塌陷：当一个元素的子元素都浮动时，如果父元素触发了BFC，它会根据子元素的高度进行布局，不会因为浮动元素而塌陷。\n- BFC在页面布局中的应用：通过触发元素的BFC特性，可以实现一些布局效果，如清除浮动、创建自适应的多栏布局等。\n</code></pre>\n<h3 id=\"触发方式\"><a href=\"#触发方式\" class=\"headerlink\" title=\"触发方式\"></a>触发方式</h3><pre><code>- 根元素（&lt;html&gt;）是一个BFC。\n- 设置元素的 float 属性为除 none 以外的值。\n- 设置元素的 position 属性为 absolute 或 fixed。\n- 设置元素的 display 属性为 inline-block、table-cell、table-caption 或 flex。\n</code></pre>\n<h2 id=\"元素水平垂直居中\"><a href=\"#元素水平垂直居中\" class=\"headerlink\" title=\"元素水平垂直居中\"></a>元素水平垂直居中</h2><h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><pre><code><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h3 id=\"定位实现\"><a href=\"#定位实现\" class=\"headerlink\" title=\"定位实现\"></a>定位实现</h3><ul>\n<li>方式一:<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>方式二:   <figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"flex布局-1\"><a href=\"#flex布局-1\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><pre><code><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n<h2 id=\"隐藏元素的方式\"><a href=\"#隐藏元素的方式\" class=\"headerlink\" title=\"隐藏元素的方式\"></a>隐藏元素的方式</h2><ul>\n<li>display: none;<ul>\n<li>元素完全被隐藏掉，文档流中不占据空间，改变布局。</li>\n<li>不可触发事件。</li>\n</ul>\n</li>\n<li>visibility: hidden;<ul>\n<li>元素隐藏掉，但仍占据空间，不改变布局。</li>\n<li>不可触发事件</li>\n</ul>\n</li>\n<li>opacity: 0;<ul>\n<li>元素变为透明，视觉上不可见，仍占据空间。</li>\n<li>可触发事件。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"css实现三角形\"><a href=\"#css实现三角形\" class=\"headerlink\" title=\"css实现三角形\"></a>css实现三角形</h2><ul>\n<li>思路： 宽高设为0，边框给一定粗度，然后将三边设置为透明</li>\n<li>使用边框：<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>使用伪元素：<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.element</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-top</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">50px</span> solid transparent;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">100px</span> solid blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"伪类和伪元素的区别\"><a href=\"#伪类和伪元素的区别\" class=\"headerlink\" title=\"伪类和伪元素的区别\"></a>伪类和伪元素的区别</h2><ul>\n<li>伪类选择的是满足某个条件的元素，而伪元素选择的是元素的某个部分。</li>\n<li>伪类以单冒号（:）开头，伪元素以双冒号（::）开头。</li>\n<li>伪类用于选择元素的状态或行为，而伪元素用于插入或生成元素的内容。</li>\n</ul>\n<h2 id=\"实现响应式设计\"><a href=\"#实现响应式设计\" class=\"headerlink\" title=\"实现响应式设计\"></a>实现响应式设计</h2><h3 id=\"媒体查询\"><a href=\"#媒体查询\" class=\"headerlink\" title=\"媒体查询\"></a>媒体查询</h3><ul>\n<li>媒体查询是 CSS 中的一种功能，它允许根据不同的媒体特性（如屏幕宽度、设备类型等）应用不同的样式。通过在 CSS 中定义不同的媒体查询规则，可以根据设备的特征为不同的屏幕尺寸提供不同的布局和样式。</li>\n</ul>\n<h3 id=\"弹性网格布局\"><a href=\"#弹性网格布局\" class=\"headerlink\" title=\"弹性网格布局\"></a>弹性网格布局</h3><ul>\n<li>弹性网格布局使用相对单位（如百分比）来定义网格的列宽和行高，使得布局可以根据屏幕尺寸的变化自动调整。通过使用弹性网格布局，网页的各个元素可以根据屏幕大小灵活地改变宽度和位置。</li>\n</ul>\n<h3 id=\"流式布局\"><a href=\"#流式布局\" class=\"headerlink\" title=\"流式布局\"></a>流式布局</h3><ul>\n<li>流式布局使用相对单位和百分比来定义元素的尺寸，使得页面可以根据屏幕尺寸进行伸缩。相对于固定的像素单位，流式布局可以更好地适应不同设备的屏幕尺寸，提供更好的响应性。</li>\n</ul>\n<h3 id=\"图片响应式设计\"><a href=\"#图片响应式设计\" class=\"headerlink\" title=\"图片响应式设计\"></a>图片响应式设计</h3><ul>\n<li>图片响应式设计通过使用不同的图片源（如不同大小或分辨率的图片）来适应不同的屏幕尺寸。可以使用 CSS 的 max-width 属性和 <img> 标签的 srcset 属性来实现图片的响应式展示，以确保在不同设备上加载适合的图片。</li>\n</ul>\n<h3 id=\"设备像素比\"><a href=\"#设备像素比\" class=\"headerlink\" title=\"设备像素比\"></a>设备像素比</h3><ul>\n<li>设备像素比是设备物理像素与 CSS 像素之间的比率。通过使用媒体查询和 CSS 的 min-device-pixel-ratio 或 max-device-pixel-ratio 属性，可以针对不同的设备像素比提供不同的样式和布局。<h4 id=\"min-device-pixel-ratio-amp-amp-max-device-pixel-ratio\"><a href=\"#min-device-pixel-ratio-amp-amp-max-device-pixel-ratio\" class=\"headerlink\" title=\"min-device-pixel-ratio &amp;&amp; max-device-pixel-ratio\"></a>min-device-pixel-ratio &amp;&amp; max-device-pixel-ratio</h4><ul>\n<li>是一个用于媒体查询的 CSS 属性，用于检测设备的像素密度。它用于确定设备物理像素和 CSS 像素之间的比率，并根据设备的像素密度应用不同的样式或布局<br><font color=#00FFFF>例：</font>下面的媒体查询将应用于 min-device-pixel-ratio 属性，仅在设备像素密度比率大于或等于 2 的情况下生效<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">-webkit-min-device-pixel-ratio</span>: <span class=\"number\">2</span>),</span><br><span class=\"line\">      (<span class=\"attribute\">min--moz-device-pixel-ratio</span>: <span class=\"number\">2</span>),</span><br><span class=\"line\">      (<span class=\"attribute\">min-device-pixel-ratio</span>: <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* 根据高像素密度设备的需要应用样式或布局 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<font color=red>注：</font> min-device-pixel-ratio 属性的值是一个 <font color=red>浮点数</font>，可以根据具体需求进行调整和匹配。同时，由于不同浏览器和设备对于 min-device-pixel-ratio 的支持可能存在差异，建议在使用时进行适当的兼容性处理和测试。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"优雅降级和渐进增强\"><a href=\"#优雅降级和渐进增强\" class=\"headerlink\" title=\"优雅降级和渐进增强\"></a>优雅降级和渐进增强</h2><h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li>优雅降级和渐进增强是两种前端开发的策略，用于确保网站或应用在不同浏览器或设备上具备基本的可用性和用户体验。</li>\n</ul>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><pre><code>- 优雅降级是指首先针对具有较高性能和功能的现代浏览器开发网站或应用，然后逐步提供对较旧或不支持某些功能的浏览器的支持。\n- 渐进增强是指从基本的、核心功能开始，然后根据浏览器的能力逐步增强网站或应用的功能和体验。\n</code></pre>\n<h2 id=\"动画（animation）\"><a href=\"#动画（animation）\" class=\"headerlink\" title=\"动画（animation）\"></a>动画（animation）</h2><h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li>animation-name：定义动画的名称，对应关键帧规则中的动画名称。</li>\n<li>animation-duration：指定动画的持续时间，单位可以是秒（s）或毫秒（ms）。</li>\n<li>animation-timing-function：设置动画的时间函数，控制动画的速度变化。</li>\n<li>animation-delay：指定动画开始之前的延迟时间，单位可以是秒（s）或毫秒（ms）。</li>\n<li>animation-iteration-count：定义动画的播放次数，可以是具体的次数或 infinite（无限循环）。</li>\n<li>animation-direction：指定动画的播放方向，可以是 normal（正向播放）、reverse（反向播放）或 alternate（来回播放）。</li>\n<li>animation-fill-mode：设置动画在播放之前和之后的样式状态，可以是 none、forwards、backwards 或 both。</li>\n<li>animation-play-state：控制动画的播放状态，可以是 paused（暂停）或 running（播放）。<br>  <font color=red>注：</font> 除了上述属性外，还有一些与动画相关的属性，如 <font color=red>transform、opacity、transition</font> 等，它们可以与动画属性结合使用，实现更丰富的动画效果。<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@keyframes</span> fade-in &#123;</span><br><span class=\"line\">  <span class=\"number\">0%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"number\">100%</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.element</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">animation-name</span>: fade-in;</span><br><span class=\"line\">  <span class=\"attribute\">animation-duration</span>: <span class=\"number\">2s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation-delay</span>: <span class=\"number\">1s</span>;</span><br><span class=\"line\">  <span class=\"attribute\">animation-timing-function</span>: ease-in-out;</span><br><span class=\"line\">  <span class=\"attribute\">animation-iteration-count</span>: infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;!-- 上述示例定义了一个名为 &quot;fade-in&quot; 的动画，通过逐渐改变元素的透明度，实现了一个淡入效果。然后将动画应用于具有 &quot;<span class=\"selector-class\">.element</span>&quot; 类的元素，并设置动画的持续时间为 <span class=\"number\">2</span> 秒，延迟时间为 <span class=\"number\">1</span> 秒，时间函数为 ease-in-out，并无限循环播放。通过组合和调整这些动画属性，可以创建各种各样的 CSS 动画效果，如淡入淡出、平移、旋转、缩放等。根据具体的需求和创意，可以灵活运用这些属性来设计和实现自定义的动画效果。 --&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"如何实现溢出省略号\"><a href=\"#如何实现溢出省略号\" class=\"headerlink\" title=\"如何实现溢出省略号\"></a>如何实现溢出省略号</h2><h3 id=\"单行省略号\"><a href=\"#单行省略号\" class=\"headerlink\" title=\"单行省略号\"></a>单行省略号</h3>  <figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ellipsis</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>; <span class=\"comment\">/* 设置容器的宽度，根据需要进行调整 */</span></span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">white-space</span>: nowrap;</span><br><span class=\"line\">  <span class=\"attribute\">text-overflow</span>: ellipsis;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多行省略号\"><a href=\"#多行省略号\" class=\"headerlink\" title=\"多行省略号\"></a>多行省略号</h3><pre><code><figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.ellipsis</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">  -webkit-box-orient: vertical;</span><br><span class=\"line\">  -webkit-line-clamp: <span class=\"number\">3</span>; <span class=\"comment\">/* 设置显示的最大行数，根据需要进行调整 */</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</code></pre>\n"},{"title":"vue 集成 only office 实现文档编辑，预览功能","cover":"/img/post-onlyoffice-01.jpg","_content":"\n上司让使用only office实现一个预览编辑的功能，查找文档后找到了如下方法，便记录了下来\n\n## 基本配置使用\n  ### 引入后台配置好的only office服务器\n  1. 直接在public下的index.html引入\n  ```javaScript\n    <script type='text/javascript' src='http://ip:port/web-apps/apps/api/documents/api.js'></script>\n  ```\n\n  2. 在created函数中引入\n  ```javaScript\n    let script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = http://ip:port/web-apps/apps/api/documents/api.js\n    document.getElementsByTagName('head')[0].appendChild(script);\n  ```\n\n## Vue组件封装\n```javaScript\n<template>\n    <div id=\"monitorOffice\"></div>\n</template>\n<script>\nimport {handleDocType} from \"../common/utils\"\n    export default {\n        props: {\n            option: {\n                type: Object,\n                default: () => {\n                    return {}\n                }\n            }\n        },\n        data() {\n            return {\n                doctype: ''\n            }\n        },\n        mounted() {\n            if (this.option.url)\n                this.setEditor(this.option)\n        },\n        methods: {\n            setEditor(option) {\n               this.doctype = handleDocType(option.fileType);\n                // office配置参数\n                let config = {\n                    document: {\n                        fileType: option.fileType,\n                        key: \"\",\n                        title: option.title,\n                        permissions: {\n                            comment: false,\n                            download: false,\n                            modifyContentControl: true,\n                            modifyFilter: true,\n                            print: false,\n                            edit: option.isEdit,//是否可以编辑: 只能查看，传false\n                            // \"fillForms\": true,//是否可以填写表格，如果将mode参数设置为edit，则填写表单仅对文档编辑器可用。 默认值与edit或review参数的值一致。\n                            // \"review\": true //跟踪变化\n                        },\n                        url: option.url\n                    },\n                    documentType: this.doctype,\n                    editorConfig: {\n                        callbackUrl: option.editUrl,//\"编辑word后保存时回调的地址，这个api需要自己写了，将编辑后的文件通过这个api保存到自己想要的位置\n                        lang: \"zh\",//语言设置\n                        customization: {\n                            autosave: false,//是否自动保存\n                            chat: false,\n                            comments: false,\n                            help: false,\n                            // \"hideRightMenu\": false,//定义在第一次加载时是显示还是隐藏右侧菜单。 默认值为false\n                            logo: {\n                                image: \"https://file.iviewui.com/icon/viewlogo.png\",\n                                imageEmbedded: \"https://file.iviewui.com/icon/viewlogo.png\",\n                            },\n                            spellcheck: true,//拼写检查\n                        },\n                    },\n                    width: \"100%\",\n                    height: \"100%\",\n                };\n                let docEditor = new DocsAPI.DocEditor(\"monitorOffice\", config);\n            },\n        },\n        watch: {\n            option: {\n                handler: function (n, o) {\n                    this.setEditor(n);\n                    this.doctype = handleDocType(n.fileType);\n                },\n                deep: true,\n            }\n        }\n    }\n</script>\n```\n\n## 组件使用\n```javaScript\n<template>\n    <div class=\"monitor-report\">\n        <Upload ref=\"upload\" accept=\".doc,.docx\" :action=\"action\" :headers=\"header\" :format=\"['doc','docx']\"\n                :on-success=\"handleSuccess\"\n                :show-upload-list=\"false\" :before-upload=\"handleBeforeUpload\" :on-format-error=\"handleFormatError\">\n            <Button :loading=\"loading\" class=\"up-class\">上传</Button>\n            <span>（文件格式为：doc,docx）</span>\n        </Upload>\n        <div class=\"office\" v-if=\"pageLoading\">\n            <MonitorOffice :option=\"option\"></MonitorOffice>\n        </div>\n    </div>\n</template>\n<script>\n    // js\n    import axios from \"axios\"\n    import {GetMonitorReport} from \"./api/template\"\n    import {USER_NAME_SESSION, USER_ID_SESSION} from \"./common/storage\";\n    // 组件\n    import MonitorOffice from \"./components/monitor-office\"\n\n    export default {\n        components: {\n            MonitorOffice\n        },\n        data() {\n            return {\n                // 上传文件参数\n                header: {\n                    Authorization: `bearer ${sessionStorage.getItem(\"token\")}`,\n                },\n                action: axios.defaults.baseURL + \"/report/document/template\",\n                file: null,\n                loading: false,\n                // office配置参数\n                option: {\n                    url: \"\",\n                    isEdit: false,\n                    fileType: \"\",\n                    title: \"\"\n                },\n                pageLoading: false\n            }\n        },\n        mounted() {\n            this.init();\n        },\n        methods: {\n            init() {\n                this.GetMonitorReport();\n            },\n            // 上传文件的格式验证\n            handleFormatError(file) {\n                this.$Message.warning(file.name + '格式不正确');\n                this.loading = false;\n            },\n            // 上传之前\n            handleBeforeUpload(file) {\n                this.file = file;\n                this.onUpload();\n                return false;\n            },\n            onUpload() {\n                this.loading = true;\n                let _baseURL = axios.defaults.baseURL;\n                this.action = `${_baseURL}/report/document/template`;\n                setTimeout(() => {\n                    this.$refs.upload.post(this.file);\n                }, 1000)\n            },\n            // 导入成功时\n            handleSuccess(res) {\n                this.loading = false;\n                if (res.status) {\n                    this.$Message.success(\"上传成功\");\n                    // 这里重新上传文件，only office不会覆盖，所以先刷新解决\n                    // location.reload();\n                    this.GetMonitorReport();\n                }\n            },\n            // 获取项目下监察报告模板\n            GetMonitorReport() {\n                this.pageLoading = false\n                GetMonitorReport().then(res => {\n                    if (res.status) {\n                        let data = res.data;\n                        if (data) {\n                            this.option = {\n                                url: data.fileViewPath,\n                                fileType: data.fileType,\n                                title: \"\",\n                                isEdit: false,\n                            }\n                        }\n                        this.pageLoading = true\n                    }\n                })\n            }\n        }\n    }\n</script>\n<style lang=\"less\" scoped>\n    .monitor-report {\n        .up-class {\n            margin-bottom: 10px;\n        }\n\n        .office {\n            height: 100vh;\n        }\n    }\n</style>\n\n```\n\n## 配置项中documentType 动态设置\n```javaScript\nexport function handleDocType(fileType) {\n    let docType = '';\n    let fileTypesDoc = [\n        'doc', 'docm', 'docx', 'dot', 'dotm', 'dotx', 'epub', 'fodt', 'htm', 'html', 'mht', 'odt', 'ott', 'pdf', 'rtf', 'txt', 'djvu', 'xps'\n    ];\n    let fileTypesCsv = [\n        'csv', 'fods', 'ods', 'ots', 'xls', 'xlsm', 'xlsx', 'xlt', 'xltm', 'xltx'\n    ];\n    let fileTypesPPt = [\n        'fodp', 'odp', 'otp', 'pot', 'potm', 'potx', 'pps', 'ppsm', 'ppsx', 'ppt', 'pptm', 'pptx'\n    ];\n    if (fileTypesDoc.includes(fileType)) {\n        docType = 'text'\n    }\n    if (fileTypesCsv.includes(fileType)) {\n        docType = 'spreadsheet'\n    }\n    if (fileTypesPPt.includes(fileType)) {\n        docType = 'presentation'\n    }\n    return docType;\n}\n\n```\n","source":"_posts/only-office编辑预览.md","raw":"---\ntitle: vue 集成 only office 实现文档编辑，预览功能\ncover: /img/post-onlyoffice-01.jpg\ncategories:\n  - 插件使用\n---\n\n上司让使用only office实现一个预览编辑的功能，查找文档后找到了如下方法，便记录了下来\n\n## 基本配置使用\n  ### 引入后台配置好的only office服务器\n  1. 直接在public下的index.html引入\n  ```javaScript\n    <script type='text/javascript' src='http://ip:port/web-apps/apps/api/documents/api.js'></script>\n  ```\n\n  2. 在created函数中引入\n  ```javaScript\n    let script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src = http://ip:port/web-apps/apps/api/documents/api.js\n    document.getElementsByTagName('head')[0].appendChild(script);\n  ```\n\n## Vue组件封装\n```javaScript\n<template>\n    <div id=\"monitorOffice\"></div>\n</template>\n<script>\nimport {handleDocType} from \"../common/utils\"\n    export default {\n        props: {\n            option: {\n                type: Object,\n                default: () => {\n                    return {}\n                }\n            }\n        },\n        data() {\n            return {\n                doctype: ''\n            }\n        },\n        mounted() {\n            if (this.option.url)\n                this.setEditor(this.option)\n        },\n        methods: {\n            setEditor(option) {\n               this.doctype = handleDocType(option.fileType);\n                // office配置参数\n                let config = {\n                    document: {\n                        fileType: option.fileType,\n                        key: \"\",\n                        title: option.title,\n                        permissions: {\n                            comment: false,\n                            download: false,\n                            modifyContentControl: true,\n                            modifyFilter: true,\n                            print: false,\n                            edit: option.isEdit,//是否可以编辑: 只能查看，传false\n                            // \"fillForms\": true,//是否可以填写表格，如果将mode参数设置为edit，则填写表单仅对文档编辑器可用。 默认值与edit或review参数的值一致。\n                            // \"review\": true //跟踪变化\n                        },\n                        url: option.url\n                    },\n                    documentType: this.doctype,\n                    editorConfig: {\n                        callbackUrl: option.editUrl,//\"编辑word后保存时回调的地址，这个api需要自己写了，将编辑后的文件通过这个api保存到自己想要的位置\n                        lang: \"zh\",//语言设置\n                        customization: {\n                            autosave: false,//是否自动保存\n                            chat: false,\n                            comments: false,\n                            help: false,\n                            // \"hideRightMenu\": false,//定义在第一次加载时是显示还是隐藏右侧菜单。 默认值为false\n                            logo: {\n                                image: \"https://file.iviewui.com/icon/viewlogo.png\",\n                                imageEmbedded: \"https://file.iviewui.com/icon/viewlogo.png\",\n                            },\n                            spellcheck: true,//拼写检查\n                        },\n                    },\n                    width: \"100%\",\n                    height: \"100%\",\n                };\n                let docEditor = new DocsAPI.DocEditor(\"monitorOffice\", config);\n            },\n        },\n        watch: {\n            option: {\n                handler: function (n, o) {\n                    this.setEditor(n);\n                    this.doctype = handleDocType(n.fileType);\n                },\n                deep: true,\n            }\n        }\n    }\n</script>\n```\n\n## 组件使用\n```javaScript\n<template>\n    <div class=\"monitor-report\">\n        <Upload ref=\"upload\" accept=\".doc,.docx\" :action=\"action\" :headers=\"header\" :format=\"['doc','docx']\"\n                :on-success=\"handleSuccess\"\n                :show-upload-list=\"false\" :before-upload=\"handleBeforeUpload\" :on-format-error=\"handleFormatError\">\n            <Button :loading=\"loading\" class=\"up-class\">上传</Button>\n            <span>（文件格式为：doc,docx）</span>\n        </Upload>\n        <div class=\"office\" v-if=\"pageLoading\">\n            <MonitorOffice :option=\"option\"></MonitorOffice>\n        </div>\n    </div>\n</template>\n<script>\n    // js\n    import axios from \"axios\"\n    import {GetMonitorReport} from \"./api/template\"\n    import {USER_NAME_SESSION, USER_ID_SESSION} from \"./common/storage\";\n    // 组件\n    import MonitorOffice from \"./components/monitor-office\"\n\n    export default {\n        components: {\n            MonitorOffice\n        },\n        data() {\n            return {\n                // 上传文件参数\n                header: {\n                    Authorization: `bearer ${sessionStorage.getItem(\"token\")}`,\n                },\n                action: axios.defaults.baseURL + \"/report/document/template\",\n                file: null,\n                loading: false,\n                // office配置参数\n                option: {\n                    url: \"\",\n                    isEdit: false,\n                    fileType: \"\",\n                    title: \"\"\n                },\n                pageLoading: false\n            }\n        },\n        mounted() {\n            this.init();\n        },\n        methods: {\n            init() {\n                this.GetMonitorReport();\n            },\n            // 上传文件的格式验证\n            handleFormatError(file) {\n                this.$Message.warning(file.name + '格式不正确');\n                this.loading = false;\n            },\n            // 上传之前\n            handleBeforeUpload(file) {\n                this.file = file;\n                this.onUpload();\n                return false;\n            },\n            onUpload() {\n                this.loading = true;\n                let _baseURL = axios.defaults.baseURL;\n                this.action = `${_baseURL}/report/document/template`;\n                setTimeout(() => {\n                    this.$refs.upload.post(this.file);\n                }, 1000)\n            },\n            // 导入成功时\n            handleSuccess(res) {\n                this.loading = false;\n                if (res.status) {\n                    this.$Message.success(\"上传成功\");\n                    // 这里重新上传文件，only office不会覆盖，所以先刷新解决\n                    // location.reload();\n                    this.GetMonitorReport();\n                }\n            },\n            // 获取项目下监察报告模板\n            GetMonitorReport() {\n                this.pageLoading = false\n                GetMonitorReport().then(res => {\n                    if (res.status) {\n                        let data = res.data;\n                        if (data) {\n                            this.option = {\n                                url: data.fileViewPath,\n                                fileType: data.fileType,\n                                title: \"\",\n                                isEdit: false,\n                            }\n                        }\n                        this.pageLoading = true\n                    }\n                })\n            }\n        }\n    }\n</script>\n<style lang=\"less\" scoped>\n    .monitor-report {\n        .up-class {\n            margin-bottom: 10px;\n        }\n\n        .office {\n            height: 100vh;\n        }\n    }\n</style>\n\n```\n\n## 配置项中documentType 动态设置\n```javaScript\nexport function handleDocType(fileType) {\n    let docType = '';\n    let fileTypesDoc = [\n        'doc', 'docm', 'docx', 'dot', 'dotm', 'dotx', 'epub', 'fodt', 'htm', 'html', 'mht', 'odt', 'ott', 'pdf', 'rtf', 'txt', 'djvu', 'xps'\n    ];\n    let fileTypesCsv = [\n        'csv', 'fods', 'ods', 'ots', 'xls', 'xlsm', 'xlsx', 'xlt', 'xltm', 'xltx'\n    ];\n    let fileTypesPPt = [\n        'fodp', 'odp', 'otp', 'pot', 'potm', 'potx', 'pps', 'ppsm', 'ppsx', 'ppt', 'pptm', 'pptx'\n    ];\n    if (fileTypesDoc.includes(fileType)) {\n        docType = 'text'\n    }\n    if (fileTypesCsv.includes(fileType)) {\n        docType = 'spreadsheet'\n    }\n    if (fileTypesPPt.includes(fileType)) {\n        docType = 'presentation'\n    }\n    return docType;\n}\n\n```\n","slug":"only-office编辑预览","published":1,"date":"2023-06-02T06:50:24.724Z","updated":"2023-06-05T11:37:41.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clijr0jcr000c44vcc0ec63iz","content":"<p>上司让使用only office实现一个预览编辑的功能，查找文档后找到了如下方法，便记录了下来</p>\n<h2 id=\"基本配置使用\"><a href=\"#基本配置使用\" class=\"headerlink\" title=\"基本配置使用\"></a>基本配置使用</h2><h3 id=\"引入后台配置好的only-office服务器\"><a href=\"#引入后台配置好的only-office服务器\" class=\"headerlink\" title=\"引入后台配置好的only office服务器\"></a>引入后台配置好的only office服务器</h3><ol>\n<li><p>直接在public下的index.html引入</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&#x27;text/javascript&#x27;</span> src=<span class=\"string\">&#x27;http://ip:port/web-apps/apps/api/documents/api.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在created函数中引入</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">script.<span class=\"property\">type</span> = <span class=\"string\">&#x27;text/javascript&#x27;</span>;</span><br><span class=\"line\">script.<span class=\"property\">src</span> = <span class=\"attr\">http</span>:<span class=\"comment\">//ip:port/web-apps/apps/api/documents/api.js</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;head&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">appendChild</span>(script);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Vue组件封装\"><a href=\"#Vue组件封装\" class=\"headerlink\" title=\"Vue组件封装\"></a>Vue组件封装</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;monitorOffice&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123;handleDocType&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../common/utils&quot;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">props</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">option</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">type</span>: <span class=\"title class_\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"keyword\">return</span> &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">doctype</span>: <span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">option</span>.<span class=\"property\">url</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">setEditor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">option</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">setEditor</span>(<span class=\"params\">option</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">               <span class=\"variable language_\">this</span>.<span class=\"property\">doctype</span> = <span class=\"title function_\">handleDocType</span>(option.<span class=\"property\">fileType</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"comment\">// office配置参数</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"keyword\">let</span> config = &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">document</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">fileType</span>: option.<span class=\"property\">fileType</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">key</span>: <span class=\"string\">&quot;&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">title</span>: option.<span class=\"property\">title</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">permissions</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">comment</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">download</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">modifyContentControl</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">modifyFilter</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">print</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">edit</span>: option.<span class=\"property\">isEdit</span>,<span class=\"comment\">//是否可以编辑: 只能查看，传false</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"comment\">// &quot;fillForms&quot;: true,//是否可以填写表格，如果将mode参数设置为edit，则填写表单仅对文档编辑器可用。 默认值与edit或review参数的值一致。</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"comment\">// &quot;review&quot;: true //跟踪变化</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">url</span>: option.<span class=\"property\">url</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">documentType</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">doctype</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">editorConfig</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">callbackUrl</span>: option.<span class=\"property\">editUrl</span>,<span class=\"comment\">//&quot;编辑word后保存时回调的地址，这个api需要自己写了，将编辑后的文件通过这个api保存到自己想要的位置</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">lang</span>: <span class=\"string\">&quot;zh&quot;</span>,<span class=\"comment\">//语言设置</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">customization</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">autosave</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//是否自动保存</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">chat</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">comments</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">help</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"comment\">// &quot;hideRightMenu&quot;: false,//定义在第一次加载时是显示还是隐藏右侧菜单。 默认值为false</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">logo</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                                <span class=\"attr\">image</span>: <span class=\"string\">&quot;https://file.iviewui.com/icon/viewlogo.png&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                                <span class=\"attr\">imageEmbedded</span>: <span class=\"string\">&quot;https://file.iviewui.com/icon/viewlogo.png&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">spellcheck</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//拼写检查</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">width</span>: <span class=\"string\">&quot;100%&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">height</span>: <span class=\"string\">&quot;100%&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"keyword\">let</span> docEditor = <span class=\"keyword\">new</span> <span class=\"title class_\">DocsAPI</span>.<span class=\"title class_\">DocEditor</span>(<span class=\"string\">&quot;monitorOffice&quot;</span>, config);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">watch</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">option</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">handler</span>: <span class=\"keyword\">function</span> (<span class=\"params\">n, o</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setEditor</span>(n);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">doctype</span> = <span class=\"title function_\">handleDocType</span>(n.<span class=\"property\">fileType</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件使用\"><a href=\"#组件使用\" class=\"headerlink\" title=\"组件使用\"></a>组件使用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;monitor-report&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Upload</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;upload&quot;</span> <span class=\"attr\">accept</span>=<span class=\"string\">&quot;.doc,.docx&quot;</span> <span class=\"attr\">:action</span>=<span class=\"string\">&quot;action&quot;</span> <span class=\"attr\">:headers</span>=<span class=\"string\">&quot;header&quot;</span> <span class=\"attr\">:format</span>=<span class=\"string\">&quot;[&#x27;doc&#x27;,&#x27;docx&#x27;]&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">:on-success</span>=<span class=\"string\">&quot;handleSuccess&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">:show-upload-list</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">:before-upload</span>=<span class=\"string\">&quot;handleBeforeUpload&quot;</span> <span class=\"attr\">:on-format-error</span>=<span class=\"string\">&quot;handleFormatError&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">:loading</span>=<span class=\"string\">&quot;loading&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;up-class&quot;</span>&gt;</span>上传<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>（文件格式为：doc,docx）<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Upload</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;office&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;pageLoading&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">MonitorOffice</span> <span class=\"attr\">:option</span>=<span class=\"string\">&quot;option&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MonitorOffice</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// js</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">import</span> &#123;<span class=\"title class_\">GetMonitorReport</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./api/template&quot;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">import</span> &#123;<span class=\"variable constant_\">USER_NAME_SESSION</span>, <span class=\"variable constant_\">USER_ID_SESSION</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./common/storage&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 组件</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">import</span> <span class=\"title class_\">MonitorOffice</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/monitor-office&quot;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">components</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title class_\">MonitorOffice</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"comment\">// 上传文件参数</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">header</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"title class_\">Authorization</span>: <span class=\"string\">`bearer <span class=\"subst\">$&#123;<span class=\"variable language_\">sessionStorage</span>.getItem(<span class=\"string\">&quot;token&quot;</span>)&#125;</span>`</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">action</span>: axios.<span class=\"property\">defaults</span>.<span class=\"property\">baseURL</span> + <span class=\"string\">&quot;/report/document/template&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">file</span>: <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"comment\">// office配置参数</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">option</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">url</span>: <span class=\"string\">&quot;&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">isEdit</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">fileType</span>: <span class=\"string\">&quot;&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">title</span>: <span class=\"string\">&quot;&quot;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">pageLoading</span>: <span class=\"literal\">false</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"title class_\">GetMonitorReport</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"comment\">// 上传文件的格式验证</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">handleFormatError</span>(<span class=\"params\">file</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">$Message</span>.<span class=\"title function_\">warning</span>(file.<span class=\"property\">name</span> + <span class=\"string\">&#x27;格式不正确&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span> = <span class=\"literal\">false</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"comment\">// 上传之前</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">handleBeforeUpload</span>(<span class=\"params\">file</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">file</span> = file;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">onUpload</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">onUpload</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span> = <span class=\"literal\">true</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"keyword\">let</span> _baseURL = axios.<span class=\"property\">defaults</span>.<span class=\"property\">baseURL</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">action</span> = <span class=\"string\">`<span class=\"subst\">$&#123;_baseURL&#125;</span>/report/document/template`</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">upload</span>.<span class=\"title function_\">post</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">file</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;, <span class=\"number\">1000</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"comment\">// 导入成功时</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">handleSuccess</span>(<span class=\"params\">res</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span> = <span class=\"literal\">false</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"keyword\">if</span> (res.<span class=\"property\">status</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">$Message</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&quot;上传成功&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"comment\">// 这里重新上传文件，only office不会覆盖，所以先刷新解决</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"comment\">// location.reload();</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"variable language_\">this</span>.<span class=\"title class_\">GetMonitorReport</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"comment\">// 获取项目下监察报告模板</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title class_\">GetMonitorReport</span>() &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">pageLoading</span> = <span class=\"literal\">false</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"title class_\">GetMonitorReport</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"keyword\">if</span> (res.<span class=\"property\">status</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"keyword\">let</span> data = res.<span class=\"property\">data</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"keyword\">if</span> (data) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"variable language_\">this</span>.<span class=\"property\">option</span> = &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                                <span class=\"attr\">url</span>: data.<span class=\"property\">fileViewPath</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                                <span class=\"attr\">fileType</span>: data.<span class=\"property\">fileType</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                                <span class=\"attr\">title</span>: <span class=\"string\">&quot;&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                                <span class=\"attr\">isEdit</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">pageLoading</span> = <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;less&quot;</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"selector-class\">.monitor-report</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        <span class=\"selector-class\">.up-class</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        <span class=\"selector-class\">.office</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">            <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置项中documentType-动态设置\"><a href=\"#配置项中documentType-动态设置\" class=\"headerlink\" title=\"配置项中documentType 动态设置\"></a>配置项中documentType 动态设置</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleDocType</span>(<span class=\"params\">fileType</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> docType = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileTypesDoc = [</span><br><span class=\"line\">        <span class=\"string\">&#x27;doc&#x27;</span>, <span class=\"string\">&#x27;docm&#x27;</span>, <span class=\"string\">&#x27;docx&#x27;</span>, <span class=\"string\">&#x27;dot&#x27;</span>, <span class=\"string\">&#x27;dotm&#x27;</span>, <span class=\"string\">&#x27;dotx&#x27;</span>, <span class=\"string\">&#x27;epub&#x27;</span>, <span class=\"string\">&#x27;fodt&#x27;</span>, <span class=\"string\">&#x27;htm&#x27;</span>, <span class=\"string\">&#x27;html&#x27;</span>, <span class=\"string\">&#x27;mht&#x27;</span>, <span class=\"string\">&#x27;odt&#x27;</span>, <span class=\"string\">&#x27;ott&#x27;</span>, <span class=\"string\">&#x27;pdf&#x27;</span>, <span class=\"string\">&#x27;rtf&#x27;</span>, <span class=\"string\">&#x27;txt&#x27;</span>, <span class=\"string\">&#x27;djvu&#x27;</span>, <span class=\"string\">&#x27;xps&#x27;</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileTypesCsv = [</span><br><span class=\"line\">        <span class=\"string\">&#x27;csv&#x27;</span>, <span class=\"string\">&#x27;fods&#x27;</span>, <span class=\"string\">&#x27;ods&#x27;</span>, <span class=\"string\">&#x27;ots&#x27;</span>, <span class=\"string\">&#x27;xls&#x27;</span>, <span class=\"string\">&#x27;xlsm&#x27;</span>, <span class=\"string\">&#x27;xlsx&#x27;</span>, <span class=\"string\">&#x27;xlt&#x27;</span>, <span class=\"string\">&#x27;xltm&#x27;</span>, <span class=\"string\">&#x27;xltx&#x27;</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileTypesPPt = [</span><br><span class=\"line\">        <span class=\"string\">&#x27;fodp&#x27;</span>, <span class=\"string\">&#x27;odp&#x27;</span>, <span class=\"string\">&#x27;otp&#x27;</span>, <span class=\"string\">&#x27;pot&#x27;</span>, <span class=\"string\">&#x27;potm&#x27;</span>, <span class=\"string\">&#x27;potx&#x27;</span>, <span class=\"string\">&#x27;pps&#x27;</span>, <span class=\"string\">&#x27;ppsm&#x27;</span>, <span class=\"string\">&#x27;ppsx&#x27;</span>, <span class=\"string\">&#x27;ppt&#x27;</span>, <span class=\"string\">&#x27;pptm&#x27;</span>, <span class=\"string\">&#x27;pptx&#x27;</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileTypesDoc.<span class=\"title function_\">includes</span>(fileType)) &#123;</span><br><span class=\"line\">        docType = <span class=\"string\">&#x27;text&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileTypesCsv.<span class=\"title function_\">includes</span>(fileType)) &#123;</span><br><span class=\"line\">        docType = <span class=\"string\">&#x27;spreadsheet&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileTypesPPt.<span class=\"title function_\">includes</span>(fileType)) &#123;</span><br><span class=\"line\">        docType = <span class=\"string\">&#x27;presentation&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> docType;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover_type":"img","excerpt":"","more":"<p>上司让使用only office实现一个预览编辑的功能，查找文档后找到了如下方法，便记录了下来</p>\n<h2 id=\"基本配置使用\"><a href=\"#基本配置使用\" class=\"headerlink\" title=\"基本配置使用\"></a>基本配置使用</h2><h3 id=\"引入后台配置好的only-office服务器\"><a href=\"#引入后台配置好的only-office服务器\" class=\"headerlink\" title=\"引入后台配置好的only office服务器\"></a>引入后台配置好的only office服务器</h3><ol>\n<li><p>直接在public下的index.html引入</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&#x27;text/javascript&#x27;</span> src=<span class=\"string\">&#x27;http://ip:port/web-apps/apps/api/documents/api.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在created函数中引入</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> script = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">script.<span class=\"property\">type</span> = <span class=\"string\">&#x27;text/javascript&#x27;</span>;</span><br><span class=\"line\">script.<span class=\"property\">src</span> = <span class=\"attr\">http</span>:<span class=\"comment\">//ip:port/web-apps/apps/api/documents/api.js</span></span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementsByTagName</span>(<span class=\"string\">&#x27;head&#x27;</span>)[<span class=\"number\">0</span>].<span class=\"title function_\">appendChild</span>(script);</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Vue组件封装\"><a href=\"#Vue组件封装\" class=\"headerlink\" title=\"Vue组件封装\"></a>Vue组件封装</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;monitorOffice&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"><span class=\"keyword\">import</span> &#123;handleDocType&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;../common/utils&quot;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">props</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">option</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">type</span>: <span class=\"title class_\">Object</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"keyword\">return</span> &#123;&#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">doctype</span>: <span class=\"string\">&#x27;&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">option</span>.<span class=\"property\">url</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">setEditor</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">option</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">setEditor</span>(<span class=\"params\">option</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">               <span class=\"variable language_\">this</span>.<span class=\"property\">doctype</span> = <span class=\"title function_\">handleDocType</span>(option.<span class=\"property\">fileType</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"comment\">// office配置参数</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"keyword\">let</span> config = &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">document</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">fileType</span>: option.<span class=\"property\">fileType</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">key</span>: <span class=\"string\">&quot;&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">title</span>: option.<span class=\"property\">title</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">permissions</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">comment</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">download</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">modifyContentControl</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">modifyFilter</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">print</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">edit</span>: option.<span class=\"property\">isEdit</span>,<span class=\"comment\">//是否可以编辑: 只能查看，传false</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"comment\">// &quot;fillForms&quot;: true,//是否可以填写表格，如果将mode参数设置为edit，则填写表单仅对文档编辑器可用。 默认值与edit或review参数的值一致。</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"comment\">// &quot;review&quot;: true //跟踪变化</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">url</span>: option.<span class=\"property\">url</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">documentType</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">doctype</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">editorConfig</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">callbackUrl</span>: option.<span class=\"property\">editUrl</span>,<span class=\"comment\">//&quot;编辑word后保存时回调的地址，这个api需要自己写了，将编辑后的文件通过这个api保存到自己想要的位置</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">lang</span>: <span class=\"string\">&quot;zh&quot;</span>,<span class=\"comment\">//语言设置</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"attr\">customization</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">autosave</span>: <span class=\"literal\">false</span>,<span class=\"comment\">//是否自动保存</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">chat</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">comments</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">help</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"comment\">// &quot;hideRightMenu&quot;: false,//定义在第一次加载时是显示还是隐藏右侧菜单。 默认值为false</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">logo</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                                <span class=\"attr\">image</span>: <span class=\"string\">&quot;https://file.iviewui.com/icon/viewlogo.png&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                                <span class=\"attr\">imageEmbedded</span>: <span class=\"string\">&quot;https://file.iviewui.com/icon/viewlogo.png&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"attr\">spellcheck</span>: <span class=\"literal\">true</span>,<span class=\"comment\">//拼写检查</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">width</span>: <span class=\"string\">&quot;100%&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">height</span>: <span class=\"string\">&quot;100%&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"keyword\">let</span> docEditor = <span class=\"keyword\">new</span> <span class=\"title class_\">DocsAPI</span>.<span class=\"title class_\">DocEditor</span>(<span class=\"string\">&quot;monitorOffice&quot;</span>, config);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">watch</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"attr\">option</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">handler</span>: <span class=\"keyword\">function</span> (<span class=\"params\">n, o</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setEditor</span>(n);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">doctype</span> = <span class=\"title function_\">handleDocType</span>(n.<span class=\"property\">fileType</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"组件使用\"><a href=\"#组件使用\" class=\"headerlink\" title=\"组件使用\"></a>组件使用</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;monitor-report&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Upload</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;upload&quot;</span> <span class=\"attr\">accept</span>=<span class=\"string\">&quot;.doc,.docx&quot;</span> <span class=\"attr\">:action</span>=<span class=\"string\">&quot;action&quot;</span> <span class=\"attr\">:headers</span>=<span class=\"string\">&quot;header&quot;</span> <span class=\"attr\">:format</span>=<span class=\"string\">&quot;[&#x27;doc&#x27;,&#x27;docx&#x27;]&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">:on-success</span>=<span class=\"string\">&quot;handleSuccess&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                <span class=\"attr\">:show-upload-list</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"attr\">:before-upload</span>=<span class=\"string\">&quot;handleBeforeUpload&quot;</span> <span class=\"attr\">:on-format-error</span>=<span class=\"string\">&quot;handleFormatError&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">Button</span> <span class=\"attr\">:loading</span>=<span class=\"string\">&quot;loading&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;up-class&quot;</span>&gt;</span>上传<span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>（文件格式为：doc,docx）<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Upload</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;office&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;pageLoading&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">MonitorOffice</span> <span class=\"attr\">:option</span>=<span class=\"string\">&quot;option&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">MonitorOffice</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// js</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">import</span> &#123;<span class=\"title class_\">GetMonitorReport</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./api/template&quot;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">import</span> &#123;<span class=\"variable constant_\">USER_NAME_SESSION</span>, <span class=\"variable constant_\">USER_ID_SESSION</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./common/storage&quot;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"comment\">// 组件</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">import</span> <span class=\"title class_\">MonitorOffice</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/monitor-office&quot;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">components</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title class_\">MonitorOffice</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"comment\">// 上传文件参数</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">header</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"title class_\">Authorization</span>: <span class=\"string\">`bearer <span class=\"subst\">$&#123;<span class=\"variable language_\">sessionStorage</span>.getItem(<span class=\"string\">&quot;token&quot;</span>)&#125;</span>`</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">action</span>: axios.<span class=\"property\">defaults</span>.<span class=\"property\">baseURL</span> + <span class=\"string\">&quot;/report/document/template&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">file</span>: <span class=\"literal\">null</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"comment\">// office配置参数</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">option</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">url</span>: <span class=\"string\">&quot;&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">isEdit</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">fileType</span>: <span class=\"string\">&quot;&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"attr\">title</span>: <span class=\"string\">&quot;&quot;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"attr\">pageLoading</span>: <span class=\"literal\">false</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">init</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        <span class=\"attr\">methods</span>: &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">init</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"title class_\">GetMonitorReport</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"comment\">// 上传文件的格式验证</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">handleFormatError</span>(<span class=\"params\">file</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">$Message</span>.<span class=\"title function_\">warning</span>(file.<span class=\"property\">name</span> + <span class=\"string\">&#x27;格式不正确&#x27;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span> = <span class=\"literal\">false</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"comment\">// 上传之前</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">handleBeforeUpload</span>(<span class=\"params\">file</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">file</span> = file;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"title function_\">onUpload</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">onUpload</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span> = <span class=\"literal\">true</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"keyword\">let</span> _baseURL = axios.<span class=\"property\">defaults</span>.<span class=\"property\">baseURL</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">action</span> = <span class=\"string\">`<span class=\"subst\">$&#123;_baseURL&#125;</span>/report/document/template`</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">$refs</span>.<span class=\"property\">upload</span>.<span class=\"title function_\">post</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">file</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;, <span class=\"number\">1000</span>)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"comment\">// 导入成功时</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title function_\">handleSuccess</span>(<span class=\"params\">res</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">loading</span> = <span class=\"literal\">false</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"keyword\">if</span> (res.<span class=\"property\">status</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"variable language_\">this</span>.<span class=\"property\">$Message</span>.<span class=\"title function_\">success</span>(<span class=\"string\">&quot;上传成功&quot;</span>);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"comment\">// 这里重新上传文件，only office不会覆盖，所以先刷新解决</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"comment\">// location.reload();</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"variable language_\">this</span>.<span class=\"title class_\">GetMonitorReport</span>();</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"comment\">// 获取项目下监察报告模板</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            <span class=\"title class_\">GetMonitorReport</span>() &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"variable language_\">this</span>.<span class=\"property\">pageLoading</span> = <span class=\"literal\">false</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                <span class=\"title class_\">GetMonitorReport</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    <span class=\"keyword\">if</span> (res.<span class=\"property\">status</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"keyword\">let</span> data = res.<span class=\"property\">data</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"keyword\">if</span> (data) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            <span class=\"variable language_\">this</span>.<span class=\"property\">option</span> = &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                                <span class=\"attr\">url</span>: data.<span class=\"property\">fileViewPath</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                                <span class=\"attr\">fileType</span>: data.<span class=\"property\">fileType</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                                <span class=\"attr\">title</span>: <span class=\"string\">&quot;&quot;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                                <span class=\"attr\">isEdit</span>: <span class=\"literal\">false</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                        <span class=\"variable language_\">this</span>.<span class=\"property\">pageLoading</span> = <span class=\"literal\">true</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">                &#125;)</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">            &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;less&quot;</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"language-css\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    <span class=\"selector-class\">.monitor-report</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        <span class=\"selector-class\">.up-class</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">            <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">10px</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        <span class=\"selector-class\">.office</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">            <span class=\"attribute\">height</span>: <span class=\"number\">100vh</span>;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"language-xml\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置项中documentType-动态设置\"><a href=\"#配置项中documentType-动态设置\" class=\"headerlink\" title=\"配置项中documentType 动态设置\"></a>配置项中documentType 动态设置</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleDocType</span>(<span class=\"params\">fileType</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> docType = <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileTypesDoc = [</span><br><span class=\"line\">        <span class=\"string\">&#x27;doc&#x27;</span>, <span class=\"string\">&#x27;docm&#x27;</span>, <span class=\"string\">&#x27;docx&#x27;</span>, <span class=\"string\">&#x27;dot&#x27;</span>, <span class=\"string\">&#x27;dotm&#x27;</span>, <span class=\"string\">&#x27;dotx&#x27;</span>, <span class=\"string\">&#x27;epub&#x27;</span>, <span class=\"string\">&#x27;fodt&#x27;</span>, <span class=\"string\">&#x27;htm&#x27;</span>, <span class=\"string\">&#x27;html&#x27;</span>, <span class=\"string\">&#x27;mht&#x27;</span>, <span class=\"string\">&#x27;odt&#x27;</span>, <span class=\"string\">&#x27;ott&#x27;</span>, <span class=\"string\">&#x27;pdf&#x27;</span>, <span class=\"string\">&#x27;rtf&#x27;</span>, <span class=\"string\">&#x27;txt&#x27;</span>, <span class=\"string\">&#x27;djvu&#x27;</span>, <span class=\"string\">&#x27;xps&#x27;</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileTypesCsv = [</span><br><span class=\"line\">        <span class=\"string\">&#x27;csv&#x27;</span>, <span class=\"string\">&#x27;fods&#x27;</span>, <span class=\"string\">&#x27;ods&#x27;</span>, <span class=\"string\">&#x27;ots&#x27;</span>, <span class=\"string\">&#x27;xls&#x27;</span>, <span class=\"string\">&#x27;xlsm&#x27;</span>, <span class=\"string\">&#x27;xlsx&#x27;</span>, <span class=\"string\">&#x27;xlt&#x27;</span>, <span class=\"string\">&#x27;xltm&#x27;</span>, <span class=\"string\">&#x27;xltx&#x27;</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileTypesPPt = [</span><br><span class=\"line\">        <span class=\"string\">&#x27;fodp&#x27;</span>, <span class=\"string\">&#x27;odp&#x27;</span>, <span class=\"string\">&#x27;otp&#x27;</span>, <span class=\"string\">&#x27;pot&#x27;</span>, <span class=\"string\">&#x27;potm&#x27;</span>, <span class=\"string\">&#x27;potx&#x27;</span>, <span class=\"string\">&#x27;pps&#x27;</span>, <span class=\"string\">&#x27;ppsm&#x27;</span>, <span class=\"string\">&#x27;ppsx&#x27;</span>, <span class=\"string\">&#x27;ppt&#x27;</span>, <span class=\"string\">&#x27;pptm&#x27;</span>, <span class=\"string\">&#x27;pptx&#x27;</span></span><br><span class=\"line\">    ];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileTypesDoc.<span class=\"title function_\">includes</span>(fileType)) &#123;</span><br><span class=\"line\">        docType = <span class=\"string\">&#x27;text&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileTypesCsv.<span class=\"title function_\">includes</span>(fileType)) &#123;</span><br><span class=\"line\">        docType = <span class=\"string\">&#x27;spreadsheet&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fileTypesPPt.<span class=\"title function_\">includes</span>(fileType)) &#123;</span><br><span class=\"line\">        docType = <span class=\"string\">&#x27;presentation&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> docType;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"react面试题","cover":"/img/post-react.jpg","_content":"\n继续整理，本篇以react为主，如需其他，请阅读其他文章。\n\n## 什么是 React？它的主要特点是什么？\n - React 是由 Facebook 开发的用于构建用户界面的 JavaScript 库。\n ### 特点:\n - 组件化开发: React 提倡将 UI 划分为独立、可重用的组件，每个组件负责自身的状态管理和渲染逻辑，便于开发和维护复杂的应用程序。\n - 虚拟 DOM：React 使用虚拟 DOM 作为中间层，将组件的状态变化映射到虚拟 DOM 树上，然后通过 diff 算法找出变化的部分，并进行高效的更新操作，减少对真实 DOM 的操作，提高性能。\n - 单向数据流：React 遵循单向数据流的原则，数据的流动是自顶向下的，从父组件传递到子组件，子组件通过 props 接收和渲染数据，保证了数据的可追踪性和可维护性。\n - 声明式编程：React 采用声明式编程模型，开发者只需要关注界面应该是什么样子的，而不需要关注具体的 DOM 操作，简化了开发过程。\n - 高效更新：通过使用虚拟 DOM 和 diff 算法，React 能够高效地更新页面，只更新变化的部分，减少了不必要的 DOM 操作，提升了性能。\n - 生态丰富：React 拥有庞大的生态系统，有许多第三方库和工具可供选择，例如 React Router 用于路由管理、Redux 用于状态管理等，可以快速构建复杂的应用程序。\n\n## 类组件和函数组件\n  ### 类组件\n  - 类组件是使用 ES6 类语法定义的组件。它们继承自 React.Component 类。\n  - 通过继承来获得 React 提供的特性和生命周期方法。\n  - 必须包含一个render()方法，返回要渲染的jsx元素\n  <font color=#00FFFF>例：</font>\n  ```javascript\n  import React, { Component } from 'react';\n\n  class MyComponent extends Component {\n    render() {\n      return <div>Hello, I'm a class component!</div>;\n    }\n  }\n  ```\n  ### 函数组件\n  - 是纯粹的 JavaScript 函数，接收一个 props 对象作为参数，并返回要渲染的 JSX 元素。\n  - 没有自己的状态和生命周期方法。\n  - 在 React 16.8 版本之后，引入了 Hooks\n  - 通过使用 Hooks，使得函数组件也能具有类组件的一些特性，如状态管理和生命周期钩子的功能\n  <font color=#00FFFF>例：</font>\n  ```javascript\n  import React from 'react';\n\n  function MyComponent(props) {\n    return <div>Hello, I'm a function component!</div>;\n  }\n  ```\n\n## 什么是jsx\n  - JSX（JavaScript XML）是一种在 JavaScript 代码中编写类似 HTML 结构的语法扩展\n  ### 如何使用？\n  - 在项目中使用 React 库：在你的项目中引入 React 库，可以使用 npm 或者在 HTML 页面中通过 <script> 标签引入 React 库。\n  - 编写 JSX 代码：在 JavaScript 文件中，你可以使用 JSX 语法编写组件的结构。JSX 代码看起来类似于 HTML，但它实际上是 JavaScript 代码。\n\n## React 中的状态（state）和属性（props）有什么区别？\n  ### State\n  - 状态是组件内部管理的可变数据。它代表了组件的当前状态或数据的变化。\n  - 状态是通过类组件的 state 属性来定义和管理的，使用类组件的 setState() 方法来更新状态。\n  - 状态是私有的，只能在组件内部访问和修改。其他组件无法直接访问或修改组件的状态。\n  - 状态的更新可能会触发组件的重新渲染，从而更新视图。\n  ### props\n  - 属性是从父组件传递给子组件的数据，用于定义和配置组件的行为和外部数据。\n  - 属性是只读的，子组件无法直接修改自己的属性值。它们由父组件负责管理和更新。\n  - 属性在父组件内部通过 JSX 语法进行传递，在子组件内部通过 this.props 来访问。\n  - 属性的值是在父组件中定义的，并在子组件使用时传递给子组件。子组件无法直接更改属性的值，只能通过父组件的更新来影响属性的值。\n\n## 虚拟Dom和真实Dom\n  ### 虚拟Dom\n  - 当组件状态发生变化时，React 会创建一个新的虚拟 DOM 树，与之前的虚拟 DOM 树进行比较。\n  - React 通过比较新旧虚拟 DOM 树的差异，找出需要更新的部分，这个过程称为协调\n  - 最后，React 将计算得到的差异应用于真实 DOM，只更新发生变化的部分，这个过程称为渲染（Rendering）。\n  ### 区别\n  - 性能优化： 虚拟 DOM 通过在 JavaScript 对象上进行操作，可以减少对真实 DOM 的直接访问，从而提高性能。\n  - 批量更新： 通过比较新旧虚拟 DOM 树，React 可以一次性计算出所有需要更新的部分，并最小化对真实 DOM 的操作。\n  - 抽象层： 开发者只需关注组件的状态更新，而无需手动操作真实 DOM。\n\n## 生命周期\n  - constructor(props): 在组件被创建时调用，用于初始化组件的状态（state）和绑定事件处理函数。\n  - componentDidMount(): 在组件被插入到 DOM 树中后立即调用，通常用于进行一次性的操作，如获取远程数据、添加事件监听等。\n  - componentDidUpdate(prevProps, prevState): 在组件更新后调用，用于对更新后的组件进行操作，比如根据新的 props 进行条件渲染、更新状态等。注意，在该方法内部更新状态时需要添加条件，以免进入无限循环。\n  - componentWillUnmount(): 在组件被从 DOM 树中移除前调用，通常用于清理组件相关的资源、取消订阅、移除事件监听等。\n  - shouldComponentUpdate(nextProps, nextState): 在组件更新前调用，用于判断是否需要进行组件的重新渲染。可以根据当前的 props 和 state 与下一次的 props 和 state 进行比较，返回 true 表示需要更新，返回 false 表示不需要更新。\n  - static getDerivedStateFromProps(props, state): 在组件将要更新前调用，用于根据新的 props 计算并返回一个新的状态（state）。这个方法在 React 16.3 版本引入，替代了旧版本的 componentWillReceiveProps()。\n  - render(): 在组件更新时调用，用于返回组件的 JSX 结构，描述组件的外观和结构。\n  - getSnapshotBeforeUpdate(prevProps, prevState): 在组件更新前调用，用于在组件发生更新之前捕获当前的 DOM 状态。通常配合 componentDidUpdate() 方法使用，用于处理 DOM 更新后的一些操作，如滚动位置恢复等。\n\n## React常用Hooks\n  - useState：用于在函数组件中添加状态管理。\n  - useEffect：用于处理副作用操作，如订阅事件、发起网络请求等。\n  - useContext：用于访问 React 上下文。\n  - useRef：用于创建可变的引用。\n  - useCallback：用于优化函数的性能，避免重复创建函数实例。\n  - useMemo：用于优化计算结果的性能，避免重复计算。\n  - useReducer：用于管理复杂的状态逻辑，类似于 Redux 中的 reducer。\n  - useLayoutEffect：类似于 useEffect，但在 DOM 更新之前同步执行，可以用于处理需要同步计算布局的情况。\n  - useRef：用于在函数组件之间共享引用。\n  - useImperativeHandle：用于自定义父组件通过 ref 访问子组件的实例方法。\n\n## React 组件之间的通信\n  - Props（属性）传递：通过父组件向子组件传递属性（props），子组件可以读取和使用这些属性。这是 React 中最常见的一种通信方式，适用于父子组件之间的数据传递。\n  - 回调函数：父组件可以将一个函数作为 props 传递给子组件，子组件可以调用该函数，从而向父组件传递信息或触发某些操作。\n  - Context 上下文：React 的上下文（Context）机制允许在组件树中共享数据，可以在父组件中创建上下文，并在需要的子组件中访问该上下文。这种方式适用于需要在多个层级的组件之间共享数据的情况。\n  - 全局状态管理（如 Redux、MobX）：使用第三方状态管理库，例如 Redux、MobX，可以将组件的状态提升到全局状态中，并通过订阅和派发事件的方式实现组件之间的通信。\n  - React Router：React Router 是 React 的官方路由库，通过路由配置和组件渲染，可以实现不同组件之间的导航和通信。\n\n## 如何使用 Context 实现跨组件的数据共享？\n   - Provider（提供者）：Provider 是 Context 的生产者，它通过将值传递给 Context 创建一个 Provider 组件，并将该组件包装在要共享数据的组件树的最顶层。\n   - Consumer（消费者）：Consumer 是 Context 的消费者，它通过在组件树中使用 Consumer 组件来访问 Provider 提供的值。\n   <font color=#00FFFF>例：</font>\n   ```javascript\n    // 创建 Context：使用 React.createContext() 创建一个 Context 对象，并提供默认的初始值。\n    const MyContext = React.createContext(defaultValue);\n\n    // 提供数据：在顶层组件或需要共享数据的组件上，使用 Context 提供者（Provider）包装组件，并将要共享的数据传递给 Provider。\n    <MyContext.Provider value={sharedData}>\n      {/* 其他组件 */}\n    </MyContext.Provider>\n\n    // 消费数据：在需要访问共享数据的组件中，使用 Context 消费者（Consumer）来接收提供者传递的数据，并在 Consumer 的回调函数中使用该数据。\n    <MyContext.Consumer>\n      {value => (\n        {/* 使用共享的数据 */}\n      )}\n    </MyContext.Consumer>\n\n   ```\n","source":"_posts/react面试题.md","raw":"---\ntitle: react面试题\ncover: /img/post-react.jpg\ncategories:\n  - 前端面试题\n---\n\n继续整理，本篇以react为主，如需其他，请阅读其他文章。\n\n## 什么是 React？它的主要特点是什么？\n - React 是由 Facebook 开发的用于构建用户界面的 JavaScript 库。\n ### 特点:\n - 组件化开发: React 提倡将 UI 划分为独立、可重用的组件，每个组件负责自身的状态管理和渲染逻辑，便于开发和维护复杂的应用程序。\n - 虚拟 DOM：React 使用虚拟 DOM 作为中间层，将组件的状态变化映射到虚拟 DOM 树上，然后通过 diff 算法找出变化的部分，并进行高效的更新操作，减少对真实 DOM 的操作，提高性能。\n - 单向数据流：React 遵循单向数据流的原则，数据的流动是自顶向下的，从父组件传递到子组件，子组件通过 props 接收和渲染数据，保证了数据的可追踪性和可维护性。\n - 声明式编程：React 采用声明式编程模型，开发者只需要关注界面应该是什么样子的，而不需要关注具体的 DOM 操作，简化了开发过程。\n - 高效更新：通过使用虚拟 DOM 和 diff 算法，React 能够高效地更新页面，只更新变化的部分，减少了不必要的 DOM 操作，提升了性能。\n - 生态丰富：React 拥有庞大的生态系统，有许多第三方库和工具可供选择，例如 React Router 用于路由管理、Redux 用于状态管理等，可以快速构建复杂的应用程序。\n\n## 类组件和函数组件\n  ### 类组件\n  - 类组件是使用 ES6 类语法定义的组件。它们继承自 React.Component 类。\n  - 通过继承来获得 React 提供的特性和生命周期方法。\n  - 必须包含一个render()方法，返回要渲染的jsx元素\n  <font color=#00FFFF>例：</font>\n  ```javascript\n  import React, { Component } from 'react';\n\n  class MyComponent extends Component {\n    render() {\n      return <div>Hello, I'm a class component!</div>;\n    }\n  }\n  ```\n  ### 函数组件\n  - 是纯粹的 JavaScript 函数，接收一个 props 对象作为参数，并返回要渲染的 JSX 元素。\n  - 没有自己的状态和生命周期方法。\n  - 在 React 16.8 版本之后，引入了 Hooks\n  - 通过使用 Hooks，使得函数组件也能具有类组件的一些特性，如状态管理和生命周期钩子的功能\n  <font color=#00FFFF>例：</font>\n  ```javascript\n  import React from 'react';\n\n  function MyComponent(props) {\n    return <div>Hello, I'm a function component!</div>;\n  }\n  ```\n\n## 什么是jsx\n  - JSX（JavaScript XML）是一种在 JavaScript 代码中编写类似 HTML 结构的语法扩展\n  ### 如何使用？\n  - 在项目中使用 React 库：在你的项目中引入 React 库，可以使用 npm 或者在 HTML 页面中通过 <script> 标签引入 React 库。\n  - 编写 JSX 代码：在 JavaScript 文件中，你可以使用 JSX 语法编写组件的结构。JSX 代码看起来类似于 HTML，但它实际上是 JavaScript 代码。\n\n## React 中的状态（state）和属性（props）有什么区别？\n  ### State\n  - 状态是组件内部管理的可变数据。它代表了组件的当前状态或数据的变化。\n  - 状态是通过类组件的 state 属性来定义和管理的，使用类组件的 setState() 方法来更新状态。\n  - 状态是私有的，只能在组件内部访问和修改。其他组件无法直接访问或修改组件的状态。\n  - 状态的更新可能会触发组件的重新渲染，从而更新视图。\n  ### props\n  - 属性是从父组件传递给子组件的数据，用于定义和配置组件的行为和外部数据。\n  - 属性是只读的，子组件无法直接修改自己的属性值。它们由父组件负责管理和更新。\n  - 属性在父组件内部通过 JSX 语法进行传递，在子组件内部通过 this.props 来访问。\n  - 属性的值是在父组件中定义的，并在子组件使用时传递给子组件。子组件无法直接更改属性的值，只能通过父组件的更新来影响属性的值。\n\n## 虚拟Dom和真实Dom\n  ### 虚拟Dom\n  - 当组件状态发生变化时，React 会创建一个新的虚拟 DOM 树，与之前的虚拟 DOM 树进行比较。\n  - React 通过比较新旧虚拟 DOM 树的差异，找出需要更新的部分，这个过程称为协调\n  - 最后，React 将计算得到的差异应用于真实 DOM，只更新发生变化的部分，这个过程称为渲染（Rendering）。\n  ### 区别\n  - 性能优化： 虚拟 DOM 通过在 JavaScript 对象上进行操作，可以减少对真实 DOM 的直接访问，从而提高性能。\n  - 批量更新： 通过比较新旧虚拟 DOM 树，React 可以一次性计算出所有需要更新的部分，并最小化对真实 DOM 的操作。\n  - 抽象层： 开发者只需关注组件的状态更新，而无需手动操作真实 DOM。\n\n## 生命周期\n  - constructor(props): 在组件被创建时调用，用于初始化组件的状态（state）和绑定事件处理函数。\n  - componentDidMount(): 在组件被插入到 DOM 树中后立即调用，通常用于进行一次性的操作，如获取远程数据、添加事件监听等。\n  - componentDidUpdate(prevProps, prevState): 在组件更新后调用，用于对更新后的组件进行操作，比如根据新的 props 进行条件渲染、更新状态等。注意，在该方法内部更新状态时需要添加条件，以免进入无限循环。\n  - componentWillUnmount(): 在组件被从 DOM 树中移除前调用，通常用于清理组件相关的资源、取消订阅、移除事件监听等。\n  - shouldComponentUpdate(nextProps, nextState): 在组件更新前调用，用于判断是否需要进行组件的重新渲染。可以根据当前的 props 和 state 与下一次的 props 和 state 进行比较，返回 true 表示需要更新，返回 false 表示不需要更新。\n  - static getDerivedStateFromProps(props, state): 在组件将要更新前调用，用于根据新的 props 计算并返回一个新的状态（state）。这个方法在 React 16.3 版本引入，替代了旧版本的 componentWillReceiveProps()。\n  - render(): 在组件更新时调用，用于返回组件的 JSX 结构，描述组件的外观和结构。\n  - getSnapshotBeforeUpdate(prevProps, prevState): 在组件更新前调用，用于在组件发生更新之前捕获当前的 DOM 状态。通常配合 componentDidUpdate() 方法使用，用于处理 DOM 更新后的一些操作，如滚动位置恢复等。\n\n## React常用Hooks\n  - useState：用于在函数组件中添加状态管理。\n  - useEffect：用于处理副作用操作，如订阅事件、发起网络请求等。\n  - useContext：用于访问 React 上下文。\n  - useRef：用于创建可变的引用。\n  - useCallback：用于优化函数的性能，避免重复创建函数实例。\n  - useMemo：用于优化计算结果的性能，避免重复计算。\n  - useReducer：用于管理复杂的状态逻辑，类似于 Redux 中的 reducer。\n  - useLayoutEffect：类似于 useEffect，但在 DOM 更新之前同步执行，可以用于处理需要同步计算布局的情况。\n  - useRef：用于在函数组件之间共享引用。\n  - useImperativeHandle：用于自定义父组件通过 ref 访问子组件的实例方法。\n\n## React 组件之间的通信\n  - Props（属性）传递：通过父组件向子组件传递属性（props），子组件可以读取和使用这些属性。这是 React 中最常见的一种通信方式，适用于父子组件之间的数据传递。\n  - 回调函数：父组件可以将一个函数作为 props 传递给子组件，子组件可以调用该函数，从而向父组件传递信息或触发某些操作。\n  - Context 上下文：React 的上下文（Context）机制允许在组件树中共享数据，可以在父组件中创建上下文，并在需要的子组件中访问该上下文。这种方式适用于需要在多个层级的组件之间共享数据的情况。\n  - 全局状态管理（如 Redux、MobX）：使用第三方状态管理库，例如 Redux、MobX，可以将组件的状态提升到全局状态中，并通过订阅和派发事件的方式实现组件之间的通信。\n  - React Router：React Router 是 React 的官方路由库，通过路由配置和组件渲染，可以实现不同组件之间的导航和通信。\n\n## 如何使用 Context 实现跨组件的数据共享？\n   - Provider（提供者）：Provider 是 Context 的生产者，它通过将值传递给 Context 创建一个 Provider 组件，并将该组件包装在要共享数据的组件树的最顶层。\n   - Consumer（消费者）：Consumer 是 Context 的消费者，它通过在组件树中使用 Consumer 组件来访问 Provider 提供的值。\n   <font color=#00FFFF>例：</font>\n   ```javascript\n    // 创建 Context：使用 React.createContext() 创建一个 Context 对象，并提供默认的初始值。\n    const MyContext = React.createContext(defaultValue);\n\n    // 提供数据：在顶层组件或需要共享数据的组件上，使用 Context 提供者（Provider）包装组件，并将要共享的数据传递给 Provider。\n    <MyContext.Provider value={sharedData}>\n      {/* 其他组件 */}\n    </MyContext.Provider>\n\n    // 消费数据：在需要访问共享数据的组件中，使用 Context 消费者（Consumer）来接收提供者传递的数据，并在 Consumer 的回调函数中使用该数据。\n    <MyContext.Consumer>\n      {value => (\n        {/* 使用共享的数据 */}\n      )}\n    </MyContext.Consumer>\n\n   ```\n","slug":"react面试题","published":1,"date":"2023-06-05T03:03:48.074Z","updated":"2023-06-05T11:33:35.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clijr0jcr000d44vc38zs0m5k","content":"<p>继续整理，本篇以react为主，如需其他，请阅读其他文章。</p>\n<h2 id=\"什么是-React？它的主要特点是什么？\"><a href=\"#什么是-React？它的主要特点是什么？\" class=\"headerlink\" title=\"什么是 React？它的主要特点是什么？\"></a>什么是 React？它的主要特点是什么？</h2><ul>\n<li>React 是由 Facebook 开发的用于构建用户界面的 JavaScript 库。</li>\n</ul>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点:\"></a>特点:</h3><ul>\n<li>组件化开发: React 提倡将 UI 划分为独立、可重用的组件，每个组件负责自身的状态管理和渲染逻辑，便于开发和维护复杂的应用程序。</li>\n<li>虚拟 DOM：React 使用虚拟 DOM 作为中间层，将组件的状态变化映射到虚拟 DOM 树上，然后通过 diff 算法找出变化的部分，并进行高效的更新操作，减少对真实 DOM 的操作，提高性能。</li>\n<li>单向数据流：React 遵循单向数据流的原则，数据的流动是自顶向下的，从父组件传递到子组件，子组件通过 props 接收和渲染数据，保证了数据的可追踪性和可维护性。</li>\n<li>声明式编程：React 采用声明式编程模型，开发者只需要关注界面应该是什么样子的，而不需要关注具体的 DOM 操作，简化了开发过程。</li>\n<li>高效更新：通过使用虚拟 DOM 和 diff 算法，React 能够高效地更新页面，只更新变化的部分，减少了不必要的 DOM 操作，提升了性能。</li>\n<li>生态丰富：React 拥有庞大的生态系统，有许多第三方库和工具可供选择，例如 React Router 用于路由管理、Redux 用于状态管理等，可以快速构建复杂的应用程序。</li>\n</ul>\n<h2 id=\"类组件和函数组件\"><a href=\"#类组件和函数组件\" class=\"headerlink\" title=\"类组件和函数组件\"></a>类组件和函数组件</h2><h3 id=\"类组件\"><a href=\"#类组件\" class=\"headerlink\" title=\"类组件\"></a>类组件</h3><ul>\n<li>类组件是使用 ES6 类语法定义的组件。它们继承自 React.Component 类。</li>\n<li>通过继承来获得 React 提供的特性和生命周期方法。</li>\n<li>必须包含一个render()方法，返回要渲染的jsx元素<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello, I&#x27;m a class component!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"函数组件\"><a href=\"#函数组件\" class=\"headerlink\" title=\"函数组件\"></a>函数组件</h3><ul>\n<li>是纯粹的 JavaScript 函数，接收一个 props 对象作为参数，并返回要渲染的 JSX 元素。</li>\n<li>没有自己的状态和生命周期方法。</li>\n<li>在 React 16.8 版本之后，引入了 Hooks</li>\n<li>通过使用 Hooks，使得函数组件也能具有类组件的一些特性，如状态管理和生命周期钩子的功能<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello, I&#x27;m a function component!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"什么是jsx\"><a href=\"#什么是jsx\" class=\"headerlink\" title=\"什么是jsx\"></a>什么是jsx</h2><ul>\n<li>JSX（JavaScript XML）是一种在 JavaScript 代码中编写类似 HTML 结构的语法扩展</li>\n</ul>\n<h3 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h3><ul>\n<li>在项目中使用 React 库：在你的项目中引入 React 库，可以使用 npm 或者在 HTML 页面中通过 <script> 标签引入 React 库。</li>\n<li>编写 JSX 代码：在 JavaScript 文件中，你可以使用 JSX 语法编写组件的结构。JSX 代码看起来类似于 HTML，但它实际上是 JavaScript 代码。</li>\n</ul>\n<h2 id=\"React-中的状态（state）和属性（props）有什么区别？\"><a href=\"#React-中的状态（state）和属性（props）有什么区别？\" class=\"headerlink\" title=\"React 中的状态（state）和属性（props）有什么区别？\"></a>React 中的状态（state）和属性（props）有什么区别？</h2><h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><ul>\n<li>状态是组件内部管理的可变数据。它代表了组件的当前状态或数据的变化。</li>\n<li>状态是通过类组件的 state 属性来定义和管理的，使用类组件的 setState() 方法来更新状态。</li>\n<li>状态是私有的，只能在组件内部访问和修改。其他组件无法直接访问或修改组件的状态。</li>\n<li>状态的更新可能会触发组件的重新渲染，从而更新视图。</li>\n</ul>\n<h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><ul>\n<li>属性是从父组件传递给子组件的数据，用于定义和配置组件的行为和外部数据。</li>\n<li>属性是只读的，子组件无法直接修改自己的属性值。它们由父组件负责管理和更新。</li>\n<li>属性在父组件内部通过 JSX 语法进行传递，在子组件内部通过 this.props 来访问。</li>\n<li>属性的值是在父组件中定义的，并在子组件使用时传递给子组件。子组件无法直接更改属性的值，只能通过父组件的更新来影响属性的值。</li>\n</ul>\n<h2 id=\"虚拟Dom和真实Dom\"><a href=\"#虚拟Dom和真实Dom\" class=\"headerlink\" title=\"虚拟Dom和真实Dom\"></a>虚拟Dom和真实Dom</h2><h3 id=\"虚拟Dom\"><a href=\"#虚拟Dom\" class=\"headerlink\" title=\"虚拟Dom\"></a>虚拟Dom</h3><ul>\n<li>当组件状态发生变化时，React 会创建一个新的虚拟 DOM 树，与之前的虚拟 DOM 树进行比较。</li>\n<li>React 通过比较新旧虚拟 DOM 树的差异，找出需要更新的部分，这个过程称为协调</li>\n<li>最后，React 将计算得到的差异应用于真实 DOM，只更新发生变化的部分，这个过程称为渲染（Rendering）。</li>\n</ul>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>性能优化： 虚拟 DOM 通过在 JavaScript 对象上进行操作，可以减少对真实 DOM 的直接访问，从而提高性能。</li>\n<li>批量更新： 通过比较新旧虚拟 DOM 树，React 可以一次性计算出所有需要更新的部分，并最小化对真实 DOM 的操作。</li>\n<li>抽象层： 开发者只需关注组件的状态更新，而无需手动操作真实 DOM。</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><ul>\n<li>constructor(props): 在组件被创建时调用，用于初始化组件的状态（state）和绑定事件处理函数。</li>\n<li>componentDidMount(): 在组件被插入到 DOM 树中后立即调用，通常用于进行一次性的操作，如获取远程数据、添加事件监听等。</li>\n<li>componentDidUpdate(prevProps, prevState): 在组件更新后调用，用于对更新后的组件进行操作，比如根据新的 props 进行条件渲染、更新状态等。注意，在该方法内部更新状态时需要添加条件，以免进入无限循环。</li>\n<li>componentWillUnmount(): 在组件被从 DOM 树中移除前调用，通常用于清理组件相关的资源、取消订阅、移除事件监听等。</li>\n<li>shouldComponentUpdate(nextProps, nextState): 在组件更新前调用，用于判断是否需要进行组件的重新渲染。可以根据当前的 props 和 state 与下一次的 props 和 state 进行比较，返回 true 表示需要更新，返回 false 表示不需要更新。</li>\n<li>static getDerivedStateFromProps(props, state): 在组件将要更新前调用，用于根据新的 props 计算并返回一个新的状态（state）。这个方法在 React 16.3 版本引入，替代了旧版本的 componentWillReceiveProps()。</li>\n<li>render(): 在组件更新时调用，用于返回组件的 JSX 结构，描述组件的外观和结构。</li>\n<li>getSnapshotBeforeUpdate(prevProps, prevState): 在组件更新前调用，用于在组件发生更新之前捕获当前的 DOM 状态。通常配合 componentDidUpdate() 方法使用，用于处理 DOM 更新后的一些操作，如滚动位置恢复等。</li>\n</ul>\n<h2 id=\"React常用Hooks\"><a href=\"#React常用Hooks\" class=\"headerlink\" title=\"React常用Hooks\"></a>React常用Hooks</h2><ul>\n<li>useState：用于在函数组件中添加状态管理。</li>\n<li>useEffect：用于处理副作用操作，如订阅事件、发起网络请求等。</li>\n<li>useContext：用于访问 React 上下文。</li>\n<li>useRef：用于创建可变的引用。</li>\n<li>useCallback：用于优化函数的性能，避免重复创建函数实例。</li>\n<li>useMemo：用于优化计算结果的性能，避免重复计算。</li>\n<li>useReducer：用于管理复杂的状态逻辑，类似于 Redux 中的 reducer。</li>\n<li>useLayoutEffect：类似于 useEffect，但在 DOM 更新之前同步执行，可以用于处理需要同步计算布局的情况。</li>\n<li>useRef：用于在函数组件之间共享引用。</li>\n<li>useImperativeHandle：用于自定义父组件通过 ref 访问子组件的实例方法。</li>\n</ul>\n<h2 id=\"React-组件之间的通信\"><a href=\"#React-组件之间的通信\" class=\"headerlink\" title=\"React 组件之间的通信\"></a>React 组件之间的通信</h2><ul>\n<li>Props（属性）传递：通过父组件向子组件传递属性（props），子组件可以读取和使用这些属性。这是 React 中最常见的一种通信方式，适用于父子组件之间的数据传递。</li>\n<li>回调函数：父组件可以将一个函数作为 props 传递给子组件，子组件可以调用该函数，从而向父组件传递信息或触发某些操作。</li>\n<li>Context 上下文：React 的上下文（Context）机制允许在组件树中共享数据，可以在父组件中创建上下文，并在需要的子组件中访问该上下文。这种方式适用于需要在多个层级的组件之间共享数据的情况。</li>\n<li>全局状态管理（如 Redux、MobX）：使用第三方状态管理库，例如 Redux、MobX，可以将组件的状态提升到全局状态中，并通过订阅和派发事件的方式实现组件之间的通信。</li>\n<li>React Router：React Router 是 React 的官方路由库，通过路由配置和组件渲染，可以实现不同组件之间的导航和通信。</li>\n</ul>\n<h2 id=\"如何使用-Context-实现跨组件的数据共享？\"><a href=\"#如何使用-Context-实现跨组件的数据共享？\" class=\"headerlink\" title=\"如何使用 Context 实现跨组件的数据共享？\"></a>如何使用 Context 实现跨组件的数据共享？</h2><ul>\n<li>Provider（提供者）：Provider 是 Context 的生产者，它通过将值传递给 Context 创建一个 Provider 组件，并将该组件包装在要共享数据的组件树的最顶层。</li>\n<li>Consumer（消费者）：Consumer 是 Context 的消费者，它通过在组件树中使用 Consumer 组件来访问 Provider 提供的值。<br>   <font color=#00FFFF>例：</font>   <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 Context：使用 React.createContext() 创建一个 Context 对象，并提供默认的初始值。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyContext</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">createContext</span>(defaultValue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供数据：在顶层组件或需要共享数据的组件上，使用 Context 提供者（Provider）包装组件，并将要共享的数据传递给 Provider。</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;sharedData&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  &#123;/* 其他组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">MyContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 消费数据：在需要访问共享数据的组件中，使用 Context 消费者（Consumer）来接收提供者传递的数据，并在 Consumer 的回调函数中使用该数据。</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  &#123;value =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">    &#123;/* 使用共享的数据 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">  )&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">MyContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover_type":"img","excerpt":"","more":"<p>继续整理，本篇以react为主，如需其他，请阅读其他文章。</p>\n<h2 id=\"什么是-React？它的主要特点是什么？\"><a href=\"#什么是-React？它的主要特点是什么？\" class=\"headerlink\" title=\"什么是 React？它的主要特点是什么？\"></a>什么是 React？它的主要特点是什么？</h2><ul>\n<li>React 是由 Facebook 开发的用于构建用户界面的 JavaScript 库。</li>\n</ul>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点:\"></a>特点:</h3><ul>\n<li>组件化开发: React 提倡将 UI 划分为独立、可重用的组件，每个组件负责自身的状态管理和渲染逻辑，便于开发和维护复杂的应用程序。</li>\n<li>虚拟 DOM：React 使用虚拟 DOM 作为中间层，将组件的状态变化映射到虚拟 DOM 树上，然后通过 diff 算法找出变化的部分，并进行高效的更新操作，减少对真实 DOM 的操作，提高性能。</li>\n<li>单向数据流：React 遵循单向数据流的原则，数据的流动是自顶向下的，从父组件传递到子组件，子组件通过 props 接收和渲染数据，保证了数据的可追踪性和可维护性。</li>\n<li>声明式编程：React 采用声明式编程模型，开发者只需要关注界面应该是什么样子的，而不需要关注具体的 DOM 操作，简化了开发过程。</li>\n<li>高效更新：通过使用虚拟 DOM 和 diff 算法，React 能够高效地更新页面，只更新变化的部分，减少了不必要的 DOM 操作，提升了性能。</li>\n<li>生态丰富：React 拥有庞大的生态系统，有许多第三方库和工具可供选择，例如 React Router 用于路由管理、Redux 用于状态管理等，可以快速构建复杂的应用程序。</li>\n</ul>\n<h2 id=\"类组件和函数组件\"><a href=\"#类组件和函数组件\" class=\"headerlink\" title=\"类组件和函数组件\"></a>类组件和函数组件</h2><h3 id=\"类组件\"><a href=\"#类组件\" class=\"headerlink\" title=\"类组件\"></a>类组件</h3><ul>\n<li>类组件是使用 ES6 类语法定义的组件。它们继承自 React.Component 类。</li>\n<li>通过继承来获得 React 提供的特性和生命周期方法。</li>\n<li>必须包含一个render()方法，返回要渲染的jsx元素<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123; <span class=\"title class_\">Component</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello, I&#x27;m a class component!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"函数组件\"><a href=\"#函数组件\" class=\"headerlink\" title=\"函数组件\"></a>函数组件</h3><ul>\n<li>是纯粹的 JavaScript 函数，接收一个 props 对象作为参数，并返回要渲染的 JSX 元素。</li>\n<li>没有自己的状态和生命周期方法。</li>\n<li>在 React 16.8 版本之后，引入了 Hooks</li>\n<li>通过使用 Hooks，使得函数组件也能具有类组件的一些特性，如状态管理和生命周期钩子的功能<br>  <font color=#00FFFF>例：</font>  <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">MyComponent</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello, I&#x27;m a function component!<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"什么是jsx\"><a href=\"#什么是jsx\" class=\"headerlink\" title=\"什么是jsx\"></a>什么是jsx</h2><ul>\n<li>JSX（JavaScript XML）是一种在 JavaScript 代码中编写类似 HTML 结构的语法扩展</li>\n</ul>\n<h3 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h3><ul>\n<li>在项目中使用 React 库：在你的项目中引入 React 库，可以使用 npm 或者在 HTML 页面中通过 <script> 标签引入 React 库。</li>\n<li>编写 JSX 代码：在 JavaScript 文件中，你可以使用 JSX 语法编写组件的结构。JSX 代码看起来类似于 HTML，但它实际上是 JavaScript 代码。</li>\n</ul>\n<h2 id=\"React-中的状态（state）和属性（props）有什么区别？\"><a href=\"#React-中的状态（state）和属性（props）有什么区别？\" class=\"headerlink\" title=\"React 中的状态（state）和属性（props）有什么区别？\"></a>React 中的状态（state）和属性（props）有什么区别？</h2><h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><ul>\n<li>状态是组件内部管理的可变数据。它代表了组件的当前状态或数据的变化。</li>\n<li>状态是通过类组件的 state 属性来定义和管理的，使用类组件的 setState() 方法来更新状态。</li>\n<li>状态是私有的，只能在组件内部访问和修改。其他组件无法直接访问或修改组件的状态。</li>\n<li>状态的更新可能会触发组件的重新渲染，从而更新视图。</li>\n</ul>\n<h3 id=\"props\"><a href=\"#props\" class=\"headerlink\" title=\"props\"></a>props</h3><ul>\n<li>属性是从父组件传递给子组件的数据，用于定义和配置组件的行为和外部数据。</li>\n<li>属性是只读的，子组件无法直接修改自己的属性值。它们由父组件负责管理和更新。</li>\n<li>属性在父组件内部通过 JSX 语法进行传递，在子组件内部通过 this.props 来访问。</li>\n<li>属性的值是在父组件中定义的，并在子组件使用时传递给子组件。子组件无法直接更改属性的值，只能通过父组件的更新来影响属性的值。</li>\n</ul>\n<h2 id=\"虚拟Dom和真实Dom\"><a href=\"#虚拟Dom和真实Dom\" class=\"headerlink\" title=\"虚拟Dom和真实Dom\"></a>虚拟Dom和真实Dom</h2><h3 id=\"虚拟Dom\"><a href=\"#虚拟Dom\" class=\"headerlink\" title=\"虚拟Dom\"></a>虚拟Dom</h3><ul>\n<li>当组件状态发生变化时，React 会创建一个新的虚拟 DOM 树，与之前的虚拟 DOM 树进行比较。</li>\n<li>React 通过比较新旧虚拟 DOM 树的差异，找出需要更新的部分，这个过程称为协调</li>\n<li>最后，React 将计算得到的差异应用于真实 DOM，只更新发生变化的部分，这个过程称为渲染（Rendering）。</li>\n</ul>\n<h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><ul>\n<li>性能优化： 虚拟 DOM 通过在 JavaScript 对象上进行操作，可以减少对真实 DOM 的直接访问，从而提高性能。</li>\n<li>批量更新： 通过比较新旧虚拟 DOM 树，React 可以一次性计算出所有需要更新的部分，并最小化对真实 DOM 的操作。</li>\n<li>抽象层： 开发者只需关注组件的状态更新，而无需手动操作真实 DOM。</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><ul>\n<li>constructor(props): 在组件被创建时调用，用于初始化组件的状态（state）和绑定事件处理函数。</li>\n<li>componentDidMount(): 在组件被插入到 DOM 树中后立即调用，通常用于进行一次性的操作，如获取远程数据、添加事件监听等。</li>\n<li>componentDidUpdate(prevProps, prevState): 在组件更新后调用，用于对更新后的组件进行操作，比如根据新的 props 进行条件渲染、更新状态等。注意，在该方法内部更新状态时需要添加条件，以免进入无限循环。</li>\n<li>componentWillUnmount(): 在组件被从 DOM 树中移除前调用，通常用于清理组件相关的资源、取消订阅、移除事件监听等。</li>\n<li>shouldComponentUpdate(nextProps, nextState): 在组件更新前调用，用于判断是否需要进行组件的重新渲染。可以根据当前的 props 和 state 与下一次的 props 和 state 进行比较，返回 true 表示需要更新，返回 false 表示不需要更新。</li>\n<li>static getDerivedStateFromProps(props, state): 在组件将要更新前调用，用于根据新的 props 计算并返回一个新的状态（state）。这个方法在 React 16.3 版本引入，替代了旧版本的 componentWillReceiveProps()。</li>\n<li>render(): 在组件更新时调用，用于返回组件的 JSX 结构，描述组件的外观和结构。</li>\n<li>getSnapshotBeforeUpdate(prevProps, prevState): 在组件更新前调用，用于在组件发生更新之前捕获当前的 DOM 状态。通常配合 componentDidUpdate() 方法使用，用于处理 DOM 更新后的一些操作，如滚动位置恢复等。</li>\n</ul>\n<h2 id=\"React常用Hooks\"><a href=\"#React常用Hooks\" class=\"headerlink\" title=\"React常用Hooks\"></a>React常用Hooks</h2><ul>\n<li>useState：用于在函数组件中添加状态管理。</li>\n<li>useEffect：用于处理副作用操作，如订阅事件、发起网络请求等。</li>\n<li>useContext：用于访问 React 上下文。</li>\n<li>useRef：用于创建可变的引用。</li>\n<li>useCallback：用于优化函数的性能，避免重复创建函数实例。</li>\n<li>useMemo：用于优化计算结果的性能，避免重复计算。</li>\n<li>useReducer：用于管理复杂的状态逻辑，类似于 Redux 中的 reducer。</li>\n<li>useLayoutEffect：类似于 useEffect，但在 DOM 更新之前同步执行，可以用于处理需要同步计算布局的情况。</li>\n<li>useRef：用于在函数组件之间共享引用。</li>\n<li>useImperativeHandle：用于自定义父组件通过 ref 访问子组件的实例方法。</li>\n</ul>\n<h2 id=\"React-组件之间的通信\"><a href=\"#React-组件之间的通信\" class=\"headerlink\" title=\"React 组件之间的通信\"></a>React 组件之间的通信</h2><ul>\n<li>Props（属性）传递：通过父组件向子组件传递属性（props），子组件可以读取和使用这些属性。这是 React 中最常见的一种通信方式，适用于父子组件之间的数据传递。</li>\n<li>回调函数：父组件可以将一个函数作为 props 传递给子组件，子组件可以调用该函数，从而向父组件传递信息或触发某些操作。</li>\n<li>Context 上下文：React 的上下文（Context）机制允许在组件树中共享数据，可以在父组件中创建上下文，并在需要的子组件中访问该上下文。这种方式适用于需要在多个层级的组件之间共享数据的情况。</li>\n<li>全局状态管理（如 Redux、MobX）：使用第三方状态管理库，例如 Redux、MobX，可以将组件的状态提升到全局状态中，并通过订阅和派发事件的方式实现组件之间的通信。</li>\n<li>React Router：React Router 是 React 的官方路由库，通过路由配置和组件渲染，可以实现不同组件之间的导航和通信。</li>\n</ul>\n<h2 id=\"如何使用-Context-实现跨组件的数据共享？\"><a href=\"#如何使用-Context-实现跨组件的数据共享？\" class=\"headerlink\" title=\"如何使用 Context 实现跨组件的数据共享？\"></a>如何使用 Context 实现跨组件的数据共享？</h2><ul>\n<li>Provider（提供者）：Provider 是 Context 的生产者，它通过将值传递给 Context 创建一个 Provider 组件，并将该组件包装在要共享数据的组件树的最顶层。</li>\n<li>Consumer（消费者）：Consumer 是 Context 的消费者，它通过在组件树中使用 Consumer 组件来访问 Provider 提供的值。<br>   <font color=#00FFFF>例：</font>   <figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建 Context：使用 React.createContext() 创建一个 Context 对象，并提供默认的初始值。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">MyContext</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">createContext</span>(defaultValue);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提供数据：在顶层组件或需要共享数据的组件上，使用 Context 提供者（Provider）包装组件，并将要共享的数据传递给 Provider。</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyContext.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;sharedData&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  &#123;/* 其他组件 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">MyContext.Provider</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 消费数据：在需要访问共享数据的组件中，使用 Context 消费者（Consumer）来接收提供者传递的数据，并在 Consumer 的回调函数中使用该数据。</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">MyContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  &#123;value =&gt; (</span></span><br><span class=\"line\"><span class=\"language-xml\">    &#123;/* 使用共享的数据 */&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">  )&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">MyContext.Consumer</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"乌镇攻略","cover":"/img/wuzhen-img.jpg","_content":"\n粗去玩-乌镇准备\n\n## 地址\n - 浙江桐乡\n\n## 出行\n- 以下价格默认为二等座\n  ### 杭州东 - 桐乡\n  - 可以直接打车 顺风车 约1.5h 100元左右\n|  | 高铁 | 动车 | 火车 |\n|--------|--------|--------|--------|\n| 价格/元 | 21.5 | 17 | 暂无 |\n| 时长/分 | 17 | 17 | 暂无 |\n\n### 上海 - 桐乡\n- 上海虹桥 - 桐乡\n|  | 高铁 | 动车 | 火车 |\n|--------|--------|--------|--------|\n| 价格/元 | 50.5 | 41 | 暂无 |\n| 时长/分 | 40 | 47 | 暂无 |\n\n- 上海站 - 桐乡\n- 查询了几天，发现只有高铁：价格（65.5）时长(1时08分) ps：建议虹桥坐车\n\n- 到达桐乡出战后乘坐 k282（约1h） 到乌镇汽车站，换成 k350（约10min） 到达 乌镇西栅区\n\n## 乌镇布局\n- 分为东西南北四栅\n- 西栅门票 150 元（有夜景）\n- 东栅门票 110元\n- 南北栅无需门票\nps： 时间充足可以游玩全部，如只有一天时间建议西栅，游玩的人比较多\n\n## 住宿\n  - 便宜点的 100 - 200 左右 基本距离西栅景区 1公里左右\n  - 贵点的基本 400 左右； 西栅景区内和周边都有\n  - 橘子酒店 离西栅景区很近 价格 300 左右\n  ps： 有的攻略说西栅景区内住房免门票（回来后补充）\n\n## 景点\n### 西栅景区\n  #### 木心美术馆\n  - 时间： 9：00 - 17：30\n  - 门票： 20\n  - 展览木心先生的作品。 ps: 不可随意拍照\n\n  #### 水上集市\n  - 早茶时间： 6：00 - 9：00\n  - 门票： 免费（需提前预约）\n  - 清晨各种早茶，感受江南气息\n\n  #### 白莲塔\n  - 门票： 免费\n  - 乌镇最高的建筑，可以看到西栅全景\n\n  #### 草木本色染坊\n  - 门票： 免费\n  - 无数条挂下来的白布，像影视剧中的画一般\n\n  #### 灵水局\n  - 门票： 免费\n  - 翡翠绿的天堂，非常有古风的味道\n\n  #### 乌镇老邮局\n  - 门票： 免费\n  - 墙上 \"从前车马很慢，书信很远，一生只够爱一人\"\n\n  #### 昭明书院\n  - 门票： 免费\n  - 窗明几净的书房，非常出片\n\n  #### 月老庙\n  - 门票： 免费\n  - 可以去求姻缘哈哈哈\n\n  #### 西庆堂\n  - 门票： 免费\n  - 可以看看古时的大户人家如何出嫁\n\n  #### 矛盾纪念馆\n  - 门票： 免费\n  - 矛盾先生的作品\n\n![路线图](../img/wuzhen.jpg)\n","source":"_posts/乌镇.md","raw":"---\ntitle: 乌镇攻略\ncover: /img/wuzhen-img.jpg\ncategories:\n  - 粗去玩\n---\n\n粗去玩-乌镇准备\n\n## 地址\n - 浙江桐乡\n\n## 出行\n- 以下价格默认为二等座\n  ### 杭州东 - 桐乡\n  - 可以直接打车 顺风车 约1.5h 100元左右\n|  | 高铁 | 动车 | 火车 |\n|--------|--------|--------|--------|\n| 价格/元 | 21.5 | 17 | 暂无 |\n| 时长/分 | 17 | 17 | 暂无 |\n\n### 上海 - 桐乡\n- 上海虹桥 - 桐乡\n|  | 高铁 | 动车 | 火车 |\n|--------|--------|--------|--------|\n| 价格/元 | 50.5 | 41 | 暂无 |\n| 时长/分 | 40 | 47 | 暂无 |\n\n- 上海站 - 桐乡\n- 查询了几天，发现只有高铁：价格（65.5）时长(1时08分) ps：建议虹桥坐车\n\n- 到达桐乡出战后乘坐 k282（约1h） 到乌镇汽车站，换成 k350（约10min） 到达 乌镇西栅区\n\n## 乌镇布局\n- 分为东西南北四栅\n- 西栅门票 150 元（有夜景）\n- 东栅门票 110元\n- 南北栅无需门票\nps： 时间充足可以游玩全部，如只有一天时间建议西栅，游玩的人比较多\n\n## 住宿\n  - 便宜点的 100 - 200 左右 基本距离西栅景区 1公里左右\n  - 贵点的基本 400 左右； 西栅景区内和周边都有\n  - 橘子酒店 离西栅景区很近 价格 300 左右\n  ps： 有的攻略说西栅景区内住房免门票（回来后补充）\n\n## 景点\n### 西栅景区\n  #### 木心美术馆\n  - 时间： 9：00 - 17：30\n  - 门票： 20\n  - 展览木心先生的作品。 ps: 不可随意拍照\n\n  #### 水上集市\n  - 早茶时间： 6：00 - 9：00\n  - 门票： 免费（需提前预约）\n  - 清晨各种早茶，感受江南气息\n\n  #### 白莲塔\n  - 门票： 免费\n  - 乌镇最高的建筑，可以看到西栅全景\n\n  #### 草木本色染坊\n  - 门票： 免费\n  - 无数条挂下来的白布，像影视剧中的画一般\n\n  #### 灵水局\n  - 门票： 免费\n  - 翡翠绿的天堂，非常有古风的味道\n\n  #### 乌镇老邮局\n  - 门票： 免费\n  - 墙上 \"从前车马很慢，书信很远，一生只够爱一人\"\n\n  #### 昭明书院\n  - 门票： 免费\n  - 窗明几净的书房，非常出片\n\n  #### 月老庙\n  - 门票： 免费\n  - 可以去求姻缘哈哈哈\n\n  #### 西庆堂\n  - 门票： 免费\n  - 可以看看古时的大户人家如何出嫁\n\n  #### 矛盾纪念馆\n  - 门票： 免费\n  - 矛盾先生的作品\n\n![路线图](../img/wuzhen.jpg)\n","slug":"乌镇","published":1,"date":"2023-06-06T02:16:50.106Z","updated":"2023-06-06T03:13:32.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clijr0jcy000p44vc8977ds16","content":"<p>粗去玩-乌镇准备</p>\n<h2 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h2><ul>\n<li>浙江桐乡</li>\n</ul>\n<h2 id=\"出行\"><a href=\"#出行\" class=\"headerlink\" title=\"出行\"></a>出行</h2><ul>\n<li>以下价格默认为二等座<h3 id=\"杭州东-桐乡\"><a href=\"#杭州东-桐乡\" class=\"headerlink\" title=\"杭州东 - 桐乡\"></a>杭州东 - 桐乡</h3><ul>\n<li>可以直接打车 顺风车 约1.5h 100元左右<table>\n<thead>\n<tr>\n<th></th>\n<th>高铁</th>\n<th>动车</th>\n<th>火车</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>价格&#x2F;元</td>\n<td>21.5</td>\n<td>17</td>\n<td>暂无</td>\n</tr>\n<tr>\n<td>时长&#x2F;分</td>\n<td>17</td>\n<td>17</td>\n<td>暂无</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"上海-桐乡\"><a href=\"#上海-桐乡\" class=\"headerlink\" title=\"上海 - 桐乡\"></a>上海 - 桐乡</h3><ul>\n<li><p>上海虹桥 - 桐乡</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>高铁</th>\n<th>动车</th>\n<th>火车</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>价格&#x2F;元</td>\n<td>50.5</td>\n<td>41</td>\n<td>暂无</td>\n</tr>\n<tr>\n<td>时长&#x2F;分</td>\n<td>40</td>\n<td>47</td>\n<td>暂无</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>上海站 - 桐乡</p>\n</li>\n<li><p>查询了几天，发现只有高铁：价格（65.5）时长(1时08分) ps：建议虹桥坐车</p>\n</li>\n<li><p>到达桐乡出战后乘坐 k282（约1h） 到乌镇汽车站，换成 k350（约10min） 到达 乌镇西栅区</p>\n</li>\n</ul>\n<h2 id=\"乌镇布局\"><a href=\"#乌镇布局\" class=\"headerlink\" title=\"乌镇布局\"></a>乌镇布局</h2><ul>\n<li>分为东西南北四栅</li>\n<li>西栅门票 150 元（有夜景）</li>\n<li>东栅门票 110元</li>\n<li>南北栅无需门票<br>ps： 时间充足可以游玩全部，如只有一天时间建议西栅，游玩的人比较多</li>\n</ul>\n<h2 id=\"住宿\"><a href=\"#住宿\" class=\"headerlink\" title=\"住宿\"></a>住宿</h2><ul>\n<li>便宜点的 100 - 200 左右 基本距离西栅景区 1公里左右</li>\n<li>贵点的基本 400 左右； 西栅景区内和周边都有</li>\n<li>橘子酒店 离西栅景区很近 价格 300 左右<br>  ps： 有的攻略说西栅景区内住房免门票（回来后补充）</li>\n</ul>\n<h2 id=\"景点\"><a href=\"#景点\" class=\"headerlink\" title=\"景点\"></a>景点</h2><h3 id=\"西栅景区\"><a href=\"#西栅景区\" class=\"headerlink\" title=\"西栅景区\"></a>西栅景区</h3><h4 id=\"木心美术馆\"><a href=\"#木心美术馆\" class=\"headerlink\" title=\"木心美术馆\"></a>木心美术馆</h4><ul>\n<li>时间： 9：00 - 17：30</li>\n<li>门票： 20</li>\n<li>展览木心先生的作品。 ps: 不可随意拍照</li>\n</ul>\n<h4 id=\"水上集市\"><a href=\"#水上集市\" class=\"headerlink\" title=\"水上集市\"></a>水上集市</h4><ul>\n<li>早茶时间： 6：00 - 9：00</li>\n<li>门票： 免费（需提前预约）</li>\n<li>清晨各种早茶，感受江南气息</li>\n</ul>\n<h4 id=\"白莲塔\"><a href=\"#白莲塔\" class=\"headerlink\" title=\"白莲塔\"></a>白莲塔</h4><ul>\n<li>门票： 免费</li>\n<li>乌镇最高的建筑，可以看到西栅全景</li>\n</ul>\n<h4 id=\"草木本色染坊\"><a href=\"#草木本色染坊\" class=\"headerlink\" title=\"草木本色染坊\"></a>草木本色染坊</h4><ul>\n<li>门票： 免费</li>\n<li>无数条挂下来的白布，像影视剧中的画一般</li>\n</ul>\n<h4 id=\"灵水局\"><a href=\"#灵水局\" class=\"headerlink\" title=\"灵水局\"></a>灵水局</h4><ul>\n<li>门票： 免费</li>\n<li>翡翠绿的天堂，非常有古风的味道</li>\n</ul>\n<h4 id=\"乌镇老邮局\"><a href=\"#乌镇老邮局\" class=\"headerlink\" title=\"乌镇老邮局\"></a>乌镇老邮局</h4><ul>\n<li>门票： 免费</li>\n<li>墙上 “从前车马很慢，书信很远，一生只够爱一人”</li>\n</ul>\n<h4 id=\"昭明书院\"><a href=\"#昭明书院\" class=\"headerlink\" title=\"昭明书院\"></a>昭明书院</h4><ul>\n<li>门票： 免费</li>\n<li>窗明几净的书房，非常出片</li>\n</ul>\n<h4 id=\"月老庙\"><a href=\"#月老庙\" class=\"headerlink\" title=\"月老庙\"></a>月老庙</h4><ul>\n<li>门票： 免费</li>\n<li>可以去求姻缘哈哈哈</li>\n</ul>\n<h4 id=\"西庆堂\"><a href=\"#西庆堂\" class=\"headerlink\" title=\"西庆堂\"></a>西庆堂</h4><ul>\n<li>门票： 免费</li>\n<li>可以看看古时的大户人家如何出嫁</li>\n</ul>\n<h4 id=\"矛盾纪念馆\"><a href=\"#矛盾纪念馆\" class=\"headerlink\" title=\"矛盾纪念馆\"></a>矛盾纪念馆</h4><ul>\n<li>门票： 免费</li>\n<li>矛盾先生的作品</li>\n</ul>\n<p><img src=\"/../img/wuzhen.jpg\" alt=\"路线图\"></p>\n","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover_type":"img","excerpt":"","more":"<p>粗去玩-乌镇准备</p>\n<h2 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h2><ul>\n<li>浙江桐乡</li>\n</ul>\n<h2 id=\"出行\"><a href=\"#出行\" class=\"headerlink\" title=\"出行\"></a>出行</h2><ul>\n<li>以下价格默认为二等座<h3 id=\"杭州东-桐乡\"><a href=\"#杭州东-桐乡\" class=\"headerlink\" title=\"杭州东 - 桐乡\"></a>杭州东 - 桐乡</h3><ul>\n<li>可以直接打车 顺风车 约1.5h 100元左右<table>\n<thead>\n<tr>\n<th></th>\n<th>高铁</th>\n<th>动车</th>\n<th>火车</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>价格&#x2F;元</td>\n<td>21.5</td>\n<td>17</td>\n<td>暂无</td>\n</tr>\n<tr>\n<td>时长&#x2F;分</td>\n<td>17</td>\n<td>17</td>\n<td>暂无</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"上海-桐乡\"><a href=\"#上海-桐乡\" class=\"headerlink\" title=\"上海 - 桐乡\"></a>上海 - 桐乡</h3><ul>\n<li><p>上海虹桥 - 桐乡</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>高铁</th>\n<th>动车</th>\n<th>火车</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>价格&#x2F;元</td>\n<td>50.5</td>\n<td>41</td>\n<td>暂无</td>\n</tr>\n<tr>\n<td>时长&#x2F;分</td>\n<td>40</td>\n<td>47</td>\n<td>暂无</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>上海站 - 桐乡</p>\n</li>\n<li><p>查询了几天，发现只有高铁：价格（65.5）时长(1时08分) ps：建议虹桥坐车</p>\n</li>\n<li><p>到达桐乡出战后乘坐 k282（约1h） 到乌镇汽车站，换成 k350（约10min） 到达 乌镇西栅区</p>\n</li>\n</ul>\n<h2 id=\"乌镇布局\"><a href=\"#乌镇布局\" class=\"headerlink\" title=\"乌镇布局\"></a>乌镇布局</h2><ul>\n<li>分为东西南北四栅</li>\n<li>西栅门票 150 元（有夜景）</li>\n<li>东栅门票 110元</li>\n<li>南北栅无需门票<br>ps： 时间充足可以游玩全部，如只有一天时间建议西栅，游玩的人比较多</li>\n</ul>\n<h2 id=\"住宿\"><a href=\"#住宿\" class=\"headerlink\" title=\"住宿\"></a>住宿</h2><ul>\n<li>便宜点的 100 - 200 左右 基本距离西栅景区 1公里左右</li>\n<li>贵点的基本 400 左右； 西栅景区内和周边都有</li>\n<li>橘子酒店 离西栅景区很近 价格 300 左右<br>  ps： 有的攻略说西栅景区内住房免门票（回来后补充）</li>\n</ul>\n<h2 id=\"景点\"><a href=\"#景点\" class=\"headerlink\" title=\"景点\"></a>景点</h2><h3 id=\"西栅景区\"><a href=\"#西栅景区\" class=\"headerlink\" title=\"西栅景区\"></a>西栅景区</h3><h4 id=\"木心美术馆\"><a href=\"#木心美术馆\" class=\"headerlink\" title=\"木心美术馆\"></a>木心美术馆</h4><ul>\n<li>时间： 9：00 - 17：30</li>\n<li>门票： 20</li>\n<li>展览木心先生的作品。 ps: 不可随意拍照</li>\n</ul>\n<h4 id=\"水上集市\"><a href=\"#水上集市\" class=\"headerlink\" title=\"水上集市\"></a>水上集市</h4><ul>\n<li>早茶时间： 6：00 - 9：00</li>\n<li>门票： 免费（需提前预约）</li>\n<li>清晨各种早茶，感受江南气息</li>\n</ul>\n<h4 id=\"白莲塔\"><a href=\"#白莲塔\" class=\"headerlink\" title=\"白莲塔\"></a>白莲塔</h4><ul>\n<li>门票： 免费</li>\n<li>乌镇最高的建筑，可以看到西栅全景</li>\n</ul>\n<h4 id=\"草木本色染坊\"><a href=\"#草木本色染坊\" class=\"headerlink\" title=\"草木本色染坊\"></a>草木本色染坊</h4><ul>\n<li>门票： 免费</li>\n<li>无数条挂下来的白布，像影视剧中的画一般</li>\n</ul>\n<h4 id=\"灵水局\"><a href=\"#灵水局\" class=\"headerlink\" title=\"灵水局\"></a>灵水局</h4><ul>\n<li>门票： 免费</li>\n<li>翡翠绿的天堂，非常有古风的味道</li>\n</ul>\n<h4 id=\"乌镇老邮局\"><a href=\"#乌镇老邮局\" class=\"headerlink\" title=\"乌镇老邮局\"></a>乌镇老邮局</h4><ul>\n<li>门票： 免费</li>\n<li>墙上 “从前车马很慢，书信很远，一生只够爱一人”</li>\n</ul>\n<h4 id=\"昭明书院\"><a href=\"#昭明书院\" class=\"headerlink\" title=\"昭明书院\"></a>昭明书院</h4><ul>\n<li>门票： 免费</li>\n<li>窗明几净的书房，非常出片</li>\n</ul>\n<h4 id=\"月老庙\"><a href=\"#月老庙\" class=\"headerlink\" title=\"月老庙\"></a>月老庙</h4><ul>\n<li>门票： 免费</li>\n<li>可以去求姻缘哈哈哈</li>\n</ul>\n<h4 id=\"西庆堂\"><a href=\"#西庆堂\" class=\"headerlink\" title=\"西庆堂\"></a>西庆堂</h4><ul>\n<li>门票： 免费</li>\n<li>可以看看古时的大户人家如何出嫁</li>\n</ul>\n<h4 id=\"矛盾纪念馆\"><a href=\"#矛盾纪念馆\" class=\"headerlink\" title=\"矛盾纪念馆\"></a>矛盾纪念馆</h4><ul>\n<li>门票： 免费</li>\n<li>矛盾先生的作品</li>\n</ul>\n<p><img src=\"/../img/wuzhen.jpg\" alt=\"路线图\"></p>\n"},{"title":"解决若依vue版菜单点不开Error: Cannot find module '@/views/system/user/index'错误","cover":"/img/wenti-01.jpg","_content":"\n项目中遇到问题：在使用若依的后台管理时，若依 vue 版菜单点不开，报错：Error: Cannot find module ‘@/views/system/user/index’后台、vue前端启动都没问题。但是左侧菜单点不开，一直在加载中。\n\n## 控制台报错\n```JavaScript\n  Error: Cannot find module '@/views/system/user/index'\n    at webpackEmptyContext (index.js:39)\n    at permission.js:73\n```\n\n## 解决方案\n  - 了解到是 webpack 版本问题，webpack4 不支持变量方式的动态 import ，新版本的使用 require() 来解决此问题。\n  - 打开 src/store/modules/permission.js 文件，将加载方式修改成：\n  ### 修改前\n```JavaScript\n  export const loadView = (view) => {\n    return () => import(`@/views/${view}`)\n  }\n```\n  ### 修改后\n```JavaScript\n  export const loadView = (view) => {\n    return (resolve) => require([`@/views/${view}`], resolve)\n  }\n  \n```","source":"_posts/解决若依vue菜单点击不跳转问题 .md","raw":"---\ntitle: \"解决若依vue版菜单点不开Error: Cannot find module '@/views/system/user/index'错误\"\ncover: /img/wenti-01.jpg\ncategories:\n  - 前端问题收集\n---\n\n项目中遇到问题：在使用若依的后台管理时，若依 vue 版菜单点不开，报错：Error: Cannot find module ‘@/views/system/user/index’后台、vue前端启动都没问题。但是左侧菜单点不开，一直在加载中。\n\n## 控制台报错\n```JavaScript\n  Error: Cannot find module '@/views/system/user/index'\n    at webpackEmptyContext (index.js:39)\n    at permission.js:73\n```\n\n## 解决方案\n  - 了解到是 webpack 版本问题，webpack4 不支持变量方式的动态 import ，新版本的使用 require() 来解决此问题。\n  - 打开 src/store/modules/permission.js 文件，将加载方式修改成：\n  ### 修改前\n```JavaScript\n  export const loadView = (view) => {\n    return () => import(`@/views/${view}`)\n  }\n```\n  ### 修改后\n```JavaScript\n  export const loadView = (view) => {\n    return (resolve) => require([`@/views/${view}`], resolve)\n  }\n  \n```","slug":"解决若依vue菜单点击不跳转问题 ","published":1,"date":"2023-05-31T03:26:18.862Z","updated":"2023-06-05T11:56:56.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clijr0jcz000q44vca8uoavz7","content":"<p>项目中遇到问题：在使用若依的后台管理时，若依 vue 版菜单点不开，报错：Error: Cannot find module ‘@&#x2F;views&#x2F;system&#x2F;user&#x2F;index’后台、vue前端启动都没问题。但是左侧菜单点不开，一直在加载中。</p>\n<h2 id=\"控制台报错\"><a href=\"#控制台报错\" class=\"headerlink\" title=\"控制台报错\"></a>控制台报错</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Error</span>: <span class=\"title class_\">Cannot</span> find <span class=\"variable language_\">module</span> <span class=\"string\">&#x27;@/views/system/user/index&#x27;</span></span><br><span class=\"line\">  at webpackEmptyContext (index.<span class=\"property\">js</span>:<span class=\"number\">39</span>)</span><br><span class=\"line\">  at permission.<span class=\"property\">js</span>:<span class=\"number\">73</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>了解到是 webpack 版本问题，webpack4 不支持变量方式的动态 import ，新版本的使用 require() 来解决此问题。</li>\n<li>打开 src&#x2F;store&#x2F;modules&#x2F;permission.js 文件，将加载方式修改成：</li>\n</ul>\n<h3 id=\"修改前\"><a href=\"#修改前\" class=\"headerlink\" title=\"修改前\"></a>修改前</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">loadView</span> = (<span class=\"params\">view</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">`@/views/<span class=\"subst\">$&#123;view&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改后\"><a href=\"#修改后\" class=\"headerlink\" title=\"修改后\"></a>修改后</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">loadView</span> = (<span class=\"params\">view</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">`@/views/<span class=\"subst\">$&#123;view&#125;</span>`</span>], resolve)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover_type":"img","excerpt":"","more":"<p>项目中遇到问题：在使用若依的后台管理时，若依 vue 版菜单点不开，报错：Error: Cannot find module ‘@&#x2F;views&#x2F;system&#x2F;user&#x2F;index’后台、vue前端启动都没问题。但是左侧菜单点不开，一直在加载中。</p>\n<h2 id=\"控制台报错\"><a href=\"#控制台报错\" class=\"headerlink\" title=\"控制台报错\"></a>控制台报错</h2><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Error</span>: <span class=\"title class_\">Cannot</span> find <span class=\"variable language_\">module</span> <span class=\"string\">&#x27;@/views/system/user/index&#x27;</span></span><br><span class=\"line\">  at webpackEmptyContext (index.<span class=\"property\">js</span>:<span class=\"number\">39</span>)</span><br><span class=\"line\">  at permission.<span class=\"property\">js</span>:<span class=\"number\">73</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>了解到是 webpack 版本问题，webpack4 不支持变量方式的动态 import ，新版本的使用 require() 来解决此问题。</li>\n<li>打开 src&#x2F;store&#x2F;modules&#x2F;permission.js 文件，将加载方式修改成：</li>\n</ul>\n<h3 id=\"修改前\"><a href=\"#修改前\" class=\"headerlink\" title=\"修改前\"></a>修改前</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">loadView</span> = (<span class=\"params\">view</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">`@/views/<span class=\"subst\">$&#123;view&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改后\"><a href=\"#修改后\" class=\"headerlink\" title=\"修改后\"></a>修改后</h3><figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">loadView</span> = (<span class=\"params\">view</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> <span class=\"built_in\">require</span>([<span class=\"string\">`@/views/<span class=\"subst\">$&#123;view&#125;</span>`</span>], resolve)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"配置git sshkey","cover":"/img/post-ssh.jpg","_content":"\n使用sshkey拉取项目时需要配置sshKey，所以今天来记录下sshkey配置过程\n\n## 检查有没有已有的sshkey\n  - 如果有可以直接使用，如果没有则继续往下看\n```shell\n  ls -al ~/.ssh \n```\n\n## 生成sshkey\n\n- 执行命令配置name和email\n```shell\n  git config –global user.name \"你的name\"\n```\n```shell\n  git config –global user.email \"你的邮箱\"\n```\n\n- 生成密钥\n- 以下使用的邮箱同上配置的一样\n```shell\n  ssh-keygen -t rsa -C \"你的邮箱\"\n```\n\n<font color=#00FFFF>代码参数含义：</font>\n  -t 指定密钥类型，默认是 rsa ，可以省略。\n  -C 设置注释文字，比如邮箱。\n  -f 指定密钥文件存储文件名。\n\n指令走完后\n```shell\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/c/Users/ASUS/.ssh/id_rsa):   <===  输入回车\n/c/Users/ASUS/.ssh/id_rsa already exists.\nOverwrite (y/n)? y  <===  输入y（有的也是回车）\nEnter passphrase (empty for no passphrase):  <===  继续输入回车\nEnter same passphrase again:    <===  继续输入回车\nYour identification has been saved in /c/Users/ASUS/.ssh/id_rsa\nYour public key has been saved in /c/Users/ASUS/.ssh/id_rsa.pub\nThe key fingerprint is:\nSHA256:Y9HCO1xmOK+3HG8iR8ZPZM1skZ8/T3VHnMD2IkwIvyE youremail@.com\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .. . ...o.|\n|       ..+ . oo.o|\n|       E*oB .+.+.|\n|       ..Xooo.=o=|\n|        So.o... =|\n|       . ++ .  .o|\n|        .ooo   .o|\n|        .oo+o   .|\n|         ooo.    |\n+----[SHA256]-----+\n```\n指令执行完之后可以进入c盘的.ssh文件夹下找到id_rsa.pub文件就是sshkey(ctrl + a 复制内容)\n\n## sshkey添加至远端\n\n1. 登录 github 点击头像找到settings 选项\n2. 进入该页面后在左侧找到 SSH and GPG keys 选项\n3. 点击 New SSh key 按钮\n4. 在Title输入名称， 将 id_rsa.pub 的内容粘贴到key里面\n5. 点击 Add SSh key 完成","source":"_posts/生成sshkey.md","raw":"---\ntitle: 配置git sshkey\ncover: /img/post-ssh.jpg\ncategories:\n  - git配置\n---\n\n使用sshkey拉取项目时需要配置sshKey，所以今天来记录下sshkey配置过程\n\n## 检查有没有已有的sshkey\n  - 如果有可以直接使用，如果没有则继续往下看\n```shell\n  ls -al ~/.ssh \n```\n\n## 生成sshkey\n\n- 执行命令配置name和email\n```shell\n  git config –global user.name \"你的name\"\n```\n```shell\n  git config –global user.email \"你的邮箱\"\n```\n\n- 生成密钥\n- 以下使用的邮箱同上配置的一样\n```shell\n  ssh-keygen -t rsa -C \"你的邮箱\"\n```\n\n<font color=#00FFFF>代码参数含义：</font>\n  -t 指定密钥类型，默认是 rsa ，可以省略。\n  -C 设置注释文字，比如邮箱。\n  -f 指定密钥文件存储文件名。\n\n指令走完后\n```shell\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/c/Users/ASUS/.ssh/id_rsa):   <===  输入回车\n/c/Users/ASUS/.ssh/id_rsa already exists.\nOverwrite (y/n)? y  <===  输入y（有的也是回车）\nEnter passphrase (empty for no passphrase):  <===  继续输入回车\nEnter same passphrase again:    <===  继续输入回车\nYour identification has been saved in /c/Users/ASUS/.ssh/id_rsa\nYour public key has been saved in /c/Users/ASUS/.ssh/id_rsa.pub\nThe key fingerprint is:\nSHA256:Y9HCO1xmOK+3HG8iR8ZPZM1skZ8/T3VHnMD2IkwIvyE youremail@.com\nThe key's randomart image is:\n+---[RSA 3072]----+\n|       .. . ...o.|\n|       ..+ . oo.o|\n|       E*oB .+.+.|\n|       ..Xooo.=o=|\n|        So.o... =|\n|       . ++ .  .o|\n|        .ooo   .o|\n|        .oo+o   .|\n|         ooo.    |\n+----[SHA256]-----+\n```\n指令执行完之后可以进入c盘的.ssh文件夹下找到id_rsa.pub文件就是sshkey(ctrl + a 复制内容)\n\n## sshkey添加至远端\n\n1. 登录 github 点击头像找到settings 选项\n2. 进入该页面后在左侧找到 SSH and GPG keys 选项\n3. 点击 New SSh key 按钮\n4. 在Title输入名称， 将 id_rsa.pub 的内容粘贴到key里面\n5. 点击 Add SSh key 完成","slug":"生成sshkey","published":1,"date":"2023-06-05T09:38:59.689Z","updated":"2023-06-06T03:55:45.329Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clijr0jcz000s44vc1bj94zrv","content":"<p>使用sshkey拉取项目时需要配置sshKey，所以今天来记录下sshkey配置过程</p>\n<h2 id=\"检查有没有已有的sshkey\"><a href=\"#检查有没有已有的sshkey\" class=\"headerlink\" title=\"检查有没有已有的sshkey\"></a>检查有没有已有的sshkey</h2><ul>\n<li>如果有可以直接使用，如果没有则继续往下看<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ls -al ~/.ssh </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"生成sshkey\"><a href=\"#生成sshkey\" class=\"headerlink\" title=\"生成sshkey\"></a>生成sshkey</h2><ul>\n<li><p>执行命令配置name和email</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config –global user.name &quot;你的name&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config –global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成密钥</p>\n</li>\n<li><p>以下使用的邮箱同上配置的一样</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><font color=#00FFFF>代码参数含义：</font><br>  -t 指定密钥类型，默认是 rsa ，可以省略。<br>  -C 设置注释文字，比如邮箱。<br>  -f 指定密钥文件存储文件名。</p>\n<p>指令走完后</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/c/Users/ASUS/.ssh/id_rsa):   &lt;===  输入回车</span><br><span class=\"line\">/c/Users/ASUS/.ssh/id_rsa already exists.</span><br><span class=\"line\">Overwrite (y/n)? y  &lt;===  输入y（有的也是回车）</span><br><span class=\"line\">Enter passphrase (empty for no passphrase):  &lt;===  继续输入回车</span><br><span class=\"line\">Enter same passphrase again:    &lt;===  继续输入回车</span><br><span class=\"line\">Your identification has been saved in /c/Users/ASUS/.ssh/id_rsa</span><br><span class=\"line\">Your public key has been saved in /c/Users/ASUS/.ssh/id_rsa.pub</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:Y9HCO1xmOK+3HG8iR8ZPZM1skZ8/T3VHnMD2IkwIvyE youremail@.com</span><br><span class=\"line\">The key&#x27;s randomart image is:</span><br><span class=\"line\">+---[RSA 3072]----+</span><br><span class=\"line\">|       .. . ...o.|</span><br><span class=\"line\">|       ..+ . oo.o|</span><br><span class=\"line\">|       E*oB .+.+.|</span><br><span class=\"line\">|       ..Xooo.=o=|</span><br><span class=\"line\">|        So.o... =|</span><br><span class=\"line\">|       . ++ .  .o|</span><br><span class=\"line\">|        .ooo   .o|</span><br><span class=\"line\">|        .oo+o   .|</span><br><span class=\"line\">|         ooo.    |</span><br><span class=\"line\">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>\n<p>指令执行完之后可以进入c盘的.ssh文件夹下找到id_rsa.pub文件就是sshkey(ctrl + a 复制内容)</p>\n<h2 id=\"sshkey添加至远端\"><a href=\"#sshkey添加至远端\" class=\"headerlink\" title=\"sshkey添加至远端\"></a>sshkey添加至远端</h2><ol>\n<li>登录 github 点击头像找到settings 选项</li>\n<li>进入该页面后在左侧找到 SSH and GPG keys 选项</li>\n<li>点击 New SSh key 按钮</li>\n<li>在Title输入名称， 将 id_rsa.pub 的内容粘贴到key里面</li>\n<li>点击 Add SSh key 完成</li>\n</ol>\n","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover_type":"img","excerpt":"","more":"<p>使用sshkey拉取项目时需要配置sshKey，所以今天来记录下sshkey配置过程</p>\n<h2 id=\"检查有没有已有的sshkey\"><a href=\"#检查有没有已有的sshkey\" class=\"headerlink\" title=\"检查有没有已有的sshkey\"></a>检查有没有已有的sshkey</h2><ul>\n<li>如果有可以直接使用，如果没有则继续往下看<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ls -al ~/.ssh </span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"生成sshkey\"><a href=\"#生成sshkey\" class=\"headerlink\" title=\"生成sshkey\"></a>生成sshkey</h2><ul>\n<li><p>执行命令配置name和email</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config –global user.name &quot;你的name&quot;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config –global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生成密钥</p>\n</li>\n<li><p>以下使用的邮箱同上配置的一样</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><font color=#00FFFF>代码参数含义：</font><br>  -t 指定密钥类型，默认是 rsa ，可以省略。<br>  -C 设置注释文字，比如邮箱。<br>  -f 指定密钥文件存储文件名。</p>\n<p>指令走完后</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/c/Users/ASUS/.ssh/id_rsa):   &lt;===  输入回车</span><br><span class=\"line\">/c/Users/ASUS/.ssh/id_rsa already exists.</span><br><span class=\"line\">Overwrite (y/n)? y  &lt;===  输入y（有的也是回车）</span><br><span class=\"line\">Enter passphrase (empty for no passphrase):  &lt;===  继续输入回车</span><br><span class=\"line\">Enter same passphrase again:    &lt;===  继续输入回车</span><br><span class=\"line\">Your identification has been saved in /c/Users/ASUS/.ssh/id_rsa</span><br><span class=\"line\">Your public key has been saved in /c/Users/ASUS/.ssh/id_rsa.pub</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">SHA256:Y9HCO1xmOK+3HG8iR8ZPZM1skZ8/T3VHnMD2IkwIvyE youremail@.com</span><br><span class=\"line\">The key&#x27;s randomart image is:</span><br><span class=\"line\">+---[RSA 3072]----+</span><br><span class=\"line\">|       .. . ...o.|</span><br><span class=\"line\">|       ..+ . oo.o|</span><br><span class=\"line\">|       E*oB .+.+.|</span><br><span class=\"line\">|       ..Xooo.=o=|</span><br><span class=\"line\">|        So.o... =|</span><br><span class=\"line\">|       . ++ .  .o|</span><br><span class=\"line\">|        .ooo   .o|</span><br><span class=\"line\">|        .oo+o   .|</span><br><span class=\"line\">|         ooo.    |</span><br><span class=\"line\">+----[SHA256]-----+</span><br></pre></td></tr></table></figure>\n<p>指令执行完之后可以进入c盘的.ssh文件夹下找到id_rsa.pub文件就是sshkey(ctrl + a 复制内容)</p>\n<h2 id=\"sshkey添加至远端\"><a href=\"#sshkey添加至远端\" class=\"headerlink\" title=\"sshkey添加至远端\"></a>sshkey添加至远端</h2><ol>\n<li>登录 github 点击头像找到settings 选项</li>\n<li>进入该页面后在左侧找到 SSH and GPG keys 选项</li>\n<li>点击 New SSh key 按钮</li>\n<li>在Title输入名称， 将 id_rsa.pub 的内容粘贴到key里面</li>\n<li>点击 Add SSh key 完成</li>\n</ol>\n"},{"title":"vue面试题","cover":"/img/post-vue.jpg","_content":"\n继续整理，本篇以vue为主，如需其他，请阅读其他文章。\n\n## vue双向绑定\n  - Vue 的双向数据绑定是通过 <font color=##00FF00>v-model</font> 指令实现的。\n  - 当数据模型的属性值发生变化时，Vue 会自动检测到变化，并更新对应的视图。\n  - 当用户与视图进行交互，例如在输入框中输入文本时，v-model 指令会监听用户的输入事件。\n  - 当用户输入发生变化时，v-model 会自动更新数据模型的属性值，确保数据的同步更新。\n  - 数据模型的更新会触发 Vue 的响应式系统，进而更新相关的视图。\n  ### 实现原理\n  - 在编译阶段，Vue.js 会将 v-model 解析为一个属性和一个事件。\n  - 属性部分是绑定数据的值，通常是一个变量。\n  - 事件部分是监听输入事件，一般是 input 事件，可以通过修饰符指定其他事件，如 change、keyup 等。\n  - 当用户在表单元素中输入内容时，触发对应的输入事件。\n  - Vue.js 捕获到输入事件后，将用户输入的值更新到绑定的属性上，实现数据的更新。\n  - 同时，v-model 还会将最新的属性值反映到表单元素的 value 属性上，确保视图和数据的同步。\n\n## 生命周期\n  ### beforeCreate\n    - 在实例初始化之后、数据观测 (data observation) 和 event/watcher 事件配置之前被调用。\n    - <font color=#00FF00>无法访问到组件的数据和方法</font>\n  ### created\n    - 在实例创建完成后被立即调用。\n    - <font color=#00FF00>可以访问到组件的数据和方法。</font>\n    - 通常在这个阶段进行数据的初始化、异步请求的发起等操作。\n  ### beforeMount\n    - 在挂载开始之前被调用\n    - 模板编译已经完成，但<font color=#00FF00>尚未将组件挂载到页面上</font>。\n  ### mounted\n    - 在挂载完成后被调用\n    - 组件已经被挂载到页面上，<font color=#00FF00>可以操作 DOM 元素、进行初始化</font>工作或与第三方库进行集成。\n  ### beforeUpdate\n    - 在数据更新之前被调用，发生在虚拟 DOM 重新渲染和打补丁之前。\n    - 可以进行一些数据的预处理或在更新前进行额外的操作。\n  ### updated\n    - 在数据更新完成后被调用，发生在虚拟 DOM 重新渲染和打补丁之后\n    - 组件已经重新渲染，<font color=#00FF00>可以执行 DOM 操作</font>。\n  ### beforeUnmount (Vue 3.x) / beforeDestroy (Vue 2.x)\n    - 进行一些<font color=#00FF00>清理</font>清理工作，如清除定时器、取消订阅等。\n  ### unmounted (Vue 3.x) / destroyed (Vue 2.x)\n    - 在组件销毁完成后被调用。此时，组件已经被销毁，可以进行最后的清理工作。\n\n## 计算属性和侦听器的区别\n  - 计算属性使用<font color=#00FF00>computed</font>声明；侦听器使用<font color=#00FF00>watch</font>声明\n  - 计算属性的值会根据依赖的数据进行<font color=#00FF00>缓存</font>，只有当依赖的数据发生变化时，才会重新计算。\n  - 计算属性的值会随着依赖的数据变化而自动更新，即当依赖的数据发生变化时，计算属性会自动重新计算并返回新的值。\n  - 可以通过字符串形式监听单个数据，也可以通过函数形式监听多个数据。监听的数据发生变化时，侦听器会执行相应的回调函数。\n  - 侦听器中的回调函数可以执行<font color=#00FF00>异步操作</font>，例如发送网络请求、操作 DOM 等。\n\n## Vue组件通信的方式\n  ### Props / $emit\n    - 父组件通过 <font color=#00FF00>Props</font> 将数据传递给子组件，子组件通过 <font color=#00FF00>$emit</font> 发送事件给父组件\n  ### $refs\n    - 父组件通过 <font color=#00FF00>$refs</font> 引用子组件实例，并直接调用子组件的方法或访问子组件的属性\n  ### 事件总线（Event Bus）\n    - 创建一个全局的事件中心，用于父子组件之间的通信\n    - 父组件通过事件中心 <font color=#00FF00>$emit</font> 发送事件，子组件通过事件中心 <font color=#00FF00>$on</font> 监听事件并做出响应\n    - 适合用于兄弟组件之间的通信或者跨层级的组件通信。\n  ### Vuex\n    - Vuex 是 Vue 的状态管理库，可以用于管理应用的共享状态\n  ### $parent / $children\n    - 父组件可以通过 <font color=#00FF00>$children</font> 访问直接子组件的实例，子组件可以通过 <font color=#00FF00>$parent</font> 访问父组件的实例。\n    - 直接访问父子组件的实例会增加组件间的耦合性，不够灵活。\n\n## Vuex 的核心概念和基本用法。\n  ### State\n    - 存储应用程序的共享状态\n    - 可以通过 <font color=#00FF00>this.$store.state</font> 访问\n  ### Getter\n    - 类似于计算属性，Getter 可以对状态进行计算和处理，并返回结果\n    - 使用时需要定义在 getters 对象中\n    - 通过 <font color=#00FF00>this.$store.getters</font> 访问\n  ### Mutation\n    - Mutation 是一个同步函数，接收状态作为参数，并对状态进行修改\n    - 使用时需要定义在 mutations 对象中\n    - 通过 <font color=#00FF00>this.$store.commit</font> 提交\n  ### Action\n    - 类似于 Mutation，但可以处理异步操作\n    - 完成后提交 Mutation 来修改状态\n    - 使用时需要定义在 actions 对象中\n    - 通过 <font color=#00FF00>this.$store.dispatch</font> 分发\n  ### Module\n    - 用于将 Vuex 的状态划分为多个模块，每个模块可以拥有自己的 state、getters、mutations 和 actions\n\n## Vue 中的动画是如何实现的\n  ### 过渡类名\n    - v-enter\n    - v-enter-active\n    - v-enter-to\n    - v-leave\n    - v-leave-active\n    - v-leave-to\n  ### 过渡钩子函数\n    - before-enter\n    - enter\n    - after-enter\n    - enter-cancelled\n    - before-leave\n    - leave\n    - after-leave\n    - leave-cancelled\n  ### 过渡模式\n    - in-out: 表示新元素先进行过渡，然后旧元素离开过渡\n    - in-out: 表示旧元素先进行过渡，然后新元素进入过渡\n  <font color=#00FFFF>例：</font>\n  ```html\n    <template>\n      <transition name=\"fade\" mode=\"out-in\">\n        <div v-if=\"show\" key=\"fade\">\n          <!-- 进入过渡的元素 -->\n          <h1>Hello Vue!</h1>\n        </div>\n      </transition>\n      <button @click=\"toggleShow\">Toggle</button>\n    </template>\n    <script>\n    export default {\n      data() {\n        return {\n          show: false,\n        };\n      },\n      methods: {\n        toggleShow() {\n          this.show = !this.show;\n        },\n      },\n    };\n    </script>\n    <style>\n    .fade-enter-active,\n    .fade-leave-active {\n      transition: opacity 0.5s;\n    }\n    .fade-enter,\n    .fade-leave-to {\n      opacity: 0;\n    }\n    </style>\n  ```\n\n## 虚拟DOM\n  - 虚拟DOM（Virtual DOM）是一种在内存中构建和操作的抽象DOM表示。它是由Vue和其他一些JavaScript库使用的技术，旨在提高DOM操作的性能和效率。\n  ### 原理\n    - 初始渲染：当应用程序加载时，Vue会将组件的模板解析成虚拟DOM树。\n    - 更新触发：当组件的数据发生变化时，Vue会生成一个新的虚拟DOM树。\n    - 对比差异：Vue会将新旧虚拟DOM树进行对比，找出它们之间的差异。\n    - 更新DOM：根据差异的结果，Vue只会更新需要变化的部分到实际的DOM中，而不是重新渲染整个组件。\n  ### 优势\n    - 提高性能：通过对比差异并只更新需要变化的部分，<font color=#00FF00>减少了对实际DOM的操作和重绘</font>，从而提高了性能。\n    - 简化开发：开发者可以专注于组件的状态和逻辑，而不需要手动操作DOM。虚拟DOM会自动处理DOM更新的细节。\n    - 跨平台能力：虚拟DOM是与平台无关的中间层，可以在不同的环境中使用，如浏览器、移动端和服务器端。\n\n## 单文件组件\n  - 单文件组件（Single File Component，SFC）是Vue中一种组织代码的方式，它将组件的模板、脚本和样式都封装在一个文件中，通常使用<font color=#00FF00>.vue</font>作为文件扩展名。\n  ### 优势\n    - 模块化开发： 将一个组件的所有相关代码放在同一个文件中，提高了代码的可维护性和复用性。\n    - 可读性增强：相关的部分可以紧密地结合在一起，便于查找和修改。\n    - 构建工具支持： 可以与构建工具（如Webpack、Vue CLI等）配合使用，通过预处理器（如Babel、TypeScript、Sass等）进行编译和打包。\n  ### 创建单文件组件\n    - 一般以.vue为扩展名的文件，并在文件中编写组件的模板、脚本和样式。\n    - 通过导入单文件组件，然后在模板中使用自定义的组件标签来引用和渲染组件。\n\n## mixin混入\n  - mixin是Vue中的一种机制，用于提取和共享组件的可复用逻辑\n  - 可以减少重复编写代码，提高代码复用性和维护性\n  - 使用mixin时需要注意命名冲突、依赖关系和全局污染等问题\n  ### 优势\n    - 代码复用：将常用的逻辑抽离为mixin，可以在多个组件中共享，避免重复编写相同的代码。\n    - 灵活性：mixin的选项可以与组件的选项进行合并，提供了一种灵活的扩展和定制组件的方式\n    - 维护性：将共享的逻辑放在mixin中，可以集中管理和维护，减少代码冗余和维护成本。\n  ### 使用时需要注意以下几点：\n    - 命名冲突：如果多个mixin中有相同的选项（如数据、方法），在合并到组件中时可能会发生命名冲突。可以使用命名空间或前缀来避免冲突。\n    - 依赖关系：mixin中的选项会与组件的选项进行合并，<font color=#00FF00>如果存在相同选项，组件选项会覆盖mixin中的选项</font>。需要注意合并顺序和依赖关系，确保最终合并的结果符合预期。\n    - 全局污染：mixin中的选项会被混入到所有使用该mixin的组件中，可能会导致全局污染和意外的副作用。需要谨慎使用，并确保mixin中的选项与组件的选项不产生冲突。\n\n## vue中key的作用\n  - key属性是用于给Vue的列表渲染（v-for指令）中的每个元素分配一个<font color=#00FF00>唯一标识</font>的特殊属性。\n  ### 使用时注意事项\n    - key的值应该是唯一且稳定的，最好使用每个元素在列表中的唯一标识作为key值，以确保元素身份的正确追踪。\n    - 不推荐使用随机数或索引作为key值，因为它们在列表顺序变化时可能会导致错误的更新行为。\n    - 当使用组件进行列表渲染时，key属性也会影响到组件的复用。不同key值的组件会被视为不同的实例，而相同key值的组件会被视为同一个实例，以实现组件的高效复用。\n\n## vue常用指令\n  - v-model：用于实现表单元素与Vue实例数据的双向绑定。\n  - v-bind：用于动态绑定属性或绑定Vue实例中的数据到HTML元素上。\n  - v-if：根据表达式的值来条件性地渲染DOM元素。\n  - v-for：用于循环渲染数组或对象的每个元素。\n  - v-on：用于监听DOM事件，触发相应的Vue实例方法。\n  - v-show：根据表达式的值来显示或隐藏DOM元素。\n  - v-text：用于设置元素的文本内容。\n  - v-html：用于将HTML代码作为元素的内容进行渲染。\n  - v-cloak：用于解决Vue编译过程中的闪烁问题，一般与CSS配合使用。\n\n## v-if与v-show区别\n  - v-if 指令根据表达式的值来动态地<font color=#00FF00>添加或移除</font>元素\n  - v-show 指令也是根据表达式的值来控制元素的<font color=#00FF00>显示和隐藏</font>\n  - v-if 有更高的切换开销\n  - 需要频繁切换的场景中，建议使用v-show\n\n## v-if与v-for一起使用\n  - vue2中，当它们同时存在于同一个元素上时，Vue 会先执行 v-for 循环，然后再在每次循环中根据 v-if 的条件判断是否渲染对应的元素，会产生不必要的性能开销。\n  - vue3 可以在template上使用v-for。\n  - vue3 以在同一个元素上同时使用， 并且只进行一次判断。\n\n## vue常用修饰符\n  - .prevent：阻止默认事件行为。\n  - .stop：阻止事件冒泡。\n  - .once：只触发一次事件，即事件处理程序只会执行一次。\n  - .capture：使用事件捕获模式，即从外部元素开始触发事件。\n  - .self：只在触发事件的元素自身上触发事件，而不是其子元素。\n  - .passive：使事件监听器为被动模式，不会调用 preventDefault()，可以提高滚动性能。\n  - .sync：用于实现父子组件之间的双向数据绑定。","source":"_posts/vue面试题.md","raw":"---\ntitle: vue面试题\ncover: /img/post-vue.jpg\ncategories:\n  - 前端面试题\n---\n\n继续整理，本篇以vue为主，如需其他，请阅读其他文章。\n\n## vue双向绑定\n  - Vue 的双向数据绑定是通过 <font color=##00FF00>v-model</font> 指令实现的。\n  - 当数据模型的属性值发生变化时，Vue 会自动检测到变化，并更新对应的视图。\n  - 当用户与视图进行交互，例如在输入框中输入文本时，v-model 指令会监听用户的输入事件。\n  - 当用户输入发生变化时，v-model 会自动更新数据模型的属性值，确保数据的同步更新。\n  - 数据模型的更新会触发 Vue 的响应式系统，进而更新相关的视图。\n  ### 实现原理\n  - 在编译阶段，Vue.js 会将 v-model 解析为一个属性和一个事件。\n  - 属性部分是绑定数据的值，通常是一个变量。\n  - 事件部分是监听输入事件，一般是 input 事件，可以通过修饰符指定其他事件，如 change、keyup 等。\n  - 当用户在表单元素中输入内容时，触发对应的输入事件。\n  - Vue.js 捕获到输入事件后，将用户输入的值更新到绑定的属性上，实现数据的更新。\n  - 同时，v-model 还会将最新的属性值反映到表单元素的 value 属性上，确保视图和数据的同步。\n\n## 生命周期\n  ### beforeCreate\n    - 在实例初始化之后、数据观测 (data observation) 和 event/watcher 事件配置之前被调用。\n    - <font color=#00FF00>无法访问到组件的数据和方法</font>\n  ### created\n    - 在实例创建完成后被立即调用。\n    - <font color=#00FF00>可以访问到组件的数据和方法。</font>\n    - 通常在这个阶段进行数据的初始化、异步请求的发起等操作。\n  ### beforeMount\n    - 在挂载开始之前被调用\n    - 模板编译已经完成，但<font color=#00FF00>尚未将组件挂载到页面上</font>。\n  ### mounted\n    - 在挂载完成后被调用\n    - 组件已经被挂载到页面上，<font color=#00FF00>可以操作 DOM 元素、进行初始化</font>工作或与第三方库进行集成。\n  ### beforeUpdate\n    - 在数据更新之前被调用，发生在虚拟 DOM 重新渲染和打补丁之前。\n    - 可以进行一些数据的预处理或在更新前进行额外的操作。\n  ### updated\n    - 在数据更新完成后被调用，发生在虚拟 DOM 重新渲染和打补丁之后\n    - 组件已经重新渲染，<font color=#00FF00>可以执行 DOM 操作</font>。\n  ### beforeUnmount (Vue 3.x) / beforeDestroy (Vue 2.x)\n    - 进行一些<font color=#00FF00>清理</font>清理工作，如清除定时器、取消订阅等。\n  ### unmounted (Vue 3.x) / destroyed (Vue 2.x)\n    - 在组件销毁完成后被调用。此时，组件已经被销毁，可以进行最后的清理工作。\n\n## 计算属性和侦听器的区别\n  - 计算属性使用<font color=#00FF00>computed</font>声明；侦听器使用<font color=#00FF00>watch</font>声明\n  - 计算属性的值会根据依赖的数据进行<font color=#00FF00>缓存</font>，只有当依赖的数据发生变化时，才会重新计算。\n  - 计算属性的值会随着依赖的数据变化而自动更新，即当依赖的数据发生变化时，计算属性会自动重新计算并返回新的值。\n  - 可以通过字符串形式监听单个数据，也可以通过函数形式监听多个数据。监听的数据发生变化时，侦听器会执行相应的回调函数。\n  - 侦听器中的回调函数可以执行<font color=#00FF00>异步操作</font>，例如发送网络请求、操作 DOM 等。\n\n## Vue组件通信的方式\n  ### Props / $emit\n    - 父组件通过 <font color=#00FF00>Props</font> 将数据传递给子组件，子组件通过 <font color=#00FF00>$emit</font> 发送事件给父组件\n  ### $refs\n    - 父组件通过 <font color=#00FF00>$refs</font> 引用子组件实例，并直接调用子组件的方法或访问子组件的属性\n  ### 事件总线（Event Bus）\n    - 创建一个全局的事件中心，用于父子组件之间的通信\n    - 父组件通过事件中心 <font color=#00FF00>$emit</font> 发送事件，子组件通过事件中心 <font color=#00FF00>$on</font> 监听事件并做出响应\n    - 适合用于兄弟组件之间的通信或者跨层级的组件通信。\n  ### Vuex\n    - Vuex 是 Vue 的状态管理库，可以用于管理应用的共享状态\n  ### $parent / $children\n    - 父组件可以通过 <font color=#00FF00>$children</font> 访问直接子组件的实例，子组件可以通过 <font color=#00FF00>$parent</font> 访问父组件的实例。\n    - 直接访问父子组件的实例会增加组件间的耦合性，不够灵活。\n\n## Vuex 的核心概念和基本用法。\n  ### State\n    - 存储应用程序的共享状态\n    - 可以通过 <font color=#00FF00>this.$store.state</font> 访问\n  ### Getter\n    - 类似于计算属性，Getter 可以对状态进行计算和处理，并返回结果\n    - 使用时需要定义在 getters 对象中\n    - 通过 <font color=#00FF00>this.$store.getters</font> 访问\n  ### Mutation\n    - Mutation 是一个同步函数，接收状态作为参数，并对状态进行修改\n    - 使用时需要定义在 mutations 对象中\n    - 通过 <font color=#00FF00>this.$store.commit</font> 提交\n  ### Action\n    - 类似于 Mutation，但可以处理异步操作\n    - 完成后提交 Mutation 来修改状态\n    - 使用时需要定义在 actions 对象中\n    - 通过 <font color=#00FF00>this.$store.dispatch</font> 分发\n  ### Module\n    - 用于将 Vuex 的状态划分为多个模块，每个模块可以拥有自己的 state、getters、mutations 和 actions\n\n## Vue 中的动画是如何实现的\n  ### 过渡类名\n    - v-enter\n    - v-enter-active\n    - v-enter-to\n    - v-leave\n    - v-leave-active\n    - v-leave-to\n  ### 过渡钩子函数\n    - before-enter\n    - enter\n    - after-enter\n    - enter-cancelled\n    - before-leave\n    - leave\n    - after-leave\n    - leave-cancelled\n  ### 过渡模式\n    - in-out: 表示新元素先进行过渡，然后旧元素离开过渡\n    - in-out: 表示旧元素先进行过渡，然后新元素进入过渡\n  <font color=#00FFFF>例：</font>\n  ```html\n    <template>\n      <transition name=\"fade\" mode=\"out-in\">\n        <div v-if=\"show\" key=\"fade\">\n          <!-- 进入过渡的元素 -->\n          <h1>Hello Vue!</h1>\n        </div>\n      </transition>\n      <button @click=\"toggleShow\">Toggle</button>\n    </template>\n    <script>\n    export default {\n      data() {\n        return {\n          show: false,\n        };\n      },\n      methods: {\n        toggleShow() {\n          this.show = !this.show;\n        },\n      },\n    };\n    </script>\n    <style>\n    .fade-enter-active,\n    .fade-leave-active {\n      transition: opacity 0.5s;\n    }\n    .fade-enter,\n    .fade-leave-to {\n      opacity: 0;\n    }\n    </style>\n  ```\n\n## 虚拟DOM\n  - 虚拟DOM（Virtual DOM）是一种在内存中构建和操作的抽象DOM表示。它是由Vue和其他一些JavaScript库使用的技术，旨在提高DOM操作的性能和效率。\n  ### 原理\n    - 初始渲染：当应用程序加载时，Vue会将组件的模板解析成虚拟DOM树。\n    - 更新触发：当组件的数据发生变化时，Vue会生成一个新的虚拟DOM树。\n    - 对比差异：Vue会将新旧虚拟DOM树进行对比，找出它们之间的差异。\n    - 更新DOM：根据差异的结果，Vue只会更新需要变化的部分到实际的DOM中，而不是重新渲染整个组件。\n  ### 优势\n    - 提高性能：通过对比差异并只更新需要变化的部分，<font color=#00FF00>减少了对实际DOM的操作和重绘</font>，从而提高了性能。\n    - 简化开发：开发者可以专注于组件的状态和逻辑，而不需要手动操作DOM。虚拟DOM会自动处理DOM更新的细节。\n    - 跨平台能力：虚拟DOM是与平台无关的中间层，可以在不同的环境中使用，如浏览器、移动端和服务器端。\n\n## 单文件组件\n  - 单文件组件（Single File Component，SFC）是Vue中一种组织代码的方式，它将组件的模板、脚本和样式都封装在一个文件中，通常使用<font color=#00FF00>.vue</font>作为文件扩展名。\n  ### 优势\n    - 模块化开发： 将一个组件的所有相关代码放在同一个文件中，提高了代码的可维护性和复用性。\n    - 可读性增强：相关的部分可以紧密地结合在一起，便于查找和修改。\n    - 构建工具支持： 可以与构建工具（如Webpack、Vue CLI等）配合使用，通过预处理器（如Babel、TypeScript、Sass等）进行编译和打包。\n  ### 创建单文件组件\n    - 一般以.vue为扩展名的文件，并在文件中编写组件的模板、脚本和样式。\n    - 通过导入单文件组件，然后在模板中使用自定义的组件标签来引用和渲染组件。\n\n## mixin混入\n  - mixin是Vue中的一种机制，用于提取和共享组件的可复用逻辑\n  - 可以减少重复编写代码，提高代码复用性和维护性\n  - 使用mixin时需要注意命名冲突、依赖关系和全局污染等问题\n  ### 优势\n    - 代码复用：将常用的逻辑抽离为mixin，可以在多个组件中共享，避免重复编写相同的代码。\n    - 灵活性：mixin的选项可以与组件的选项进行合并，提供了一种灵活的扩展和定制组件的方式\n    - 维护性：将共享的逻辑放在mixin中，可以集中管理和维护，减少代码冗余和维护成本。\n  ### 使用时需要注意以下几点：\n    - 命名冲突：如果多个mixin中有相同的选项（如数据、方法），在合并到组件中时可能会发生命名冲突。可以使用命名空间或前缀来避免冲突。\n    - 依赖关系：mixin中的选项会与组件的选项进行合并，<font color=#00FF00>如果存在相同选项，组件选项会覆盖mixin中的选项</font>。需要注意合并顺序和依赖关系，确保最终合并的结果符合预期。\n    - 全局污染：mixin中的选项会被混入到所有使用该mixin的组件中，可能会导致全局污染和意外的副作用。需要谨慎使用，并确保mixin中的选项与组件的选项不产生冲突。\n\n## vue中key的作用\n  - key属性是用于给Vue的列表渲染（v-for指令）中的每个元素分配一个<font color=#00FF00>唯一标识</font>的特殊属性。\n  ### 使用时注意事项\n    - key的值应该是唯一且稳定的，最好使用每个元素在列表中的唯一标识作为key值，以确保元素身份的正确追踪。\n    - 不推荐使用随机数或索引作为key值，因为它们在列表顺序变化时可能会导致错误的更新行为。\n    - 当使用组件进行列表渲染时，key属性也会影响到组件的复用。不同key值的组件会被视为不同的实例，而相同key值的组件会被视为同一个实例，以实现组件的高效复用。\n\n## vue常用指令\n  - v-model：用于实现表单元素与Vue实例数据的双向绑定。\n  - v-bind：用于动态绑定属性或绑定Vue实例中的数据到HTML元素上。\n  - v-if：根据表达式的值来条件性地渲染DOM元素。\n  - v-for：用于循环渲染数组或对象的每个元素。\n  - v-on：用于监听DOM事件，触发相应的Vue实例方法。\n  - v-show：根据表达式的值来显示或隐藏DOM元素。\n  - v-text：用于设置元素的文本内容。\n  - v-html：用于将HTML代码作为元素的内容进行渲染。\n  - v-cloak：用于解决Vue编译过程中的闪烁问题，一般与CSS配合使用。\n\n## v-if与v-show区别\n  - v-if 指令根据表达式的值来动态地<font color=#00FF00>添加或移除</font>元素\n  - v-show 指令也是根据表达式的值来控制元素的<font color=#00FF00>显示和隐藏</font>\n  - v-if 有更高的切换开销\n  - 需要频繁切换的场景中，建议使用v-show\n\n## v-if与v-for一起使用\n  - vue2中，当它们同时存在于同一个元素上时，Vue 会先执行 v-for 循环，然后再在每次循环中根据 v-if 的条件判断是否渲染对应的元素，会产生不必要的性能开销。\n  - vue3 可以在template上使用v-for。\n  - vue3 以在同一个元素上同时使用， 并且只进行一次判断。\n\n## vue常用修饰符\n  - .prevent：阻止默认事件行为。\n  - .stop：阻止事件冒泡。\n  - .once：只触发一次事件，即事件处理程序只会执行一次。\n  - .capture：使用事件捕获模式，即从外部元素开始触发事件。\n  - .self：只在触发事件的元素自身上触发事件，而不是其子元素。\n  - .passive：使事件监听器为被动模式，不会调用 preventDefault()，可以提高滚动性能。\n  - .sync：用于实现父子组件之间的双向数据绑定。","slug":"vue面试题","published":1,"date":"2023-05-25T06:45:17.925Z","updated":"2023-06-05T11:59:44.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clijr0jd0000t44vc5kan1ezk","content":"<p>继续整理，本篇以vue为主，如需其他，请阅读其他文章。</p>\n<h2 id=\"vue双向绑定\"><a href=\"#vue双向绑定\" class=\"headerlink\" title=\"vue双向绑定\"></a>vue双向绑定</h2><ul>\n<li>Vue 的双向数据绑定是通过 <font color=##00FF00>v-model</font> 指令实现的。</li>\n<li>当数据模型的属性值发生变化时，Vue 会自动检测到变化，并更新对应的视图。</li>\n<li>当用户与视图进行交互，例如在输入框中输入文本时，v-model 指令会监听用户的输入事件。</li>\n<li>当用户输入发生变化时，v-model 会自动更新数据模型的属性值，确保数据的同步更新。</li>\n<li>数据模型的更新会触发 Vue 的响应式系统，进而更新相关的视图。</li>\n</ul>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><ul>\n<li>在编译阶段，Vue.js 会将 v-model 解析为一个属性和一个事件。</li>\n<li>属性部分是绑定数据的值，通常是一个变量。</li>\n<li>事件部分是监听输入事件，一般是 input 事件，可以通过修饰符指定其他事件，如 change、keyup 等。</li>\n<li>当用户在表单元素中输入内容时，触发对应的输入事件。</li>\n<li>Vue.js 捕获到输入事件后，将用户输入的值更新到绑定的属性上，实现数据的更新。</li>\n<li>同时，v-model 还会将最新的属性值反映到表单元素的 value 属性上，确保视图和数据的同步。</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><pre><code>- 在实例初始化之后、数据观测 (data observation) 和 event/watcher 事件配置之前被调用。\n- &lt;font color=#00FF00&gt;无法访问到组件的数据和方法&lt;/font&gt;\n</code></pre>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><pre><code>- 在实例创建完成后被立即调用。\n- &lt;font color=#00FF00&gt;可以访问到组件的数据和方法。&lt;/font&gt;\n- 通常在这个阶段进行数据的初始化、异步请求的发起等操作。\n</code></pre>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h3><pre><code>- 在挂载开始之前被调用\n- 模板编译已经完成，但&lt;font color=#00FF00&gt;尚未将组件挂载到页面上&lt;/font&gt;。\n</code></pre>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><pre><code>- 在挂载完成后被调用\n- 组件已经被挂载到页面上，&lt;font color=#00FF00&gt;可以操作 DOM 元素、进行初始化&lt;/font&gt;工作或与第三方库进行集成。\n</code></pre>\n<h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate\"></a>beforeUpdate</h3><pre><code>- 在数据更新之前被调用，发生在虚拟 DOM 重新渲染和打补丁之前。\n- 可以进行一些数据的预处理或在更新前进行额外的操作。\n</code></pre>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><pre><code>- 在数据更新完成后被调用，发生在虚拟 DOM 重新渲染和打补丁之后\n- 组件已经重新渲染，&lt;font color=#00FF00&gt;可以执行 DOM 操作&lt;/font&gt;。\n</code></pre>\n<h3 id=\"beforeUnmount-Vue-3-x-x2F-beforeDestroy-Vue-2-x\"><a href=\"#beforeUnmount-Vue-3-x-x2F-beforeDestroy-Vue-2-x\" class=\"headerlink\" title=\"beforeUnmount (Vue 3.x) &#x2F; beforeDestroy (Vue 2.x)\"></a>beforeUnmount (Vue 3.x) &#x2F; beforeDestroy (Vue 2.x)</h3><pre><code>- 进行一些&lt;font color=#00FF00&gt;清理&lt;/font&gt;清理工作，如清除定时器、取消订阅等。\n</code></pre>\n<h3 id=\"unmounted-Vue-3-x-x2F-destroyed-Vue-2-x\"><a href=\"#unmounted-Vue-3-x-x2F-destroyed-Vue-2-x\" class=\"headerlink\" title=\"unmounted (Vue 3.x) &#x2F; destroyed (Vue 2.x)\"></a>unmounted (Vue 3.x) &#x2F; destroyed (Vue 2.x)</h3><pre><code>- 在组件销毁完成后被调用。此时，组件已经被销毁，可以进行最后的清理工作。\n</code></pre>\n<h2 id=\"计算属性和侦听器的区别\"><a href=\"#计算属性和侦听器的区别\" class=\"headerlink\" title=\"计算属性和侦听器的区别\"></a>计算属性和侦听器的区别</h2><ul>\n<li>计算属性使用<font color=#00FF00>computed</font>声明；侦听器使用<font color=#00FF00>watch</font>声明</li>\n<li>计算属性的值会根据依赖的数据进行<font color=#00FF00>缓存</font>，只有当依赖的数据发生变化时，才会重新计算。</li>\n<li>计算属性的值会随着依赖的数据变化而自动更新，即当依赖的数据发生变化时，计算属性会自动重新计算并返回新的值。</li>\n<li>可以通过字符串形式监听单个数据，也可以通过函数形式监听多个数据。监听的数据发生变化时，侦听器会执行相应的回调函数。</li>\n<li>侦听器中的回调函数可以执行<font color=#00FF00>异步操作</font>，例如发送网络请求、操作 DOM 等。</li>\n</ul>\n<h2 id=\"Vue组件通信的方式\"><a href=\"#Vue组件通信的方式\" class=\"headerlink\" title=\"Vue组件通信的方式\"></a>Vue组件通信的方式</h2><h3 id=\"Props-x2F-emit\"><a href=\"#Props-x2F-emit\" class=\"headerlink\" title=\"Props &#x2F; $emit\"></a>Props &#x2F; $emit</h3><pre><code>- 父组件通过 &lt;font color=#00FF00&gt;Props&lt;/font&gt; 将数据传递给子组件，子组件通过 &lt;font color=#00FF00&gt;$emit&lt;/font&gt; 发送事件给父组件\n</code></pre>\n<h3 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"$refs\"></a>$refs</h3><pre><code>- 父组件通过 &lt;font color=#00FF00&gt;$refs&lt;/font&gt; 引用子组件实例，并直接调用子组件的方法或访问子组件的属性\n</code></pre>\n<h3 id=\"事件总线（Event-Bus）\"><a href=\"#事件总线（Event-Bus）\" class=\"headerlink\" title=\"事件总线（Event Bus）\"></a>事件总线（Event Bus）</h3><pre><code>- 创建一个全局的事件中心，用于父子组件之间的通信\n- 父组件通过事件中心 &lt;font color=#00FF00&gt;$emit&lt;/font&gt; 发送事件，子组件通过事件中心 &lt;font color=#00FF00&gt;$on&lt;/font&gt; 监听事件并做出响应\n- 适合用于兄弟组件之间的通信或者跨层级的组件通信。\n</code></pre>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><pre><code>- Vuex 是 Vue 的状态管理库，可以用于管理应用的共享状态\n</code></pre>\n<h3 id=\"parent-x2F-children\"><a href=\"#parent-x2F-children\" class=\"headerlink\" title=\"$parent &#x2F; $children\"></a>$parent &#x2F; $children</h3><pre><code>- 父组件可以通过 &lt;font color=#00FF00&gt;$children&lt;/font&gt; 访问直接子组件的实例，子组件可以通过 &lt;font color=#00FF00&gt;$parent&lt;/font&gt; 访问父组件的实例。\n- 直接访问父子组件的实例会增加组件间的耦合性，不够灵活。\n</code></pre>\n<h2 id=\"Vuex-的核心概念和基本用法。\"><a href=\"#Vuex-的核心概念和基本用法。\" class=\"headerlink\" title=\"Vuex 的核心概念和基本用法。\"></a>Vuex 的核心概念和基本用法。</h2><h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><pre><code>- 存储应用程序的共享状态\n- 可以通过 &lt;font color=#00FF00&gt;this.$store.state&lt;/font&gt; 访问\n</code></pre>\n<h3 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h3><pre><code>- 类似于计算属性，Getter 可以对状态进行计算和处理，并返回结果\n- 使用时需要定义在 getters 对象中\n- 通过 &lt;font color=#00FF00&gt;this.$store.getters&lt;/font&gt; 访问\n</code></pre>\n<h3 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h3><pre><code>- Mutation 是一个同步函数，接收状态作为参数，并对状态进行修改\n- 使用时需要定义在 mutations 对象中\n- 通过 &lt;font color=#00FF00&gt;this.$store.commit&lt;/font&gt; 提交\n</code></pre>\n<h3 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h3><pre><code>- 类似于 Mutation，但可以处理异步操作\n- 完成后提交 Mutation 来修改状态\n- 使用时需要定义在 actions 对象中\n- 通过 &lt;font color=#00FF00&gt;this.$store.dispatch&lt;/font&gt; 分发\n</code></pre>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h3><pre><code>- 用于将 Vuex 的状态划分为多个模块，每个模块可以拥有自己的 state、getters、mutations 和 actions\n</code></pre>\n<h2 id=\"Vue-中的动画是如何实现的\"><a href=\"#Vue-中的动画是如何实现的\" class=\"headerlink\" title=\"Vue 中的动画是如何实现的\"></a>Vue 中的动画是如何实现的</h2><h3 id=\"过渡类名\"><a href=\"#过渡类名\" class=\"headerlink\" title=\"过渡类名\"></a>过渡类名</h3><pre><code>- v-enter\n- v-enter-active\n- v-enter-to\n- v-leave\n- v-leave-active\n- v-leave-to\n</code></pre>\n<h3 id=\"过渡钩子函数\"><a href=\"#过渡钩子函数\" class=\"headerlink\" title=\"过渡钩子函数\"></a>过渡钩子函数</h3><pre><code>- before-enter\n- enter\n- after-enter\n- enter-cancelled\n- before-leave\n- leave\n- after-leave\n- leave-cancelled\n</code></pre>\n<h3 id=\"过渡模式\"><a href=\"#过渡模式\" class=\"headerlink\" title=\"过渡模式\"></a>过渡模式</h3><pre><code>- in-out: 表示新元素先进行过渡，然后旧元素离开过渡\n- in-out: 表示旧元素先进行过渡，然后新元素进入过渡\n</code></pre>\n<p>  <font color=#00FFFF>例：</font><br>  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fade&quot;</span> <span class=\"attr\">mode</span>=<span class=\"string\">&quot;out-in&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;show&quot;</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;fade&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 进入过渡的元素 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Vue!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;toggleShow&quot;</span>&gt;</span>Toggle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">show</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">toggleShow</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">show</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">show</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.fade-enter-active</span>,</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.fade-leave-active</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">0.5s</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.fade-enter</span>,</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.fade-leave-to</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h2><ul>\n<li>虚拟DOM（Virtual DOM）是一种在内存中构建和操作的抽象DOM表示。它是由Vue和其他一些JavaScript库使用的技术，旨在提高DOM操作的性能和效率。</li>\n</ul>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><pre><code>- 初始渲染：当应用程序加载时，Vue会将组件的模板解析成虚拟DOM树。\n- 更新触发：当组件的数据发生变化时，Vue会生成一个新的虚拟DOM树。\n- 对比差异：Vue会将新旧虚拟DOM树进行对比，找出它们之间的差异。\n- 更新DOM：根据差异的结果，Vue只会更新需要变化的部分到实际的DOM中，而不是重新渲染整个组件。\n</code></pre>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><pre><code>- 提高性能：通过对比差异并只更新需要变化的部分，&lt;font color=#00FF00&gt;减少了对实际DOM的操作和重绘&lt;/font&gt;，从而提高了性能。\n- 简化开发：开发者可以专注于组件的状态和逻辑，而不需要手动操作DOM。虚拟DOM会自动处理DOM更新的细节。\n- 跨平台能力：虚拟DOM是与平台无关的中间层，可以在不同的环境中使用，如浏览器、移动端和服务器端。\n</code></pre>\n<h2 id=\"单文件组件\"><a href=\"#单文件组件\" class=\"headerlink\" title=\"单文件组件\"></a>单文件组件</h2><ul>\n<li>单文件组件（Single File Component，SFC）是Vue中一种组织代码的方式，它将组件的模板、脚本和样式都封装在一个文件中，通常使用<font color=#00FF00>.vue</font>作为文件扩展名。</li>\n</ul>\n<h3 id=\"优势-1\"><a href=\"#优势-1\" class=\"headerlink\" title=\"优势\"></a>优势</h3><pre><code>- 模块化开发： 将一个组件的所有相关代码放在同一个文件中，提高了代码的可维护性和复用性。\n- 可读性增强：相关的部分可以紧密地结合在一起，便于查找和修改。\n- 构建工具支持： 可以与构建工具（如Webpack、Vue CLI等）配合使用，通过预处理器（如Babel、TypeScript、Sass等）进行编译和打包。\n</code></pre>\n<h3 id=\"创建单文件组件\"><a href=\"#创建单文件组件\" class=\"headerlink\" title=\"创建单文件组件\"></a>创建单文件组件</h3><pre><code>- 一般以.vue为扩展名的文件，并在文件中编写组件的模板、脚本和样式。\n- 通过导入单文件组件，然后在模板中使用自定义的组件标签来引用和渲染组件。\n</code></pre>\n<h2 id=\"mixin混入\"><a href=\"#mixin混入\" class=\"headerlink\" title=\"mixin混入\"></a>mixin混入</h2><ul>\n<li>mixin是Vue中的一种机制，用于提取和共享组件的可复用逻辑</li>\n<li>可以减少重复编写代码，提高代码复用性和维护性</li>\n<li>使用mixin时需要注意命名冲突、依赖关系和全局污染等问题</li>\n</ul>\n<h3 id=\"优势-2\"><a href=\"#优势-2\" class=\"headerlink\" title=\"优势\"></a>优势</h3><pre><code>- 代码复用：将常用的逻辑抽离为mixin，可以在多个组件中共享，避免重复编写相同的代码。\n- 灵活性：mixin的选项可以与组件的选项进行合并，提供了一种灵活的扩展和定制组件的方式\n- 维护性：将共享的逻辑放在mixin中，可以集中管理和维护，减少代码冗余和维护成本。\n</code></pre>\n<h3 id=\"使用时需要注意以下几点：\"><a href=\"#使用时需要注意以下几点：\" class=\"headerlink\" title=\"使用时需要注意以下几点：\"></a>使用时需要注意以下几点：</h3><pre><code>- 命名冲突：如果多个mixin中有相同的选项（如数据、方法），在合并到组件中时可能会发生命名冲突。可以使用命名空间或前缀来避免冲突。\n- 依赖关系：mixin中的选项会与组件的选项进行合并，&lt;font color=#00FF00&gt;如果存在相同选项，组件选项会覆盖mixin中的选项&lt;/font&gt;。需要注意合并顺序和依赖关系，确保最终合并的结果符合预期。\n- 全局污染：mixin中的选项会被混入到所有使用该mixin的组件中，可能会导致全局污染和意外的副作用。需要谨慎使用，并确保mixin中的选项与组件的选项不产生冲突。\n</code></pre>\n<h2 id=\"vue中key的作用\"><a href=\"#vue中key的作用\" class=\"headerlink\" title=\"vue中key的作用\"></a>vue中key的作用</h2><ul>\n<li>key属性是用于给Vue的列表渲染（v-for指令）中的每个元素分配一个<font color=#00FF00>唯一标识</font>的特殊属性。</li>\n</ul>\n<h3 id=\"使用时注意事项\"><a href=\"#使用时注意事项\" class=\"headerlink\" title=\"使用时注意事项\"></a>使用时注意事项</h3><pre><code>- key的值应该是唯一且稳定的，最好使用每个元素在列表中的唯一标识作为key值，以确保元素身份的正确追踪。\n- 不推荐使用随机数或索引作为key值，因为它们在列表顺序变化时可能会导致错误的更新行为。\n- 当使用组件进行列表渲染时，key属性也会影响到组件的复用。不同key值的组件会被视为不同的实例，而相同key值的组件会被视为同一个实例，以实现组件的高效复用。\n</code></pre>\n<h2 id=\"vue常用指令\"><a href=\"#vue常用指令\" class=\"headerlink\" title=\"vue常用指令\"></a>vue常用指令</h2><ul>\n<li>v-model：用于实现表单元素与Vue实例数据的双向绑定。</li>\n<li>v-bind：用于动态绑定属性或绑定Vue实例中的数据到HTML元素上。</li>\n<li>v-if：根据表达式的值来条件性地渲染DOM元素。</li>\n<li>v-for：用于循环渲染数组或对象的每个元素。</li>\n<li>v-on：用于监听DOM事件，触发相应的Vue实例方法。</li>\n<li>v-show：根据表达式的值来显示或隐藏DOM元素。</li>\n<li>v-text：用于设置元素的文本内容。</li>\n<li>v-html：用于将HTML代码作为元素的内容进行渲染。</li>\n<li>v-cloak：用于解决Vue编译过程中的闪烁问题，一般与CSS配合使用。</li>\n</ul>\n<h2 id=\"v-if与v-show区别\"><a href=\"#v-if与v-show区别\" class=\"headerlink\" title=\"v-if与v-show区别\"></a>v-if与v-show区别</h2><ul>\n<li>v-if 指令根据表达式的值来动态地<font color=#00FF00>添加或移除</font>元素</li>\n<li>v-show 指令也是根据表达式的值来控制元素的<font color=#00FF00>显示和隐藏</font></li>\n<li>v-if 有更高的切换开销</li>\n<li>需要频繁切换的场景中，建议使用v-show</li>\n</ul>\n<h2 id=\"v-if与v-for一起使用\"><a href=\"#v-if与v-for一起使用\" class=\"headerlink\" title=\"v-if与v-for一起使用\"></a>v-if与v-for一起使用</h2><ul>\n<li>vue2中，当它们同时存在于同一个元素上时，Vue 会先执行 v-for 循环，然后再在每次循环中根据 v-if 的条件判断是否渲染对应的元素，会产生不必要的性能开销。</li>\n<li>vue3 可以在template上使用v-for。</li>\n<li>vue3 以在同一个元素上同时使用， 并且只进行一次判断。</li>\n</ul>\n<h2 id=\"vue常用修饰符\"><a href=\"#vue常用修饰符\" class=\"headerlink\" title=\"vue常用修饰符\"></a>vue常用修饰符</h2><ul>\n<li>.prevent：阻止默认事件行为。</li>\n<li>.stop：阻止事件冒泡。</li>\n<li>.once：只触发一次事件，即事件处理程序只会执行一次。</li>\n<li>.capture：使用事件捕获模式，即从外部元素开始触发事件。</li>\n<li>.self：只在触发事件的元素自身上触发事件，而不是其子元素。</li>\n<li>.passive：使事件监听器为被动模式，不会调用 preventDefault()，可以提高滚动性能。</li>\n<li>.sync：用于实现父子组件之间的双向数据绑定。</li>\n</ul>\n","site":{"data":{"link":[{"class_name":"博客搭建","class_desc":null,"link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、簡單且強大的網誌框架"},{"name":"Butterfly","link":"https://butterfly.js.org/","avatar":"https://butterfly.js.org/img/avatar.png","descr":"此博客使用的主题"}]},{"class_name":"博客好友","class_desc":null,"link_list":[{"name":"Satoru","link":"http://www.hydrogen-h.love","avatar":"https://s2.loli.net/2023/04/12/9ClpWPTr7oDg28O.png","descr":"三点几啦，饮茶先"}]},{"class_name":"JavaScript 框架","class_desc":null,"link_list":[{"name":"Vue","link":"https://cn.vuejs.org/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"易学易用，性能出色，适用场景丰富的 Web 前端框架。"},{"name":"Vue Router","link":"https://router.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"为 Vue.js 提供富有表现力、可配置的、方便的路由"},{"name":"VueX","link":"https://vuex.vuejs.org/zh/","avatar":"https://s2.loli.net/2023/04/12/L3FbDTxo6JtAH45.png","descr":"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。"},{"name":"Pinia","link":"https://pinia.vuejs.org/zh/","avatar":"https://pinia.vuejs.org/logo.svg","descr":"符合直觉的Vue.js 状态管理库"},{"name":"React","link":"https://zh-hans.react.dev/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"用于构建 Web 和原生交互界面的库"},{"name":"React-router","link":"https://react-guide.github.io/react-router-cn/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"React Router 是完整的 React 路由解决方案"},{"name":"Redux","link":"https://www.redux.org.cn/","avatar":"https://www.redux.org.cn/assets/images/logo.png","descr":"Redux 是 JavaScript 状态容器，提供可预测化的状态管理"},{"name":"Redux-Saga","link":"https://chenyitian.gitbooks.io/redux-saga/content/","avatar":"https://gw.alipayobjects.com/zos/antfincdn/aPkFc8Sj7n/method-draw-image.svg","descr":"redux-saga 是一个用于管理 Redux 应用异步操作"},{"name":"uni-app","link":"https://uniapp.dcloud.net.cn/","avatar":"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-…c-58fc-4574-998d-17fdc7811cc3.png?v=1556263038788","descr":"uni-app 是一个使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/飞书/QQ/快手/钉钉/淘宝）、快应用等多个平台。"},{"name":"umiJs","link":"https://v3.umijs.org/zh-CN","avatar":"https://img.alicdn.com/tfs/TB1YHEpwUT1gK0jSZFhXXaAtVXa-28-27.svg","descr":"插件化的企业级前端应用框架。"}]},{"class_name":"组件库","class_desc":null,"link_list":[{"name":"element-ui","link":"https://element.eleme.io/#/zh-CN","avatar":"https://element-plus.gitee.io/images/element-plus-logo-small.svg","descr":"Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库"},{"name":"Vant","link":"https://vant-contrib.gitee.io/vant/#/zh-CN/","avatar":"https://fastly.jsdelivr.net/npm/@vant/assets/logo.png","descr":"轻量、可定制的移动端 Vue 组件库"},{"name":"Ant-design-vue","link":"https://www.antdv.com/components/overview-cn/","avatar":"https://www.antdv.com/assets/logo.1ef800a8.svg","descr":"ant-design-vue 为 Web 应用提供了丰富的基础 UI 组件，我们还将持续探索企业级应用的最佳 UI 实践。"},{"name":"Ant-design-React","link":"https://ant.design/docs/react/introduce-cn","avatar":"https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg","descr":"antd 是基于 Ant Design 设计体系的 React UI 组件库，主要用于研发企业级中后台产品。"},{"name":"Apache Echarts","link":"https://echarts.apache.org/zh/index.html","avatar":"https://fastly.jsdelivr.net/gh/apache/echarts-website@asf-site/zh/images/favicon.png?_v_=20200710_1","descr":"一个基于 JavaScript 的开源可视化图表库"},{"name":"Swiper","link":"https://www.swiper.com.cn/","avatar":"https://ts4.cn.mm.bing.net/th?id=ODLS.5ab0c640-abc6-47e1-9537-62839a7efd42&w=16&h=16&o=6&pid=1.2","descr":"开源免费强大的触摸滑动插件"}]},{"class_name":"插件官网","class_desc":null,"link_list":[{"name":"only office","link":"https://api.onlyoffice.com/zh/editors/vue","avatar":"https://images.pling.com/cache/400x400/img/00/00/4…/1238424/807671bacd91306511382c30eba35436e8f5.png","descr":"该组件使用户能够使用 Vue构建 ONLYOFFICE 文档 用户界面。"}]},{"class_name":"社区","class_desc":null,"link_list":[{"name":"掘金","link":"https://juejin.cn/","avatar":"https://s2.loli.net/2023/04/12/rBgfDink6ANjXue.png","descr":"程序员交流社区"},{"name":"gitHub","link":"https://github.com/","avatar":"https://github.com/fluidicon.png","descr":"全球最大同性交友网站"}]},{"class_name":"我好懒","class_desc":null,"link_list":[{"name":"ChatGPT","link":"https://chat.openai.com/","avatar":"https://s2.loli.net/2023/04/12/b2wRZGlmIACvOjy.png","descr":"Ai智能解决"}]},{"class_name":"设计图","class_desc":null,"link_list":[{"name":"蓝湖","link":"https://lanhuapp.com/dashboard/#/item?fid=all","avatar":"https://oms-files.oss-cn-beijing.aliyuncs.com/arti…d041cd5-36b1-4fa6-be48-1c57ddb6f5c8-WechatIM.jpeg","descr":"蓝湖是一款产品文档和设计图的共享平台，帮助互联网团队更好地管理文档和设计图。"}]}]}},"cover_type":"img","excerpt":"","more":"<p>继续整理，本篇以vue为主，如需其他，请阅读其他文章。</p>\n<h2 id=\"vue双向绑定\"><a href=\"#vue双向绑定\" class=\"headerlink\" title=\"vue双向绑定\"></a>vue双向绑定</h2><ul>\n<li>Vue 的双向数据绑定是通过 <font color=##00FF00>v-model</font> 指令实现的。</li>\n<li>当数据模型的属性值发生变化时，Vue 会自动检测到变化，并更新对应的视图。</li>\n<li>当用户与视图进行交互，例如在输入框中输入文本时，v-model 指令会监听用户的输入事件。</li>\n<li>当用户输入发生变化时，v-model 会自动更新数据模型的属性值，确保数据的同步更新。</li>\n<li>数据模型的更新会触发 Vue 的响应式系统，进而更新相关的视图。</li>\n</ul>\n<h3 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h3><ul>\n<li>在编译阶段，Vue.js 会将 v-model 解析为一个属性和一个事件。</li>\n<li>属性部分是绑定数据的值，通常是一个变量。</li>\n<li>事件部分是监听输入事件，一般是 input 事件，可以通过修饰符指定其他事件，如 change、keyup 等。</li>\n<li>当用户在表单元素中输入内容时，触发对应的输入事件。</li>\n<li>Vue.js 捕获到输入事件后，将用户输入的值更新到绑定的属性上，实现数据的更新。</li>\n<li>同时，v-model 还会将最新的属性值反映到表单元素的 value 属性上，确保视图和数据的同步。</li>\n</ul>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><pre><code>- 在实例初始化之后、数据观测 (data observation) 和 event/watcher 事件配置之前被调用。\n- &lt;font color=#00FF00&gt;无法访问到组件的数据和方法&lt;/font&gt;\n</code></pre>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><pre><code>- 在实例创建完成后被立即调用。\n- &lt;font color=#00FF00&gt;可以访问到组件的数据和方法。&lt;/font&gt;\n- 通常在这个阶段进行数据的初始化、异步请求的发起等操作。\n</code></pre>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h3><pre><code>- 在挂载开始之前被调用\n- 模板编译已经完成，但&lt;font color=#00FF00&gt;尚未将组件挂载到页面上&lt;/font&gt;。\n</code></pre>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><pre><code>- 在挂载完成后被调用\n- 组件已经被挂载到页面上，&lt;font color=#00FF00&gt;可以操作 DOM 元素、进行初始化&lt;/font&gt;工作或与第三方库进行集成。\n</code></pre>\n<h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate\"></a>beforeUpdate</h3><pre><code>- 在数据更新之前被调用，发生在虚拟 DOM 重新渲染和打补丁之前。\n- 可以进行一些数据的预处理或在更新前进行额外的操作。\n</code></pre>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><pre><code>- 在数据更新完成后被调用，发生在虚拟 DOM 重新渲染和打补丁之后\n- 组件已经重新渲染，&lt;font color=#00FF00&gt;可以执行 DOM 操作&lt;/font&gt;。\n</code></pre>\n<h3 id=\"beforeUnmount-Vue-3-x-x2F-beforeDestroy-Vue-2-x\"><a href=\"#beforeUnmount-Vue-3-x-x2F-beforeDestroy-Vue-2-x\" class=\"headerlink\" title=\"beforeUnmount (Vue 3.x) &#x2F; beforeDestroy (Vue 2.x)\"></a>beforeUnmount (Vue 3.x) &#x2F; beforeDestroy (Vue 2.x)</h3><pre><code>- 进行一些&lt;font color=#00FF00&gt;清理&lt;/font&gt;清理工作，如清除定时器、取消订阅等。\n</code></pre>\n<h3 id=\"unmounted-Vue-3-x-x2F-destroyed-Vue-2-x\"><a href=\"#unmounted-Vue-3-x-x2F-destroyed-Vue-2-x\" class=\"headerlink\" title=\"unmounted (Vue 3.x) &#x2F; destroyed (Vue 2.x)\"></a>unmounted (Vue 3.x) &#x2F; destroyed (Vue 2.x)</h3><pre><code>- 在组件销毁完成后被调用。此时，组件已经被销毁，可以进行最后的清理工作。\n</code></pre>\n<h2 id=\"计算属性和侦听器的区别\"><a href=\"#计算属性和侦听器的区别\" class=\"headerlink\" title=\"计算属性和侦听器的区别\"></a>计算属性和侦听器的区别</h2><ul>\n<li>计算属性使用<font color=#00FF00>computed</font>声明；侦听器使用<font color=#00FF00>watch</font>声明</li>\n<li>计算属性的值会根据依赖的数据进行<font color=#00FF00>缓存</font>，只有当依赖的数据发生变化时，才会重新计算。</li>\n<li>计算属性的值会随着依赖的数据变化而自动更新，即当依赖的数据发生变化时，计算属性会自动重新计算并返回新的值。</li>\n<li>可以通过字符串形式监听单个数据，也可以通过函数形式监听多个数据。监听的数据发生变化时，侦听器会执行相应的回调函数。</li>\n<li>侦听器中的回调函数可以执行<font color=#00FF00>异步操作</font>，例如发送网络请求、操作 DOM 等。</li>\n</ul>\n<h2 id=\"Vue组件通信的方式\"><a href=\"#Vue组件通信的方式\" class=\"headerlink\" title=\"Vue组件通信的方式\"></a>Vue组件通信的方式</h2><h3 id=\"Props-x2F-emit\"><a href=\"#Props-x2F-emit\" class=\"headerlink\" title=\"Props &#x2F; $emit\"></a>Props &#x2F; $emit</h3><pre><code>- 父组件通过 &lt;font color=#00FF00&gt;Props&lt;/font&gt; 将数据传递给子组件，子组件通过 &lt;font color=#00FF00&gt;$emit&lt;/font&gt; 发送事件给父组件\n</code></pre>\n<h3 id=\"refs\"><a href=\"#refs\" class=\"headerlink\" title=\"$refs\"></a>$refs</h3><pre><code>- 父组件通过 &lt;font color=#00FF00&gt;$refs&lt;/font&gt; 引用子组件实例，并直接调用子组件的方法或访问子组件的属性\n</code></pre>\n<h3 id=\"事件总线（Event-Bus）\"><a href=\"#事件总线（Event-Bus）\" class=\"headerlink\" title=\"事件总线（Event Bus）\"></a>事件总线（Event Bus）</h3><pre><code>- 创建一个全局的事件中心，用于父子组件之间的通信\n- 父组件通过事件中心 &lt;font color=#00FF00&gt;$emit&lt;/font&gt; 发送事件，子组件通过事件中心 &lt;font color=#00FF00&gt;$on&lt;/font&gt; 监听事件并做出响应\n- 适合用于兄弟组件之间的通信或者跨层级的组件通信。\n</code></pre>\n<h3 id=\"Vuex\"><a href=\"#Vuex\" class=\"headerlink\" title=\"Vuex\"></a>Vuex</h3><pre><code>- Vuex 是 Vue 的状态管理库，可以用于管理应用的共享状态\n</code></pre>\n<h3 id=\"parent-x2F-children\"><a href=\"#parent-x2F-children\" class=\"headerlink\" title=\"$parent &#x2F; $children\"></a>$parent &#x2F; $children</h3><pre><code>- 父组件可以通过 &lt;font color=#00FF00&gt;$children&lt;/font&gt; 访问直接子组件的实例，子组件可以通过 &lt;font color=#00FF00&gt;$parent&lt;/font&gt; 访问父组件的实例。\n- 直接访问父子组件的实例会增加组件间的耦合性，不够灵活。\n</code></pre>\n<h2 id=\"Vuex-的核心概念和基本用法。\"><a href=\"#Vuex-的核心概念和基本用法。\" class=\"headerlink\" title=\"Vuex 的核心概念和基本用法。\"></a>Vuex 的核心概念和基本用法。</h2><h3 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h3><pre><code>- 存储应用程序的共享状态\n- 可以通过 &lt;font color=#00FF00&gt;this.$store.state&lt;/font&gt; 访问\n</code></pre>\n<h3 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h3><pre><code>- 类似于计算属性，Getter 可以对状态进行计算和处理，并返回结果\n- 使用时需要定义在 getters 对象中\n- 通过 &lt;font color=#00FF00&gt;this.$store.getters&lt;/font&gt; 访问\n</code></pre>\n<h3 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h3><pre><code>- Mutation 是一个同步函数，接收状态作为参数，并对状态进行修改\n- 使用时需要定义在 mutations 对象中\n- 通过 &lt;font color=#00FF00&gt;this.$store.commit&lt;/font&gt; 提交\n</code></pre>\n<h3 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h3><pre><code>- 类似于 Mutation，但可以处理异步操作\n- 完成后提交 Mutation 来修改状态\n- 使用时需要定义在 actions 对象中\n- 通过 &lt;font color=#00FF00&gt;this.$store.dispatch&lt;/font&gt; 分发\n</code></pre>\n<h3 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h3><pre><code>- 用于将 Vuex 的状态划分为多个模块，每个模块可以拥有自己的 state、getters、mutations 和 actions\n</code></pre>\n<h2 id=\"Vue-中的动画是如何实现的\"><a href=\"#Vue-中的动画是如何实现的\" class=\"headerlink\" title=\"Vue 中的动画是如何实现的\"></a>Vue 中的动画是如何实现的</h2><h3 id=\"过渡类名\"><a href=\"#过渡类名\" class=\"headerlink\" title=\"过渡类名\"></a>过渡类名</h3><pre><code>- v-enter\n- v-enter-active\n- v-enter-to\n- v-leave\n- v-leave-active\n- v-leave-to\n</code></pre>\n<h3 id=\"过渡钩子函数\"><a href=\"#过渡钩子函数\" class=\"headerlink\" title=\"过渡钩子函数\"></a>过渡钩子函数</h3><pre><code>- before-enter\n- enter\n- after-enter\n- enter-cancelled\n- before-leave\n- leave\n- after-leave\n- leave-cancelled\n</code></pre>\n<h3 id=\"过渡模式\"><a href=\"#过渡模式\" class=\"headerlink\" title=\"过渡模式\"></a>过渡模式</h3><pre><code>- in-out: 表示新元素先进行过渡，然后旧元素离开过渡\n- in-out: 表示旧元素先进行过渡，然后新元素进入过渡\n</code></pre>\n<p>  <font color=#00FFFF>例：</font><br>  <figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fade&quot;</span> <span class=\"attr\">mode</span>=<span class=\"string\">&quot;out-in&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;show&quot;</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;fade&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 进入过渡的元素 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Vue!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;toggleShow&quot;</span>&gt;</span>Toggle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">show</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">toggleShow</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"variable language_\">this</span>.<span class=\"property\">show</span> = !<span class=\"variable language_\">this</span>.<span class=\"property\">show</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.fade-enter-active</span>,</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.fade-leave-active</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">transition</span>: opacity <span class=\"number\">0.5s</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.fade-enter</span>,</span></span><br><span class=\"line\"><span class=\"language-css\"><span class=\"selector-class\">.fade-leave-to</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">&#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h2><ul>\n<li>虚拟DOM（Virtual DOM）是一种在内存中构建和操作的抽象DOM表示。它是由Vue和其他一些JavaScript库使用的技术，旨在提高DOM操作的性能和效率。</li>\n</ul>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><pre><code>- 初始渲染：当应用程序加载时，Vue会将组件的模板解析成虚拟DOM树。\n- 更新触发：当组件的数据发生变化时，Vue会生成一个新的虚拟DOM树。\n- 对比差异：Vue会将新旧虚拟DOM树进行对比，找出它们之间的差异。\n- 更新DOM：根据差异的结果，Vue只会更新需要变化的部分到实际的DOM中，而不是重新渲染整个组件。\n</code></pre>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><pre><code>- 提高性能：通过对比差异并只更新需要变化的部分，&lt;font color=#00FF00&gt;减少了对实际DOM的操作和重绘&lt;/font&gt;，从而提高了性能。\n- 简化开发：开发者可以专注于组件的状态和逻辑，而不需要手动操作DOM。虚拟DOM会自动处理DOM更新的细节。\n- 跨平台能力：虚拟DOM是与平台无关的中间层，可以在不同的环境中使用，如浏览器、移动端和服务器端。\n</code></pre>\n<h2 id=\"单文件组件\"><a href=\"#单文件组件\" class=\"headerlink\" title=\"单文件组件\"></a>单文件组件</h2><ul>\n<li>单文件组件（Single File Component，SFC）是Vue中一种组织代码的方式，它将组件的模板、脚本和样式都封装在一个文件中，通常使用<font color=#00FF00>.vue</font>作为文件扩展名。</li>\n</ul>\n<h3 id=\"优势-1\"><a href=\"#优势-1\" class=\"headerlink\" title=\"优势\"></a>优势</h3><pre><code>- 模块化开发： 将一个组件的所有相关代码放在同一个文件中，提高了代码的可维护性和复用性。\n- 可读性增强：相关的部分可以紧密地结合在一起，便于查找和修改。\n- 构建工具支持： 可以与构建工具（如Webpack、Vue CLI等）配合使用，通过预处理器（如Babel、TypeScript、Sass等）进行编译和打包。\n</code></pre>\n<h3 id=\"创建单文件组件\"><a href=\"#创建单文件组件\" class=\"headerlink\" title=\"创建单文件组件\"></a>创建单文件组件</h3><pre><code>- 一般以.vue为扩展名的文件，并在文件中编写组件的模板、脚本和样式。\n- 通过导入单文件组件，然后在模板中使用自定义的组件标签来引用和渲染组件。\n</code></pre>\n<h2 id=\"mixin混入\"><a href=\"#mixin混入\" class=\"headerlink\" title=\"mixin混入\"></a>mixin混入</h2><ul>\n<li>mixin是Vue中的一种机制，用于提取和共享组件的可复用逻辑</li>\n<li>可以减少重复编写代码，提高代码复用性和维护性</li>\n<li>使用mixin时需要注意命名冲突、依赖关系和全局污染等问题</li>\n</ul>\n<h3 id=\"优势-2\"><a href=\"#优势-2\" class=\"headerlink\" title=\"优势\"></a>优势</h3><pre><code>- 代码复用：将常用的逻辑抽离为mixin，可以在多个组件中共享，避免重复编写相同的代码。\n- 灵活性：mixin的选项可以与组件的选项进行合并，提供了一种灵活的扩展和定制组件的方式\n- 维护性：将共享的逻辑放在mixin中，可以集中管理和维护，减少代码冗余和维护成本。\n</code></pre>\n<h3 id=\"使用时需要注意以下几点：\"><a href=\"#使用时需要注意以下几点：\" class=\"headerlink\" title=\"使用时需要注意以下几点：\"></a>使用时需要注意以下几点：</h3><pre><code>- 命名冲突：如果多个mixin中有相同的选项（如数据、方法），在合并到组件中时可能会发生命名冲突。可以使用命名空间或前缀来避免冲突。\n- 依赖关系：mixin中的选项会与组件的选项进行合并，&lt;font color=#00FF00&gt;如果存在相同选项，组件选项会覆盖mixin中的选项&lt;/font&gt;。需要注意合并顺序和依赖关系，确保最终合并的结果符合预期。\n- 全局污染：mixin中的选项会被混入到所有使用该mixin的组件中，可能会导致全局污染和意外的副作用。需要谨慎使用，并确保mixin中的选项与组件的选项不产生冲突。\n</code></pre>\n<h2 id=\"vue中key的作用\"><a href=\"#vue中key的作用\" class=\"headerlink\" title=\"vue中key的作用\"></a>vue中key的作用</h2><ul>\n<li>key属性是用于给Vue的列表渲染（v-for指令）中的每个元素分配一个<font color=#00FF00>唯一标识</font>的特殊属性。</li>\n</ul>\n<h3 id=\"使用时注意事项\"><a href=\"#使用时注意事项\" class=\"headerlink\" title=\"使用时注意事项\"></a>使用时注意事项</h3><pre><code>- key的值应该是唯一且稳定的，最好使用每个元素在列表中的唯一标识作为key值，以确保元素身份的正确追踪。\n- 不推荐使用随机数或索引作为key值，因为它们在列表顺序变化时可能会导致错误的更新行为。\n- 当使用组件进行列表渲染时，key属性也会影响到组件的复用。不同key值的组件会被视为不同的实例，而相同key值的组件会被视为同一个实例，以实现组件的高效复用。\n</code></pre>\n<h2 id=\"vue常用指令\"><a href=\"#vue常用指令\" class=\"headerlink\" title=\"vue常用指令\"></a>vue常用指令</h2><ul>\n<li>v-model：用于实现表单元素与Vue实例数据的双向绑定。</li>\n<li>v-bind：用于动态绑定属性或绑定Vue实例中的数据到HTML元素上。</li>\n<li>v-if：根据表达式的值来条件性地渲染DOM元素。</li>\n<li>v-for：用于循环渲染数组或对象的每个元素。</li>\n<li>v-on：用于监听DOM事件，触发相应的Vue实例方法。</li>\n<li>v-show：根据表达式的值来显示或隐藏DOM元素。</li>\n<li>v-text：用于设置元素的文本内容。</li>\n<li>v-html：用于将HTML代码作为元素的内容进行渲染。</li>\n<li>v-cloak：用于解决Vue编译过程中的闪烁问题，一般与CSS配合使用。</li>\n</ul>\n<h2 id=\"v-if与v-show区别\"><a href=\"#v-if与v-show区别\" class=\"headerlink\" title=\"v-if与v-show区别\"></a>v-if与v-show区别</h2><ul>\n<li>v-if 指令根据表达式的值来动态地<font color=#00FF00>添加或移除</font>元素</li>\n<li>v-show 指令也是根据表达式的值来控制元素的<font color=#00FF00>显示和隐藏</font></li>\n<li>v-if 有更高的切换开销</li>\n<li>需要频繁切换的场景中，建议使用v-show</li>\n</ul>\n<h2 id=\"v-if与v-for一起使用\"><a href=\"#v-if与v-for一起使用\" class=\"headerlink\" title=\"v-if与v-for一起使用\"></a>v-if与v-for一起使用</h2><ul>\n<li>vue2中，当它们同时存在于同一个元素上时，Vue 会先执行 v-for 循环，然后再在每次循环中根据 v-if 的条件判断是否渲染对应的元素，会产生不必要的性能开销。</li>\n<li>vue3 可以在template上使用v-for。</li>\n<li>vue3 以在同一个元素上同时使用， 并且只进行一次判断。</li>\n</ul>\n<h2 id=\"vue常用修饰符\"><a href=\"#vue常用修饰符\" class=\"headerlink\" title=\"vue常用修饰符\"></a>vue常用修饰符</h2><ul>\n<li>.prevent：阻止默认事件行为。</li>\n<li>.stop：阻止事件冒泡。</li>\n<li>.once：只触发一次事件，即事件处理程序只会执行一次。</li>\n<li>.capture：使用事件捕获模式，即从外部元素开始触发事件。</li>\n<li>.self：只在触发事件的元素自身上触发事件，而不是其子元素。</li>\n<li>.passive：使事件监听器为被动模式，不会调用 preventDefault()，可以提高滚动性能。</li>\n<li>.sync：用于实现父子组件之间的双向数据绑定。</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clijr0jcg000144vc3qg78m9p","category_id":"clijr0jcl000444vce82c3pnm","_id":"clijr0jct000e44vc4povgdej"},{"post_id":"clijr0jcj000344vc451p9ouu","category_id":"clijr0jcq000b44vc5ryegf02","_id":"clijr0jcu000g44vcgsgf5s4g"},{"post_id":"clijr0jcr000d44vc38zs0m5k","category_id":"clijr0jcq000b44vc5ryegf02","_id":"clijr0jcu000i44vccgv40gqe"},{"post_id":"clijr0jcn000644vcb7orblmc","category_id":"clijr0jct000f44vch9kdgapj","_id":"clijr0jcu000j44vcf66wfe1u"},{"post_id":"clijr0jco000844vc3oky1ru8","category_id":"clijr0jcu000h44vcg0u63nok","_id":"clijr0jcw000m44vceots2kek"},{"post_id":"clijr0jcp000a44vcf5xo0m6w","category_id":"clijr0jcq000b44vc5ryegf02","_id":"clijr0jcw000n44vc42lw02xe"},{"post_id":"clijr0jcr000c44vcc0ec63iz","category_id":"clijr0jct000f44vch9kdgapj","_id":"clijr0jcw000o44vcfmuwduur"},{"post_id":"clijr0jd0000t44vc5kan1ezk","category_id":"clijr0jcq000b44vc5ryegf02","_id":"clijr0jd1000v44vcht7hhk30"},{"post_id":"clijr0jcy000p44vc8977ds16","category_id":"clijr0jcz000r44vc7zti6jzt","_id":"clijr0jd2000x44vchz7y9glu"},{"post_id":"clijr0jcz000q44vca8uoavz7","category_id":"clijr0jd1000u44vc1kcm595l","_id":"clijr0jd2000y44vcewfpd9l4"},{"post_id":"clijr0jcz000s44vc1bj94zrv","category_id":"clijr0jd1000w44vc9ojfaazv","_id":"clijr0jd2000z44vcbes72blk"}],"PostTag":[],"Tag":[]}}